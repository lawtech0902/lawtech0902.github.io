<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LawTech&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/3ecc0da22b7d950f27c7f67cd28b0ded</icon>
  <subtitle>不破不立</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-18T07:23:43.460Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LawTech.</name>
    <email>584563542@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack详解</title>
    <link href="http://yoursite.com/2019/07/18/webpack-dict/"/>
    <id>http://yoursite.com/2019/07/18/webpack-dict/</id>
    <published>2019-07-18T05:18:54.000Z</published>
    <updated>2019-07-18T07:23:43.460Z</updated>
    
    <content type="html"><![CDATA[<p>webpack从入门到放弃！</p><a id="more"></a><h1 id="webpack详解"><a href="#webpack详解" class="headerlink" title="webpack详解"></a>webpack详解</h1><p>webpack是现代前端开发中最火的模块打包工具，只需要通过简单的配置，便可以完成模块的加载和打包。那它是怎么做到通过对一些插件的配置，便可以轻松实现对代码的构建呢？</p><h3 id="webpack的配置"><a href="#webpack的配置" class="headerlink" title="webpack的配置"></a>webpack的配置</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="hljs-string">"./app/entry"</span>, <span class="hljs-comment">// string | object | array</span></span><br><span class="line">  <span class="hljs-comment">// Webpack打包的入口</span></span><br><span class="line">  output: &#123;  <span class="hljs-comment">// 定义webpack如何输出的选项</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="hljs-string">"dist"</span>), <span class="hljs-comment">// string</span></span><br><span class="line">    <span class="hljs-comment">// 所有输出文件的目标路径</span></span><br><span class="line">    filename: <span class="hljs-string">"[chunkhash].js"</span>, <span class="hljs-comment">// string</span></span><br><span class="line">    <span class="hljs-comment">// 「入口(entry chunk)」文件命名模版</span></span><br><span class="line">    publicPath: <span class="hljs-string">"/assets/"</span>, <span class="hljs-comment">// string</span></span><br><span class="line">    <span class="hljs-comment">// 构建文件的输出目录</span></span><br><span class="line">    <span class="hljs-comment">/* 其它高级配置 */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-built_in">module</span>: &#123;  <span class="hljs-comment">// 模块相关配置</span></span><br><span class="line">    rules: [ <span class="hljs-comment">// 配置模块loaders，解析规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="hljs-regexp">/\.jsx?$/</span>,  <span class="hljs-comment">// RegExp | string</span></span><br><span class="line">        include: [ <span class="hljs-comment">// 和test一样，必须匹配选项</span></span><br><span class="line">          path.resolve(__dirname, <span class="hljs-string">"app"</span>)</span><br><span class="line">        ],</span><br><span class="line">        exclude: [ <span class="hljs-comment">// 必不匹配选项（优先级高于test和include）</span></span><br><span class="line">          path.resolve(__dirname, <span class="hljs-string">"app/demo-files"</span>)</span><br><span class="line">        ],</span><br><span class="line">        loader: <span class="hljs-string">"babel-loader"</span>, <span class="hljs-comment">// 模块上下文解析</span></span><br><span class="line">        options: &#123; <span class="hljs-comment">// loader的可选项</span></span><br><span class="line">          presets: [<span class="hljs-string">"es2015"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123; <span class="hljs-comment">//  解析模块的可选项</span></span><br><span class="line">    modules: [ <span class="hljs-comment">// 模块的查找目录</span></span><br><span class="line">      <span class="hljs-string">"node_modules"</span>,</span><br><span class="line">      path.resolve(__dirname, <span class="hljs-string">"app"</span>)</span><br><span class="line">    ],</span><br><span class="line">    extensions: [<span class="hljs-string">".js"</span>, <span class="hljs-string">".json"</span>, <span class="hljs-string">".jsx"</span>, <span class="hljs-string">".css"</span>], <span class="hljs-comment">// 用到的文件的扩展</span></span><br><span class="line">    alias: &#123; <span class="hljs-comment">// 模块别名列表</span></span><br><span class="line">      <span class="hljs-string">"module"</span>: <span class="hljs-string">"new-module"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="hljs-string">"source-map"</span>, <span class="hljs-comment">// enum</span></span><br><span class="line">  <span class="hljs-comment">// 为浏览器开发者工具添加元数据增强调试</span></span><br><span class="line">  plugins: [ <span class="hljs-comment">// 附加插件列表</span></span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面我们可以看到，webpack配置中需要理解几个核心的概念<code>Entry</code> 、<code>Output</code>、<code>Loaders</code> 、<code>Plugins</code>、 <code>Chunk</code></p><ul><li>Entry：指定webpack开始构建的入口模块，从该模块开始构建并计算出直接或间接依赖的模块或者库</li><li>Output：告诉webpack如何命名输出的文件以及输出的目录</li><li>Loaders：由于webpack只能处理javascript，所以我们需要对一些非js文件处理成webpack能够处理的模块，比如sass文件</li><li>Plugins：<code>Loaders</code>将各类型的文件处理成webpack能够处理的模块，<code>plugins</code>有着很强的能力。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。但也是最复杂的一个。比如对js文件进行压缩优化的<code>UglifyJsPlugin</code>插件</li><li>Chunk：coding split的产物，我们可以对一些代码打包成一个单独的chunk，比如某些公共模块，去重，更好的利用缓存。或者按需加载某些功能模块，优化加载时间。在webpack3及以前我们都利用<code>CommonsChunkPlugin</code>将一些公共代码分割成一个chunk，实现单独加载。在webpack4 中<code>CommonsChunkPlugin</code>被废弃，使用<code>SplitChunksPlugin</code></li></ul><h3 id="webpack详解-1"><a href="#webpack详解-1" class="headerlink" title="webpack详解"></a>webpack详解</h3><p>读到这里，或许你对webpack有一个大概的了解，那webpack 是怎么运行的呢？我们都知道，webpack是高度复杂抽象的插件集合，理解webpack的运行机制，对于我们日常定位构建错误以及写一些插件处理构建任务有很大的帮助。</p><h4 id="不得不说的tapable"><a href="#不得不说的tapable" class="headerlink" title="不得不说的tapable"></a>不得不说的tapable</h4><p>webpack本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fwebpack%2Ftapable" target="_blank" rel="noopener">Tapable</a>，webpack中最核心的负责编译的<code>Compiler</code>和负责创建bundles的<code>Compilation</code>都是Tapable的实例。在Tapable1.0之前，也就是webpack3及其以前使用的Tapable，提供了包括</p><ul><li><code>plugin(name:string, handler:function)</code>注册插件到Tapable对象中</li><li><code>apply(…pluginInstances: (AnyPlugin|function)[])</code>调用插件的定义，将事件监听器注册到Tapable实例注册表中</li><li><code>applyPlugins*(name:string, …)</code>多种策略细致地控制事件的触发，包括<code>applyPluginsAsync</code>、<code>applyPluginsParallel</code>等方法实现对事件触发的控制，实现</li></ul><p>（1）多个事件连续顺序执行 （2）并行执行 （3）异步执行 （4）一个接一个地执行插件，前面的输出是后一个插件的输入的瀑布流执行顺序 （5）在允许时停止执行插件，即某个插件返回了一个<code>undefined</code>的值，即退出执行 我们可以看到，Tapable就像nodejs中<code>EventEmitter</code>,提供对事件的注册<code>on</code>和触发<code>emit</code>,理解它很重要，看个栗子：比如我们来写一个插件</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CustomPlugin</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</span><br><span class="line">CustomPlugin.prototype.apply = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">compiler</span>) </span>&#123;</span><br><span class="line">  compiler.plugin(<span class="hljs-string">'emit'</span>, pluginFunction);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在webpack的生命周期中会适时的执行</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">this</span>.apply*(<span class="hljs-string">"emit"</span>,options)</span><br></pre></td></tr></table></figure><p>当然上面提到的Tapable都是1.0版本之前的，如果想深入学习，可以查看<a href="https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000008060440" target="_blank" rel="noopener">Tapable 和 事件流</a> 那1.0的Tapable又是什么样的呢？1.0版本发生了巨大的改变，不再是此前的通过<code>plugin</code>注册事件，通过<code>applyPlugins*</code>触发事件调用，那1.0的Tapable是什么呢？</p><blockquote><p>暴露出很多的钩子，可以使用它们为插件创建钩子函数</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> &#123;</span><br><span class="line">SyncHook,</span><br><span class="line">SyncBailHook,</span><br><span class="line">SyncWaterfallHook,</span><br><span class="line">SyncLoopHook,</span><br><span class="line">AsyncParallelHook,</span><br><span class="line">AsyncParallelBailHook,</span><br><span class="line">AsyncSeriesHook,</span><br><span class="line">AsyncSeriesBailHook,</span><br><span class="line">AsyncSeriesWaterfallHook</span><br><span class="line"> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">"tapable"</span>);</span><br></pre></td></tr></table></figure><p>我们来看看 怎么使用。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.hooks = &#123; <span class="hljs-comment">//hooks</span></span><br><span class="line">            goods: <span class="hljs-keyword">new</span> SyncHook([<span class="hljs-string">'goodsId'</span>, <span class="hljs-string">'number'</span>]),</span><br><span class="line">            consumer: <span class="hljs-keyword">new</span> AsyncParallelHook([<span class="hljs-string">'userId'</span>, <span class="hljs-string">'orderId'</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queryGoods(goodsId, number) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.hooks.goods.call(goodsId, number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    consumerInfoPromise(userId, orderId) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.hooks.consumer.promise(userId, orderId).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-comment">//TODO</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    consumerInfoAsync(userId, orderId) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.hooks.consumer.callAsync(userId, orderId, (err, data) =&gt; &#123;</span><br><span class="line">            <span class="hljs-comment">//TODO</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于所有的hook的构造函数均接受一个可选的string类型的数组</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> hook = <span class="hljs-keyword">new</span> SyncHook([<span class="hljs-string">"arg1"</span>, <span class="hljs-string">"arg2"</span>, <span class="hljs-string">"arg3"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 调用tap方法注册一个consument</span></span><br><span class="line">order.hooks.goods.tap(<span class="hljs-string">'QueryPlugin'</span>, (goodsId, number) =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> fetchGoods(goodsId, number);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">// 再添加一个</span></span><br><span class="line">order.hooks.goods.tap(<span class="hljs-string">'LoggerPlugin'</span>, (goodsId, number) =&gt; &#123;</span><br><span class="line">    logger(goodsId, number);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 调用</span></span><br><span class="line">order.queryGoods(<span class="hljs-string">'10000000'</span>, <span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure><p>对于一个 <code>SyncHook</code>,我们通过<code>tap</code>来添加消费者，通过<code>call</code>来触发钩子的顺序执行。</p><p>对于一个非<code>sync*</code>类型的钩子，即<code>async*</code>类型的钩子，我们还可以通过其它方式注册消费者和调用</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 注册一个sync 钩子</span></span><br><span class="line">order.hooks.consumer.tap(<span class="hljs-string">'LoggerPlugin'</span>, (userId, orderId) =&gt; &#123;</span><br><span class="line">   logger(userId, orderId);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">order.hooks.consumer.tapAsync(<span class="hljs-string">'LoginCheckPlugin'</span>, (userId, orderId, callback) =&gt; &#123;</span><br><span class="line">    LoginCheck(userId, callback);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">order.hooks.consumer.tapPromise(<span class="hljs-string">'PayPlugin'</span>, (userId, orderId) =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 调用</span></span><br><span class="line"><span class="hljs-comment">// 返回Promise</span></span><br><span class="line">order.consumerInfoPromise(<span class="hljs-string">'user007'</span>, <span class="hljs-string">'1024'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//回调函数</span></span><br><span class="line">order.consumerInfoAsync(<span class="hljs-string">'user007'</span>, <span class="hljs-string">'1024'</span>)</span><br></pre></td></tr></table></figure><p>通过上面的栗子，你可能已经大致了解了<code>Tapable</code>的用法，它的用法</p><ul><li>插件注册数量</li><li>插件注册的类型（sync, async, promise）</li><li>调用的方式（sync, async, promise）</li><li>实例钩子的时候参数数量</li><li>是否使用了<code>interception</code></li></ul><h4 id="Tapable详解"><a href="#Tapable详解" class="headerlink" title="Tapable详解"></a>Tapable详解</h4><p><img src="https://user-gold-cdn.xitu.io/2018/3/10/1620fec61c16507b?imageView2/0/w/1280/h/960/ignore-error/1" alt="Alt text"></p><p> 对于</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sync*</span><br></pre></td></tr></table></figure><p>类型的钩子来说。</p><ul><li>注册在该钩子下面的插件的执行顺序都是顺序执行。</li><li>只能使用<code>tap</code>注册，不能使用<code>tapPromise</code>和<code>tapAsync</code>注册</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 所有的钩子都继承于Hook</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span>* <span class="hljs-keyword">extends</span> <span class="hljs-title">Hook</span> </span>&#123; </span><br><span class="line">tapAsync() &#123; <span class="hljs-comment">// Sync*类型的钩子不支持tapAsync</span></span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"tapAsync is not supported on a Sync*"</span>);</span><br><span class="line">&#125;</span><br><span class="line">tapPromise() &#123;<span class="hljs-comment">// Sync*类型的钩子不支持tapPromise</span></span><br><span class="line"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"tapPromise is not supported on a Sync*"</span>);</span><br><span class="line">&#125;</span><br><span class="line">compile(options) &#123; <span class="hljs-comment">// 编译代码来按照一定的策略执行Plugin</span></span><br><span class="line">factory.setup(<span class="hljs-keyword">this</span>, options);</span><br><span class="line"><span class="hljs-keyword">return</span> factory.create(options);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>Async*</code>类型钩子</p><ul><li>支持<code>tap</code>、<code>tapPromise</code>、<code>tapAsync</code>注册</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncParallelHook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Hook</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">constructor</span>(args) &#123;</span><br><span class="line"><span class="hljs-keyword">super</span>(args);</span><br><span class="line"><span class="hljs-keyword">this</span>.call = <span class="hljs-keyword">this</span>._call = <span class="hljs-literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compile(options) &#123;</span><br><span class="line">factory.setup(<span class="hljs-keyword">this</span>, options);</span><br><span class="line"><span class="hljs-keyword">return</span> factory.create(options);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hook</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">constructor</span>(args) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">Array</span>.isArray(args)) args = [];</span><br><span class="line"><span class="hljs-keyword">this</span>._args = args; <span class="hljs-comment">// 实例钩子的时候的string类型的数组</span></span><br><span class="line"><span class="hljs-keyword">this</span>.taps = []; <span class="hljs-comment">// 消费者</span></span><br><span class="line"><span class="hljs-keyword">this</span>.interceptors = []; <span class="hljs-comment">// interceptors</span></span><br><span class="line"><span class="hljs-keyword">this</span>.call = <span class="hljs-keyword">this</span>._call =  <span class="hljs-comment">// 以sync类型方式来调用钩子</span></span><br><span class="line"><span class="hljs-keyword">this</span>._createCompileDelegate(<span class="hljs-string">"call"</span>, <span class="hljs-string">"sync"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.promise = </span><br><span class="line"><span class="hljs-keyword">this</span>._promise = <span class="hljs-comment">// 以promise方式</span></span><br><span class="line"><span class="hljs-keyword">this</span>._createCompileDelegate(<span class="hljs-string">"promise"</span>, <span class="hljs-string">"promise"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.callAsync = </span><br><span class="line"><span class="hljs-keyword">this</span>._callAsync = <span class="hljs-comment">// 以async类型方式来调用</span></span><br><span class="line"><span class="hljs-keyword">this</span>._createCompileDelegate(<span class="hljs-string">"callAsync"</span>, <span class="hljs-string">"async"</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>._x = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_createCall(type) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.compile(&#123;</span><br><span class="line">taps: <span class="hljs-keyword">this</span>.taps,</span><br><span class="line">interceptors: <span class="hljs-keyword">this</span>.interceptors,</span><br><span class="line">args: <span class="hljs-keyword">this</span>._args,</span><br><span class="line">type: type</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_createCompileDelegate(name, type) &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> lazyCompileHook = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>[name] = <span class="hljs-keyword">this</span>._createCall(type);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>[name](...args);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">return</span> lazyCompileHook;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 调用tap 类型注册</span></span><br><span class="line">tap(options, fn) &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">options = <span class="hljs-built_in">Object</span>.assign(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">"sync"</span>, <span class="hljs-attr">fn</span>: fn &#125;, options);</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">this</span>._insert(options);  <span class="hljs-comment">// 添加到 this.taps中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 注册 async类型的钩子</span></span><br><span class="line">tapAsync(options, fn) &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">options = <span class="hljs-built_in">Object</span>.assign(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">"async"</span>, <span class="hljs-attr">fn</span>: fn &#125;, options);</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">this</span>._insert(options); <span class="hljs-comment">// 添加到 this.taps中</span></span><br><span class="line">&#125;</span><br><span class="line">注册 promise类型钩子</span><br><span class="line">tapPromise(options, fn) &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">options = <span class="hljs-built_in">Object</span>.assign(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">"promise"</span>, <span class="hljs-attr">fn</span>: fn &#125;, options);</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">this</span>._insert(options); <span class="hljs-comment">// 添加到 this.taps中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次都是调用<code>tap</code>、<code>tapSync</code>、<code>tapPromise</code>注册不同类型的插件钩子，通过调用<code>call</code>、<code>callAsync</code> 、<code>promise</code>方式调用。其实调用的时候为了按照一定的执行策略执行，调用<code>compile</code>方法快速编译出一个方法来执行这些插件。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> factory = <span class="hljs-keyword">new</span> Sync*CodeFactory();</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span>* <span class="hljs-keyword">extends</span> <span class="hljs-title">Hook</span> </span>&#123; </span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">compile(options) &#123; <span class="hljs-comment">// 编译代码来按照一定的策略执行Plugin</span></span><br><span class="line">factory.setup(<span class="hljs-keyword">this</span>, options);</span><br><span class="line"><span class="hljs-keyword">return</span> factory.create(options);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sync</span>*<span class="hljs-title">CodeFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HookCodeFactory</span> </span>&#123;</span><br><span class="line">content(&#123; onError, onResult, onDone, rethrowIfPossible &#125;) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.callTapsSeries(&#123;</span><br><span class="line">onError: <span class="hljs-function">(<span class="hljs-params">i, err</span>) =&gt;</span> onError(err),</span><br><span class="line">onDone,</span><br><span class="line">rethrowIfPossible</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>compile</code>中调用<code>HookCodeFactory#create</code>方法编译生成执行代码。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HookCodeFactory</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">constructor</span>(config) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.config = config;</span><br><span class="line"><span class="hljs-keyword">this</span>.options = <span class="hljs-literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create(options) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.init(options);</span><br><span class="line"><span class="hljs-keyword">switch</span>(<span class="hljs-keyword">this</span>.options.type) &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"sync"</span>:  <span class="hljs-comment">// 编译生成sync, 结果直接返回</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-keyword">this</span>.args(), </span><br><span class="line"><span class="hljs-string">"\"use strict\";\n"</span> + <span class="hljs-keyword">this</span>.header() + <span class="hljs-keyword">this</span>.content(&#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">onResult: <span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> <span class="hljs-string">`return <span class="hljs-subst">$&#123;result&#125;</span>;\n`</span>,</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"async"</span>: <span class="hljs-comment">// async类型, 异步执行，最后将调用插件执行结果来调用callback,</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-keyword">this</span>.args(&#123;</span><br><span class="line">after: <span class="hljs-string">"_callback"</span></span><br><span class="line">&#125;), <span class="hljs-string">"\"use strict\";\n"</span> + <span class="hljs-keyword">this</span>.header() + <span class="hljs-keyword">this</span>.content(&#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">onResult: <span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> <span class="hljs-string">`_callback(null, <span class="hljs-subst">$&#123;result&#125;</span>);\n`</span>,</span><br><span class="line">onDone: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-string">"_callback();\n"</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"promise"</span>: <span class="hljs-comment">// 返回promise类型，将结果放在resolve中</span></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">code += <span class="hljs-string">"return new Promise((_resolve, _reject) =&gt; &#123;\n"</span>;</span><br><span class="line">code += <span class="hljs-string">"var _sync = true;\n"</span>;</span><br><span class="line">code += <span class="hljs-keyword">this</span>.header();</span><br><span class="line">code += <span class="hljs-keyword">this</span>.content(&#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">onResult: <span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> <span class="hljs-string">`_resolve(<span class="hljs-subst">$&#123;result&#125;</span>);\n`</span>,</span><br><span class="line">onDone: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-string">"_resolve();\n"</span></span><br><span class="line">&#125;);</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-keyword">this</span>.args(), code);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// callTap 就是执行一些插件，并将结果返回</span></span><br><span class="line">callTap(tapIndex, &#123; onError, onResult, onDone, rethrowIfPossible &#125;) &#123;</span><br><span class="line"><span class="hljs-keyword">let</span> code = <span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">let</span> hasTapCached = <span class="hljs-literal">false</span>;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">code += <span class="hljs-string">`var _fn<span class="hljs-subst">$&#123;tapIndex&#125;</span> = <span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.getTapFn(tapIndex)&#125;</span>;\n`</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> tap = <span class="hljs-keyword">this</span>.options.taps[tapIndex];</span><br><span class="line"><span class="hljs-keyword">switch</span>(tap.type) &#123;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"sync"</span>:</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">if</span>(onResult) &#123;</span><br><span class="line">code += <span class="hljs-string">`var _result<span class="hljs-subst">$&#123;tapIndex&#125;</span> = _fn<span class="hljs-subst">$&#123;tapIndex&#125;</span>(<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.args(&#123;</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">before: tap.context ? <span class="hljs-string">"_context"</span> : <span class="hljs-literal">undefined</span></span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">&#125;</span>)&#125;);\n`</span>;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">code += <span class="hljs-string">`_fn<span class="hljs-subst">$&#123;tapIndex&#125;</span>(<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.args(&#123;</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">before: tap.context ? <span class="hljs-string">"_context"</span> : <span class="hljs-literal">undefined</span></span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">&#125;</span>)&#125;);\n`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(onResult) &#123; <span class="hljs-comment">// 结果透传</span></span><br><span class="line">code += onResult(<span class="hljs-string">`_result<span class="hljs-subst">$&#123;tapIndex&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(onDone) &#123; <span class="hljs-comment">// 通知插件执行完毕，可以执行下一个插件</span></span><br><span class="line">code += onDone();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"async"</span>: <span class="hljs-comment">//异步执行，插件运行完后再将结果通过执行callback透传</span></span><br><span class="line"><span class="hljs-keyword">let</span> cbCode = <span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(onResult)</span><br><span class="line">cbCode += <span class="hljs-string">`(_err<span class="hljs-subst">$&#123;tapIndex&#125;</span>, _result<span class="hljs-subst">$&#123;tapIndex&#125;</span>) =&gt; &#123;\n`</span>;</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">cbCode += <span class="hljs-string">`_err<span class="hljs-subst">$&#123;tapIndex&#125;</span> =&gt; &#123;\n`</span>;</span><br><span class="line">cbCode += <span class="hljs-string">`if(_err<span class="hljs-subst">$&#123;tapIndex&#125;</span>) &#123;\n`</span>;</span><br><span class="line">cbCode += onError(<span class="hljs-string">`_err<span class="hljs-subst">$&#123;tapIndex&#125;</span>`</span>);</span><br><span class="line">cbCode += <span class="hljs-string">"&#125; else &#123;\n"</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(onResult) &#123;</span><br><span class="line">cbCode += onResult(<span class="hljs-string">`_result<span class="hljs-subst">$&#123;tapIndex&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cbCode += <span class="hljs-string">"&#125;\n"</span>;</span><br><span class="line">cbCode += <span class="hljs-string">"&#125;"</span>;</span><br><span class="line">code += <span class="hljs-string">`_fn<span class="hljs-subst">$&#123;tapIndex&#125;</span>(<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.args(&#123;</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">before: tap.context ? <span class="hljs-string">"_context"</span> : <span class="hljs-literal">undefined</span>,</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">after: cbCode <span class="hljs-regexp">//</span>cbCode将结果透传</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">&#125;</span>)&#125;);\n`</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line"><span class="hljs-keyword">case</span> <span class="hljs-string">"promise"</span>: <span class="hljs-comment">// _fn$&#123;tapIndex&#125; 就是第tapIndex 个插件，它必须是个Promise类型的插件</span></span><br><span class="line">code += <span class="hljs-string">`var _hasResult<span class="hljs-subst">$&#123;tapIndex&#125;</span> = false;\n`</span>;</span><br><span class="line">code += <span class="hljs-string">`_fn<span class="hljs-subst">$&#123;tapIndex&#125;</span>(<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.args(&#123;</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">before: tap.context ? <span class="hljs-string">"_context"</span> : <span class="hljs-literal">undefined</span></span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">&#125;</span>)&#125;).then(_result<span class="hljs-subst">$&#123;tapIndex&#125;</span> =&gt; &#123;\n`</span>;</span><br><span class="line">code += <span class="hljs-string">`_hasResult<span class="hljs-subst">$&#123;tapIndex&#125;</span> = true;\n`</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(onResult) &#123;</span><br><span class="line">code += onResult(<span class="hljs-string">`_result<span class="hljs-subst">$&#123;tapIndex&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 按照插件的注册顺序，按照顺序递归调用执行插件</span></span><br><span class="line">callTapsSeries(&#123; onError, onResult, onDone, rethrowIfPossible &#125;) &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">const</span> firstAsync = <span class="hljs-keyword">this</span>.options.taps.findIndex(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> t.type !== <span class="hljs-string">"sync"</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> next = <span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">const</span> done = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> next(i + <span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.callTap(i, &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">onResult: onResult &amp;&amp; <span class="hljs-function">(<span class="hljs-params">(result</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> onResult(i, result, done, doneBreak);</span><br><span class="line">&#125;),</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">return</span> next(<span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callTapsLooping(&#123; onError, onDone, rethrowIfPossible &#125;) &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> syncOnly = <span class="hljs-keyword">this</span>.options.taps.every(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> t.type === <span class="hljs-string">"sync"</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> code = <span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(!syncOnly) &#123;</span><br><span class="line">code += <span class="hljs-string">"var _looper = () =&gt; &#123;\n"</span>;</span><br><span class="line">code += <span class="hljs-string">"var _loopAsync = false;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">code += <span class="hljs-string">"var _loop;\n"</span>;</span><br><span class="line">code += <span class="hljs-string">"do &#123;\n"</span>;</span><br><span class="line">code += <span class="hljs-string">"_loop = false;\n"</span>;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">code += <span class="hljs-keyword">this</span>.callTapsSeries(&#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">onResult: <span class="hljs-function">(<span class="hljs-params">i, result, next, doneBreak</span>) =&gt;</span> &#123; <span class="hljs-comment">// 一旦某个插件返回不为undefined,  即一只调用某个插件执行，如果为undefined,开始调用下一个</span></span><br><span class="line"><span class="hljs-keyword">let</span> code = <span class="hljs-string">""</span>;</span><br><span class="line">code += <span class="hljs-string">`if(<span class="hljs-subst">$&#123;result&#125;</span> !== undefined) &#123;\n`</span>;</span><br><span class="line">code += <span class="hljs-string">"_loop = true;\n"</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(!syncOnly)</span><br><span class="line">code += <span class="hljs-string">"if(_loopAsync) _looper();\n"</span>;</span><br><span class="line">code += doneBreak(<span class="hljs-literal">true</span>);</span><br><span class="line">code += <span class="hljs-string">`&#125; else &#123;\n`</span>;</span><br><span class="line">code += next();</span><br><span class="line">code += <span class="hljs-string">`&#125;\n`</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> code;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line">code += <span class="hljs-string">"&#125; while(_loop);\n"</span>;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 并行调用插件执行</span></span><br><span class="line">callTapsParallel(&#123; onError, onResult, onDone, rethrowIfPossible, onTap = <span class="hljs-function">(<span class="hljs-params">i, run</span>) =&gt;</span> run() &#125;) &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-comment">// 遍历注册都所有插件，并调用</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.options.taps.length; i++) &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">code += <span class="hljs-string">"if(_counter &lt;= 0) break;\n"</span>;</span><br><span class="line">code += onTap(i, () =&gt; <span class="hljs-keyword">this</span>.callTap(i, &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">onResult: onResult &amp;&amp; <span class="hljs-function">(<span class="hljs-params">(result</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-keyword">let</span> code = <span class="hljs-string">""</span>;</span><br><span class="line">code += <span class="hljs-string">"if(_counter &gt; 0) &#123;\n"</span>;</span><br><span class="line">code += onResult(i, result, done, doneBreak);</span><br><span class="line">code += <span class="hljs-string">"&#125;\n"</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> code;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;), done, doneBreak);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>HookCodeFactory#create</code>中调用到<code>content</code>方法，此方法将按照此钩子的执行策略，调用不同的方法来执行编译 生成最终的代码。</p><ul><li><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SyncHook中调用`callTapsSeries`编译生成最终执行插件的函数，`callTapsSeries`做的就是将插件列表中插件按照注册顺序遍历执行。</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncHookCodeFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HookCodeFactory</span> </span>&#123;</span><br><span class="line">content(&#123; onError, onResult, onDone, rethrowIfPossible &#125;) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.callTapsSeries(&#123;</span><br><span class="line">onError: <span class="hljs-function">(<span class="hljs-params">i, err</span>) =&gt;</span> onError(err),</span><br><span class="line">onDone,</span><br><span class="line">rethrowIfPossible</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SyncBailHook中当一旦某个返回值结果不为<code>undefined</code>便结束执行列表中的插件</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncBailHookCodeFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HookCodeFactory</span> </span>&#123;</span><br><span class="line">content(&#123; onError, onResult, onDone, rethrowIfPossible &#125;) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.callTapsSeries(&#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">onResult: <span class="hljs-function">(<span class="hljs-params">i, result, next</span>) =&gt;</span> <span class="hljs-string">`if(<span class="hljs-subst">$&#123;result&#125;</span> !== undefined) &#123;\n<span class="hljs-subst">$&#123;onResult(result)&#125;</span>;\n&#125; else &#123;\n<span class="hljs-subst">$&#123;next()&#125;</span>&#125;\n`</span>,</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SyncWaterfallHook中上一个插件执行结果当作下一个插件的入参</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncWaterfallHookCodeFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HookCodeFactory</span> </span>&#123;</span><br><span class="line">content(&#123; onError, onResult, onDone, rethrowIfPossible &#125;) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.callTapsSeries(&#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">onResult: <span class="hljs-function">(<span class="hljs-params">i, result, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-keyword">let</span> code = <span class="hljs-string">""</span>;</span><br><span class="line">code += <span class="hljs-string">`if(<span class="hljs-subst">$&#123;result&#125;</span> !== undefined) &#123;\n`</span>;</span><br><span class="line">code += <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>._args[<span class="hljs-number">0</span>]&#125;</span> = <span class="hljs-subst">$&#123;result&#125;</span>;\n`</span>;</span><br><span class="line">code += <span class="hljs-string">`&#125;\n`</span>;</span><br><span class="line">code += next();</span><br><span class="line"><span class="hljs-keyword">return</span> code;</span><br><span class="line">&#125;,</span><br><span class="line">onDone: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> onResult(<span class="hljs-keyword">this</span>._args[<span class="hljs-number">0</span>]),</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AsyncParallelHook调用<code>callTapsParallel</code>并行执行插件</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncParallelHookCodeFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HookCodeFactory</span> </span>&#123;</span><br><span class="line">content(&#123; onError, onDone &#125;) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.callTapsParallel(&#123;</span><br><span class="line">onError: <span class="hljs-function">(<span class="hljs-params">i, err, done, doneBreak</span>) =&gt;</span> onError(err) + doneBreak(<span class="hljs-literal">true</span>),</span><br><span class="line">onDone</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack流程篇"><a href="#webpack流程篇" class="headerlink" title="webpack流程篇"></a>webpack流程篇</h3><p>本文关于webpack 的流程讲解是基于webpack4的。</p><h4 id="webpack-入口文件"><a href="#webpack-入口文件" class="headerlink" title="webpack 入口文件"></a>webpack 入口文件</h4><p>从webpack项目的package.json文件中我们找到了入口执行函数，在函数中引入webpack，那么入口将会是<code>lib/webpack.js</code>,而如果在shell中执行，那么将会走到<code>./bin/webpack.js</code>,我们就以<code>lib/webpack.js</code>为入口开始吧！</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-string">"name"</span>: <span class="hljs-string">"webpack"</span>,</span><br><span class="line">  <span class="hljs-string">"version"</span>: <span class="hljs-string">"4.1.1"</span>,</span><br><span class="line">  ...</span><br><span class="line">  <span class="hljs-string">"main"</span>: <span class="hljs-string">"lib/webpack.js"</span>,</span><br><span class="line">  <span class="hljs-string">"web"</span>: <span class="hljs-string">"lib/webpack.web.js"</span>,</span><br><span class="line">  <span class="hljs-string">"bin"</span>: <span class="hljs-string">"./bin/webpack.js"</span>,</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="webpack入口"><a href="#webpack入口" class="headerlink" title="webpack入口"></a>webpack入口</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> webpack = <span class="hljs-function">(<span class="hljs-params">options, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-comment">// 验证options正确性</span></span><br><span class="line">    <span class="hljs-comment">// 预处理options</span></span><br><span class="line">    options = <span class="hljs-keyword">new</span> WebpackOptionsDefaulter().process(options); <span class="hljs-comment">// webpack4的默认配置</span></span><br><span class="line">compiler = <span class="hljs-keyword">new</span> Compiler(options.context); <span class="hljs-comment">// 实例Compiler</span></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-comment">// 若options.watch === true &amp;&amp; callback 则开启watch线程</span></span><br><span class="line">compiler.watch(watchOptions, callback);</span><br><span class="line">compiler.run(callback);</span><br><span class="line"><span class="hljs-keyword">return</span> compiler;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>webpack 的入口文件其实就实例了<code>Compiler</code>并调用了<code>run</code>方法开启了编译，webpack的编译都按照下面的钩子调用顺序执行。</p><ul><li>before-run 清除缓存</li><li>run 注册缓存数据钩子</li><li>before-compile</li><li>compile 开始编译</li><li>make 从入口分析依赖以及间接依赖模块，创建模块对象</li><li>build-module 模块构建</li><li>seal 构建结果封装， 不可再更改</li><li>after-compile 完成构建，缓存数据</li><li>emit 输出到dist目录</li></ul><h4 id="编译-amp-构建流程"><a href="#编译-amp-构建流程" class="headerlink" title="编译&amp;构建流程"></a>编译&amp;构建流程</h4><p>webpack中负责构建和编译都是<code>Compilation</code></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Compilation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Tapable</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">constructor</span>(compiler) &#123;</span><br><span class="line"><span class="hljs-keyword">super</span>();</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks = &#123;</span><br><span class="line"><span class="hljs-comment">// hooks</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">this</span>.compiler = compiler;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-comment">// template</span></span><br><span class="line"><span class="hljs-keyword">this</span>.mainTemplate = <span class="hljs-keyword">new</span> MainTemplate(<span class="hljs-keyword">this</span>.outputOptions);</span><br><span class="line"><span class="hljs-keyword">this</span>.chunkTemplate = <span class="hljs-keyword">new</span> ChunkTemplate(<span class="hljs-keyword">this</span>.outputOptions);</span><br><span class="line"><span class="hljs-keyword">this</span>.hotUpdateChunkTemplate = <span class="hljs-keyword">new</span> HotUpdateChunkTemplate(</span><br><span class="line"><span class="hljs-keyword">this</span>.outputOptions</span><br><span class="line">);</span><br><span class="line"><span class="hljs-keyword">this</span>.runtimeTemplate = <span class="hljs-keyword">new</span> RuntimeTemplate(</span><br><span class="line"><span class="hljs-keyword">this</span>.outputOptions,</span><br><span class="line"><span class="hljs-keyword">this</span>.requestShortener</span><br><span class="line">);</span><br><span class="line"><span class="hljs-keyword">this</span>.moduleTemplates = &#123;</span><br><span class="line">javascript: <span class="hljs-keyword">new</span> ModuleTemplate(<span class="hljs-keyword">this</span>.runtimeTemplate),</span><br><span class="line">webassembly: <span class="hljs-keyword">new</span> ModuleTemplate(<span class="hljs-keyword">this</span>.runtimeTemplate)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 构建生成的资源</span></span><br><span class="line"><span class="hljs-keyword">this</span>.chunks = [];</span><br><span class="line"><span class="hljs-keyword">this</span>.chunkGroups = [];</span><br><span class="line"><span class="hljs-keyword">this</span>.modules = [];</span><br><span class="line"><span class="hljs-keyword">this</span>.additionalChunkAssets = [];</span><br><span class="line"><span class="hljs-keyword">this</span>.assets = &#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">this</span>.children = [];</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// </span></span><br><span class="line">buildModule(<span class="hljs-built_in">module</span>, optional, origin, dependencies, thisCallback) &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-comment">// 调用module.build方法进行编译代码，build中 其实是利用acorn编译生成AST</span></span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.buildModule.call(<span class="hljs-built_in">module</span>);</span><br><span class="line"><span class="hljs-built_in">module</span>.build(<span class="hljs-comment">/**param*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 将模块添加到列表中，并编译模块</span></span><br><span class="line">_addModuleChain(context, dependency, onModule, callback) &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-comment">// moduleFactory.create创建模块，这里会先利用loader处理文件，然后生成模块对象</span></span><br><span class="line">    moduleFactory.create(</span><br><span class="line">&#123;</span><br><span class="line">contextInfo: &#123;</span><br><span class="line">issuer: <span class="hljs-string">""</span>,</span><br><span class="line">compiler: <span class="hljs-keyword">this</span>.compiler.name</span><br><span class="line">&#125;,</span><br><span class="line">context: context,</span><br><span class="line">dependencies: [dependency]</span><br><span class="line">&#125;,</span><br><span class="line">(err, <span class="hljs-built_in">module</span>) =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> addModuleResult = <span class="hljs-keyword">this</span>.addModule(<span class="hljs-built_in">module</span>);</span><br><span class="line"><span class="hljs-built_in">module</span> = addModuleResult.module;</span><br><span class="line">onModule(<span class="hljs-built_in">module</span>);</span><br><span class="line">dependency.module = <span class="hljs-built_in">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-comment">// 调用buildModule编译模块</span></span><br><span class="line"><span class="hljs-keyword">this</span>.buildModule(<span class="hljs-built_in">module</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, err =&gt; &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 添加入口模块，开始编译&amp;构建</span></span><br><span class="line">addEntry(context, entry, name, callback) &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">this</span>._addModuleChain( <span class="hljs-comment">// 调用_addModuleChain添加模块</span></span><br><span class="line">context,</span><br><span class="line">entry,</span><br><span class="line"><span class="hljs-built_in">module</span> =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.entries.push(<span class="hljs-built_in">module</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seal(callback) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.seal.call();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">const</span> chunk = <span class="hljs-keyword">this</span>.addChunk(name);</span><br><span class="line"><span class="hljs-keyword">const</span> entrypoint = <span class="hljs-keyword">new</span> Entrypoint(name);</span><br><span class="line">entrypoint.setRuntimeChunk(chunk);</span><br><span class="line">entrypoint.addOrigin(<span class="hljs-literal">null</span>, name, preparedEntrypoint.request);</span><br><span class="line"><span class="hljs-keyword">this</span>.namedChunkGroups.set(name, entrypoint);</span><br><span class="line"><span class="hljs-keyword">this</span>.entrypoints.set(name, entrypoint);</span><br><span class="line"><span class="hljs-keyword">this</span>.chunkGroups.push(entrypoint);</span><br><span class="line"></span><br><span class="line">GraphHelpers.connectChunkGroupAndChunk(entrypoint, chunk);</span><br><span class="line">GraphHelpers.connectChunkAndModule(chunk, <span class="hljs-built_in">module</span>);</span><br><span class="line"></span><br><span class="line">chunk.entryModule = <span class="hljs-built_in">module</span>;</span><br><span class="line">chunk.name = name;</span><br><span class="line"></span><br><span class="line"> <span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.beforeHash.call();</span><br><span class="line"><span class="hljs-keyword">this</span>.createHash();</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.afterHash.call();</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.beforeModuleAssets.call();</span><br><span class="line"><span class="hljs-keyword">this</span>.createModuleAssets();</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.hooks.shouldGenerateChunkAssets.call() !== <span class="hljs-literal">false</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.beforeChunkAssets.call();</span><br><span class="line"><span class="hljs-keyword">this</span>.createChunkAssets();</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">createHash() &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 生成 assets 资源并 保存到 Compilation.assets 中 给webpack写插件的时候会用到</span></span><br><span class="line">createModuleAssets() &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.modules.length; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-built_in">module</span> = <span class="hljs-keyword">this</span>.modules[i];</span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">module</span>.buildInfo.assets) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> assetName <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">module</span>.buildInfo.assets)) &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> fileName = <span class="hljs-keyword">this</span>.getPath(assetName);</span><br><span class="line"><span class="hljs-keyword">this</span>.assets[fileName] = <span class="hljs-built_in">module</span>.buildInfo.assets[assetName]; </span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.moduleAsset.call(<span class="hljs-built_in">module</span>, fileName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createChunkAssets() &#123;</span><br><span class="line"> <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在webpack <code>make</code>钩子中, <code>tapAsync</code>注册了一个<code>DllEntryPlugin</code>, 就是将入口模块通过调用<code>compilation.addEntry</code>方法将所有的入口模块添加到编译构建队列中，开启编译流程。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">compiler.hooks.make.tapAsync(<span class="hljs-string">"DllEntryPlugin"</span>, (compilation, callback) =&gt; &#123;</span><br><span class="line">compilation.addEntry(</span><br><span class="line"><span class="hljs-keyword">this</span>.context,</span><br><span class="line"><span class="hljs-keyword">new</span> DllEntryDependency(</span><br><span class="line"><span class="hljs-keyword">this</span>.entries.map(<span class="hljs-function">(<span class="hljs-params">e, idx</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> dep = <span class="hljs-keyword">new</span> SingleEntryDependency(e);</span><br><span class="line">dep.loc = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.name&#125;</span>:<span class="hljs-subst">$&#123;idx&#125;</span>`</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> dep;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="hljs-keyword">this</span>.name</span><br><span class="line">),</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>随后在<code>addEntry</code> 中调用<code>_addModuleChain</code>开始编译。在<code>_addModuleChain</code>首先会生成模块，最后构建。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NormalModuleFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Tapable</span> </span>&#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">create(data, callback) &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.beforeResolve.callAsync(</span><br><span class="line">&#123;</span><br><span class="line">contextInfo,</span><br><span class="line">resolveOptions,</span><br><span class="line">context,</span><br><span class="line">request,</span><br><span class="line">dependencies</span><br><span class="line">&#125;,</span><br><span class="line">(err, result) =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Ignored</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!result) <span class="hljs-keyword">return</span> callback();</span><br><span class="line"><span class="hljs-comment">// factory 钩子会触发 resolver 钩子执行，而resolver钩子中会利用acorn 处理js生成AST，再利用acorn处理前，会使用loader加载文件</span></span><br><span class="line"><span class="hljs-keyword">const</span> factory = <span class="hljs-keyword">this</span>.hooks.factory.call(<span class="hljs-literal">null</span>);</span><br><span class="line"></span><br><span class="line">factory(result, (err, <span class="hljs-built_in">module</span>) =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">module</span> &amp;&amp; <span class="hljs-keyword">this</span>.cachePredicate(<span class="hljs-built_in">module</span>)) &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> d <span class="hljs-keyword">of</span> dependencies) &#123;</span><br><span class="line">d.__NormalModuleFactoryCache = <span class="hljs-built_in">module</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callback(<span class="hljs-literal">null</span>, <span class="hljs-built_in">module</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编译完成后，调用<code>compilation.seal</code>方法封闭，生成资源，这些资源保存在<code>compilation.assets</code>, <code>compilation.chunk</code>, 在给webpack写插件的时候会用到</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Compiler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Tapable</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">constructor</span>(context) &#123;</span><br><span class="line"><span class="hljs-keyword">super</span>();</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks = &#123;</span><br><span class="line">beforeRun: <span class="hljs-keyword">new</span> AsyncSeriesHook([<span class="hljs-string">"compilation"</span>]),</span><br><span class="line">run: <span class="hljs-keyword">new</span> AsyncSeriesHook([<span class="hljs-string">"compilation"</span>]),</span><br><span class="line">emit: <span class="hljs-keyword">new</span> AsyncSeriesHook([<span class="hljs-string">"compilation"</span>]),</span><br><span class="line">afterEmit: <span class="hljs-keyword">new</span> AsyncSeriesHook([<span class="hljs-string">"compilation"</span>]),</span><br><span class="line">compilation: <span class="hljs-keyword">new</span> SyncHook([<span class="hljs-string">"compilation"</span>, <span class="hljs-string">"params"</span>]),</span><br><span class="line">beforeCompile: <span class="hljs-keyword">new</span> AsyncSeriesHook([<span class="hljs-string">"params"</span>]),</span><br><span class="line">compile: <span class="hljs-keyword">new</span> SyncHook([<span class="hljs-string">"params"</span>]),</span><br><span class="line">make: <span class="hljs-keyword">new</span> AsyncParallelHook([<span class="hljs-string">"compilation"</span>]),</span><br><span class="line">afterCompile: <span class="hljs-keyword">new</span> AsyncSeriesHook([<span class="hljs-string">"compilation"</span>]),</span><br><span class="line"><span class="hljs-comment">// other hooks</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(callback) &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> startTime = <span class="hljs-built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> onCompiled = <span class="hljs-function">(<span class="hljs-params">err, compilation</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.emitAssets(compilation, err =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (compilation.hooks.needAdditionalPass.call()) &#123;</span><br><span class="line">compilation.needAdditionalPass = <span class="hljs-literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> stats = <span class="hljs-keyword">new</span> Stats(compilation);</span><br><span class="line">stats.startTime = startTime;</span><br><span class="line">stats.endTime = <span class="hljs-built_in">Date</span>.now();</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.done.callAsync(stats, err =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.additionalPass.callAsync(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"><span class="hljs-keyword">this</span>.compile(onCompiled);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.beforeRun.callAsync(<span class="hljs-keyword">this</span>, err =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.run.callAsync(<span class="hljs-keyword">this</span>, err =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.readRecords(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.compile(onCompiled);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 输出文件到构建目录</span></span><br><span class="line">emitAssets(compilation, callback) &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.emit.callAsync(compilation, err =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line">outputPath = compilation.getPath(<span class="hljs-keyword">this</span>.outputPath);</span><br><span class="line"><span class="hljs-keyword">this</span>.outputFileSystem.mkdirp(outputPath, emitFiles);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newCompilationParams() &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> params = &#123;</span><br><span class="line">normalModuleFactory: <span class="hljs-keyword">this</span>.createNormalModuleFactory(),</span><br><span class="line">contextModuleFactory: <span class="hljs-keyword">this</span>.createContextModuleFactory(),</span><br><span class="line">compilationDependencies: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compile(callback) &#123;</span><br><span class="line"><span class="hljs-keyword">const</span> params = <span class="hljs-keyword">this</span>.newCompilationParams();</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.beforeCompile.callAsync(params, err =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.compile.call(params);</span><br><span class="line"><span class="hljs-keyword">const</span> compilation = <span class="hljs-keyword">this</span>.newCompilation(params);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.make.callAsync(compilation, err =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line">compilation.finish();</span><br><span class="line"><span class="hljs-comment">// make 钩子执行后，调用seal生成资源</span></span><br><span class="line">compilation.seal(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"><span class="hljs-keyword">this</span>.hooks.afterCompile.callAsync(compilation, err =&gt; &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> callback(err);</span><br><span class="line"><span class="hljs-comment">// emit, 生成最终文件</span></span><br><span class="line"><span class="hljs-keyword">return</span> callback(<span class="hljs-literal">null</span>, compilation);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后输出"><a href="#最后输出" class="headerlink" title="最后输出"></a>最后输出</h4><p>在<code>seal</code>执行后，便会调用<code>emit</code>钩子，根据webpack config文件的output配置的path属性，将文件输出到指定的path.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack从入门到放弃！&lt;/p&gt;
    
    </summary>
    
      <category term="FE" scheme="http://yoursite.com/categories/FE/"/>
    
    
      <category term="FE, webpack" scheme="http://yoursite.com/tags/FE-webpack/"/>
    
  </entry>
  
  <entry>
    <title>flex布局详解</title>
    <link href="http://yoursite.com/2019/07/18/flex/"/>
    <id>http://yoursite.com/2019/07/18/flex/</id>
    <published>2019-07-18T05:18:54.000Z</published>
    <updated>2019-07-19T02:24:22.913Z</updated>
    
    <content type="html"><![CDATA[<p>前端从入门到放弃之搞定flex布局！</p><a id="more"></a><h2 id="寻根溯源话布局"><a href="#寻根溯源话布局" class="headerlink" title="寻根溯源话布局"></a>寻根溯源话布局</h2><p>一切都始于这样一个问题：怎样通过 CSS 简单而优雅的实现水平、垂直同时居中。记得刚开始学习 CSS 的时候，看到 <code>float</code> 属性不由得感觉眼前一亮，顺理成章的联想到 Word 文档排版中用到的的左对齐、右对齐和居中对齐，然而很快就失望的发现 CSS 中并不存在 <code>float: center</code> 的写法，那么 <code>text-align: center</code>、<code>verticle-align: center</code> 是否可行呢？答案也是否定的。这两个属性只能用于行内元素，对于块级元素的布局是无效的。</p><p>在网页布局没有进入 CSS 的时代，排版几乎是通过 <code>table</code> 元素实现的，在 <code>table</code> 的单元格里可以方便的使用 <code>align</code>、<code>valign</code> 来实现水平和垂直方向的对齐，随着 Web 语义化的流行，这些写法逐渐淡出了视野，CSS 标准为我们提供了 3 种布局方式：<code>标准文档流</code>、<code>浮动布局</code>和<code>定位布局</code>。这几种方式的搭配使用可以轻松搞定 PC 端页面的常见需求，比如实现水平居中可以使用 <code>margin: 0 auto</code>，实现水平垂直同时居中可以如下设置：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.dad</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.son</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: auto;</span><br><span class="line">    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.dad</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.son</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="line">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="line">    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">50px</span>;</span><br><span class="line">    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，这些写法都存在一些缺陷：缺少语义并且不够灵活。我们需要的是通过 1 个属性就能优雅的实现子元素居中或均匀分布，甚至可以随着窗口缩放自动适应。在这样的需求下，CSS 的第 4 种布局方式诞生了，这就是我们今天要重点介绍的 flex 布局。</p><h2 id="flex-基本概念"><a href="#flex-基本概念" class="headerlink" title="flex 基本概念"></a>flex 基本概念</h2><p>使用 flex 布局首先要设置父容器 <code>display: flex</code>，然后再设置 <code>justify-content: center</code> 实现水平居中，最后设置 <code>align-items: center</code> 实现垂直居中。</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-id">#dad</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">    <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="line">    <span class="hljs-attribute">align-items</span>: center</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lc-gold-cdn.xitu.io/933e6f0857399ccf7e83.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><p>就是这么简单，大功告成。等等，好像哪里不对，<code>justify-content</code> 和 <code>align-items</code> 是啥？哪里可以看出横向、竖向的语义？是的，flex 的确没有那么简单，这就要从两个基本概念说起了。</p><p><img src="https://lc-gold-cdn.xitu.io/221bb6de73e54f4104a1.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><p>说来也不难，flex 的核心的概念就是 <strong>容器</strong> 和 <strong>轴</strong>。容器包括外层的 <strong>父容器</strong> 和内层的 <strong>子容器</strong>，轴包括 <strong>主轴</strong> 和 <strong>交叉轴</strong>，可以说 flex 布局的全部特性都构建在这两个概念上。flex 布局涉及到 12 个 CSS 属性（不含 <code>display: flex</code>），其中父容器、子容器各 6 个。不过常用的属性只有 4 个，父容器、子容器各 2 个，我们就先从常用的说起吧。</p><h3 id="1-容器"><a href="#1-容器" class="headerlink" title="1. 容器"></a>1. 容器</h3><blockquote><p>容器具有这样的特点：父容器可以统一设置子容器的排列方式，子容器也可以单独设置自身的排列方式，如果两者同时设置，以子容器的设置为准。</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/f443b657dbc39d361f68.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><h4 id="1-1-父容器"><a href="#1-1-父容器" class="headerlink" title="1.1 父容器"></a>1.1 父容器</h4><ul><li><p>设置子容器沿主轴排列：<strong>justify-content</strong></p><p><code>justify-content</code> 属性用于定义如何沿着主轴方向排列子容器。</p></li></ul><p><img src="https://lc-gold-cdn.xitu.io/be5b7f0e022a8da60ed8.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>flex-start</strong>：起始端对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/ac1d8c5e7b4a2ba51ca7.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>flex-end</strong>：末尾段对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/9ec9245881c2882a35a6.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>center</strong>：居中对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/476461f1b9604a985046.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>space-around</strong>：子容器沿主轴均匀分布，位于首尾两端的子容器到父容器的距离是子容器间距的一半。</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/63119c88aa64853107a9.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>space-between</strong>：子容器沿主轴均匀分布，位于首尾两端的子容器与父容器相切。</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/495f46fc9c5c0c6d1e65.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><ul><li><p>设置子容器如何沿交叉轴排列：<strong>align-items</strong></p><p><code>align-items</code> 属性用于定义如何沿着交叉轴方向分配子容器的间距。</p></li></ul><p><img src="https://lc-gold-cdn.xitu.io/e7e6aa079f5333828c58.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>flex-start</strong>：起始端对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/56622862c7831a4d61be.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>flex-end</strong>：末尾段对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/33519955a141be1e713a.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>center</strong>：居中对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/f10513a47130d52f2aa8.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>baseline</strong>：基线对齐，这里的 <code>baseline</code> 默认是指首行文字，即 <code>first baseline</code>，所有子容器向基线对齐，交叉轴起点到元素基线距离最大的子容器将会与交叉轴起始端相切以确定基线。</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/f78e9f42be9a3f165f8f.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>stretch</strong>：子容器沿交叉轴方向的尺寸拉伸至与父容器一致。</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/160170b3d2022800ffea.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><h4 id="1-2-子容器"><a href="#1-2-子容器" class="headerlink" title="1.2 子容器"></a>1.2 子容器</h4><ul><li>在主轴上如何伸缩：<strong>flex</strong></li></ul><p><img src="https://lc-gold-cdn.xitu.io/089d48122453e9fc372c.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><p>  子容器是有弹性的（flex 即弹性），它们会自动填充剩余空间，子容器的伸缩比例由 <code>flex</code> 属性确定。</p><p>  <code>flex</code> 的值可以是无单位数字（如：1, 2, 3），也可以是有单位数字（如：15px，30px，60px），还可以是 <code>none</code> 关键字。子容器会按照 <code>flex</code> 定义的尺寸比例自动伸缩，如果取值为 <code>none</code> 则不伸缩。</p><p>  虽然 <code>flex</code> 是多个属性的缩写，允许 1 - 3 个值连用，但通常用 1 个值就可以满足需求，它的全部写法可参考下图。</p><p><img src="https://lc-gold-cdn.xitu.io/78e9030183f686e0b6ed.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><ul><li>单独设置子容器如何沿交叉轴排列：<strong>align-self</strong></li></ul><p><img src="https://lc-gold-cdn.xitu.io/1d09fe5bb413a6dfa5dd.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><p>  每个子容器也可以单独定义沿交叉轴排列的方式，此属性的可选值与父容器 <code>align-items</code> 属性完全一致，如果两者同时设置则以子容器的 <code>align-self</code> 属性为准。</p><blockquote><p><strong>flex-start</strong>：起始端对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/93d138727b9dd780bdda.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>flex-end</strong>：末尾段对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/112f075777fdcb6f5d6f.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>center</strong>：居中对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/d7b0131447247a5228fe.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>baseline</strong>：基线对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/26b04323df92c4b1b023.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>stretch</strong>：拉伸对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/ef196e2ba84c406c9ad6.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><h3 id="2-轴"><a href="#2-轴" class="headerlink" title="2. 轴"></a>2. 轴</h3><p>如图所示，<strong>轴</strong> 包括 <strong>主轴</strong> 和 <strong>交叉轴</strong>，我们知道 <code>justify-content</code> 属性决定子容器沿主轴的排列方式，<code>align-items</code> 属性决定子容器沿着交叉轴的排列方式。那么轴本身又是怎样确定的呢？在 flex 布局中，<code>flex-direction</code> 属性决定主轴的方向，交叉轴的方向由主轴确定。</p><p><img src="https://lc-gold-cdn.xitu.io/5f2a17efffe8f3ab78a4.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><ul><li>主轴</li></ul><p>主轴的起始端由 <code>flex-start</code> 表示，末尾段由 <code>flex-end</code> 表示。不同的主轴方向对应的起始端、末尾段的位置也不相同。</p><blockquote><p>向右：<code>flex-direction: row</code></p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/da0c2a225cbbdba47297.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p>向下：<code>flex-direction: column</code></p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/ab305a50ff35d7e7b6b4.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p>向左：<code>flex-direction: row-reverse</code></p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/f3b60f80ddd45974449d.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p>向上：<code>flex-direction: column-reverse</code></p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/c219413da157decc5b9e.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><ul><li><p>交叉轴</p><p>主轴沿逆时针方向旋转 90° 就得到了交叉轴，交叉轴的起始端和末尾段也由 <code>flex-start</code> 和 <code>flex-end</code> 表示。</p><p>上面介绍的几项属性是 flex 布局中最常用到的部分，一般来说可以满足大多数需求，如果实现复杂的布局还需要深入了解更多的属性。</p></li></ul><hr><h2 id="flex-进阶概念"><a href="#flex-进阶概念" class="headerlink" title="flex 进阶概念"></a>flex 进阶概念</h2><h3 id="1-父容器"><a href="#1-父容器" class="headerlink" title="1. 父容器"></a>1. 父容器</h3><ul><li><p>设置换行方式：<strong>flex-wrap</strong></p><p>决定子容器是否换行排列，不但可以顺序换行而且支持逆序换行。</p></li></ul><p><img src="https://lc-gold-cdn.xitu.io/19fb0f3a31fa497191b8.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>nowrap</strong>：不换行</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/a41d1342e46cd37cd09e.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>wrap</strong>：换行</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/0566bf9682ffa0890624.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>wrap-reverse</strong>：逆序换行</p></blockquote><p>逆序换行是指沿着交叉轴的反方向换行。</p><p><img src="https://lc-gold-cdn.xitu.io/2f578fcc69919238bd3b.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><ul><li><p>轴向与换行组合设置：<strong>flex-flow</strong></p><p>flow 即流向，也就是子容器沿着哪个方向流动，流动到终点是否允许换行，比如 <code>flex-flow: row wrap</code>，<code>flex-flow</code> 是一个复合属性，相当于 flex-direction 与 flex-wrap 的组合，可选的取值如下：</p><ul><li><code>row</code>、<code>column</code> 等，可单独设置主轴方向</li><li><code>wrap</code>、<code>nowrap</code> 等，可单独设置换行方式</li><li><code>row nowrap</code>、<code>column wrap</code> 等，也可两者同时设置</li></ul></li><li><p>多行沿交叉轴对齐：<strong>align-content</strong></p><p>当子容器多行排列时，设置行与行之间的对齐方式。</p></li></ul><p><img src="https://lc-gold-cdn.xitu.io/ff9bd219375f048b3304.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>flex-start</strong>：起始端对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/0183db03d8fedadc4cf8.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>flex-end</strong>：末尾段对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/12e524438423ac7afc8c.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>center</strong>：居中对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/274a5c1282b997e423db.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>space-around</strong>：等边距均匀分布</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/4a435e3fd0cab3433631.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>space-between</strong>：等间距均匀分布</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/f50d931bdfeb6c24ccae.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><blockquote><p><strong>stretch</strong>：拉伸对齐</p></blockquote><p><img src="https://lc-gold-cdn.xitu.io/878b39463db6bc499fbc.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><h3 id="2-子容器"><a href="#2-子容器" class="headerlink" title="2. 子容器"></a>2. 子容器</h3><ul><li><p>设置基准大小：<strong>flex-basis</strong></p><p><code>flex-basis</code> 表示在不伸缩的情况下子容器的原始尺寸。主轴为横向时代表宽度，主轴为纵向时代表高度。</p></li></ul><p><img src="https://lc-gold-cdn.xitu.io/af0dbf4ca6e857ff5de8.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><p><img src="https://lc-gold-cdn.xitu.io/7c73d684a32fd8411db6.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><ul><li><p>设置扩展比例：<strong>flex-grow</strong></p><p>子容器弹性伸展的比例。如图，剩余空间按 1:2 的比例分配给子容器。</p></li></ul><p><img src="https://lc-gold-cdn.xitu.io/bcca55b82d18e2ac2367.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><p><img src="https://lc-gold-cdn.xitu.io/72e9f508dff25a474b40.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><ul><li><p>设置收缩比例：<strong>flex-shrink</strong></p><p>子容器弹性收缩的比例。如图，超出的部分按 1:2 的比例从给子容器中减去。</p></li></ul><p><img src="https://lc-gold-cdn.xitu.io/38596937d4f86beeac0b.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><p><img src="https://lc-gold-cdn.xitu.io/d278e36c13b9643ff481.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><ul><li><p>设置排列顺序：<strong>order</strong></p><p>改变子容器的排列顺序，覆盖 HTML 代码中的顺序，默认值为 0，可以为负值，数值越小排列越靠前。</p></li></ul><p><img src="https://lc-gold-cdn.xitu.io/4eb20f9bfc611e66b069.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><hr><p>  以上就是 flex 布局的全部属性，一共 12 个，父容器、子容器各 6 个，可以随时通过下图进行回顾。</p><p><img src="https://lc-gold-cdn.xitu.io/0dd26d8e99257ff36443.png?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端从入门到放弃之搞定flex布局！&lt;/p&gt;
    
    </summary>
    
      <category term="FE" scheme="http://yoursite.com/categories/FE/"/>
    
    
      <category term="FE, flex" scheme="http://yoursite.com/tags/FE-flex/"/>
    
  </entry>
  
  <entry>
    <title>Golang sync.Map浅析</title>
    <link href="http://yoursite.com/2018/07/10/golang-sync-map/"/>
    <id>http://yoursite.com/2018/07/10/golang-sync-map/</id>
    <published>2018-07-10T05:18:54.000Z</published>
    <updated>2018-07-25T03:08:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Go 1.6之前， 内置的map类型是部分goroutine安全的，并发的读没有问题，并发的写可能有问题。自go 1.6之后， 并发地读写map会报错，这在一些知名的开源库中都存在这个问题，所以go 1.9之前的解决方案是额外绑定一个锁，封装成一个新的struct或者单独使用锁都可以。</p><p>本文深入到<code>sync.Map</code>的具体实现中，看看为了增加一个功能，代码是如何变的复杂的,以及作者在实现<code>sync.Map</code>的一些思想。</p><a id="more"></a><p>###有并发问题的map</p><p>官方的<a href="https://golang.org/doc/faq#atomic_maps" target="_blank" rel="noopener">faq</a>已经提到内建的<code>map</code>不是线程(goroutine)安全的。</p><p>首先，让我们看一段并发读写的代码,下列程序中一个goroutine一直读，一个goroutine一只写同一个键值，即即使读写的键不相同，而且map也没有”扩容”等操作，代码还是会报错。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">_ = m[<span class="hljs-number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">m[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误信息是: <code>fatal error: concurrent map read and map write</code>。</p><p>如果你查看Go的源代码: <a href="https://github.com/golang/go/blob/master/src/runtime/hashmap_fast.go#L118" target="_blank" rel="noopener">hashmap_fast.go#L118</a>,会看到读的时候会检查<code>hashWriting</code>标志， 如果有这个标志，就会报并发错误。</p><p>写的时候会设置这个标志: <a href="https://github.com/golang/go/blob/master/src/runtime/hashmap.go#L542" target="_blank" rel="noopener">hashmap.go#L542</a></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h.flags |= hashWriting</span><br></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/blob/master/src/runtime/hashmap.go#L628" target="_blank" rel="noopener">hashmap.go#L628</a>设置完之后会取消这个标记。</p><p>当然，代码中还有好几处并发读写的检查， 比如写的时候也会检查是不是有并发的写，删除键的时候类似写，遍历的时候并发读写问题等。</p><p>有时候，map的并发问题不是那么容易被发现, 你可以利用<code>-race</code>参数来检查。</p><h3 id="Go-1-9之前的解决方案"><a href="#Go-1-9之前的解决方案" class="headerlink" title="Go 1.9之前的解决方案"></a>Go 1.9之前的解决方案</h3><p>但是，很多时候，我们会并发地使用map对象，尤其是在一定规模的项目中，map总会保存goroutine共享的数据。在Go官方blog的<a href="https://blog.golang.org/go-maps-in-action" target="_blank" rel="noopener">Go maps in action</a>一文中，提供了一种简便的解决方案。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> counter = <span class="hljs-keyword">struct</span>&#123;</span><br><span class="line">    sync.RWMutex</span><br><span class="line">    m <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span></span><br><span class="line">&#125;&#123;m: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>)&#125;</span><br></pre></td></tr></table></figure><p>它使用嵌入struct为map增加一个读写锁。</p><p>读数据的时候很方便的加锁：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">counter.RLock()</span><br><span class="line">n := counter.m[<span class="hljs-string">"some_key"</span>]</span><br><span class="line">counter.RUnlock()</span><br><span class="line">fmt.Println(<span class="hljs-string">"some_key:"</span>, n)</span><br></pre></td></tr></table></figure><p>写数据的时候:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">counter.Lock()</span><br><span class="line">counter.m[<span class="hljs-string">"some_key"</span>]++</span><br><span class="line">counter.Unlock()</span><br></pre></td></tr></table></figure><h3 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h3><p>可以说，上面的解决方案相当简洁，并且利用读写锁而不是Mutex可以进一步减少读写的时候因为锁带来的性能。</p><p>但是，它在一些场景下也有问题，如果熟悉Java的同学，可以对比一下java的<code>ConcurrentHashMap</code>的实现，在map的数据非常大的情况下，一把锁会导致大并发的客户端共争一把锁，Java的解决方案是<code>shard</code>, 内部使用多个锁，每个区间共享一把锁，这样减少了数据共享一把锁带来的性能影响，<a href="https://github.com/orcaman" target="_blank" rel="noopener">orcaman</a>提供了这个思路的一个实现： <a href="https://github.com/orcaman/concurrent-map" target="_blank" rel="noopener">concurrent-map</a>，他也询问了Go相关的开发人员是否在Go中也实现这种<a href="https://github.com/golang/go/issues/20360" target="_blank" rel="noopener">方案</a>，由于实现的复杂性，答案是<code>Yes, we considered it.</code>,但是除非有特别的性能提升和应用场景，否则没有进一步的开发消息。</p><p>那么，在Go 1.9中<code>sync.Map</code>是怎么实现的呢？它是如何解决并发提升性能的呢？</p><p><code>sync.Map</code>的实现有几个优化点，这里先列出来，我们后面慢慢分析。</p><ol><li>空间换时间。 通过冗余的两个数据结构(read、dirty),实现加锁对性能的影响。</li><li>使用只读数据(read)，避免读写冲突。</li><li>动态调整，miss次数多了之后，将dirty数据提升为read。</li><li>double-checking。</li><li>延迟删除。 删除一个键值只是打标记，只有在提升dirty的时候才清理删除的数据。</li><li>优先从read读取、更新、删除，因为对read的读取不需要锁。</li></ol><p>下面我们介绍<code>sync.Map</code>的重点代码，以便理解它的实现思想。</p><p>首先，我们看一下<code>sync.Map</code>的数据结构：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Map <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line"><span class="hljs-comment">// 当涉及到dirty数据的操作的时候，需要使用这个锁</span></span><br><span class="line">mu Mutex</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 一个只读的数据结构，因为只读，所以不会有读写冲突。</span></span><br><span class="line"><span class="hljs-comment">// 所以从这个数据中读取总是安全的。</span></span><br><span class="line"><span class="hljs-comment">// 实际上，实际也会更新这个数据的entries,如果entry是未删除的(unexpunged), 并不需要加锁。如果entry已经被删除了，需要加锁，以便更新dirty数据。</span></span><br><span class="line">read atomic.Value <span class="hljs-comment">// readOnly</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// dirty数据包含当前的map包含的entries,它包含最新的entries(包括read中未删除的数据,虽有冗余，但是提升dirty字段为read的时候非常快，不用一个一个的复制，而是直接将这个数据结构作为read字段的一部分),有些数据还可能没有移动到read字段中。</span></span><br><span class="line"><span class="hljs-comment">// 对于dirty的操作需要加锁，因为对它的操作可能会有读写竞争。</span></span><br><span class="line"><span class="hljs-comment">// 当dirty为空的时候， 比如初始化或者刚提升完，下一次的写操作会复制read字段中未删除的数据到这个数据中。</span></span><br><span class="line">dirty <span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*entry</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 当从Map中读取entry的时候，如果read中不包含这个entry,会尝试从dirty中读取，这个时候会将misses加一，</span></span><br><span class="line"><span class="hljs-comment">// 当misses累积到 dirty的长度的时候， 就会将dirty提升为read,避免从dirty中miss太多次。因为操作dirty需要加锁。</span></span><br><span class="line">misses <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的数据结构很简单，值包含四个字段：<code>read</code>、<code>mu</code>、<code>dirty</code>、<code>misses</code>。</p><p>它使用了冗余的数据结构<code>read</code>、<code>dirty</code>。<code>dirty</code>中会包含<code>read</code>中为删除的entries，新增加的entries会加入到<code>dirty</code>中。</p><p><code>read</code>的数据结构是：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> readOnly <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">m       <span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*entry</span><br><span class="line">amended <span class="hljs-keyword">bool</span> <span class="hljs-comment">// 如果Map.dirty有些数据不在中的时候，这个值为true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>amended</code>指明<code>Map.dirty</code>中有<code>readOnly.m</code>未包含的数据，所以如果从<code>Map.read</code>找不到数据的话，还要进一步到<code>Map.dirty</code>中查找。</p><p>对Map.read的修改是通过原子操作进行的。</p><p>虽然<code>read</code>和<code>dirty</code>有冗余数据，但这些数据是通过指针指向同一个数据，所以尽管Map的value会很大，但是冗余的空间占用还是有限的。</p><p><code>readOnly.m</code>和<code>Map.dirty</code>存储的值类型是<code>*entry</code>,它包含一个指针p, 指向用户存储的value值。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> entry <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">p unsafe.Pointer <span class="hljs-comment">// *interface&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p有三种值：</p><ul><li>nil: entry已被删除了，并且m.dirty为nil</li><li>expunged: entry已被删除了，并且m.dirty不为nil，而且这个entry不存在于m.dirty中</li><li>其它： entry是一个正常的值</li></ul><p>以上是<code>sync.Map</code>的数据结构，下面我们重点看看<code>Load</code>、<code>Store</code>、<code>Delete</code>、<code>Range</code>这四个方法，其它辅助方法可以参考这四个方法来理解。</p><h4 id="Load"><a href="#Load" class="headerlink" title="Load"></a>Load</h4><p>加载方法，也就是提供一个键<code>key</code>,查找对应的值<code>value</code>,如果不存在，通过<code>ok</code>反映：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Map)</span> <span class="hljs-title">Load</span><span class="hljs-params">(key <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(value <span class="hljs-keyword">interface</span>&#123;&#125;, ok <span class="hljs-keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 1.首先从m.read中得到只读readOnly,从它的map中查找，不需要加锁</span></span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line">e, ok := read.m[key]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2. 如果没找到，并且m.dirty中有新数据，需要从m.dirty查找，这个时候需要加锁</span></span><br><span class="line"><span class="hljs-keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line">m.mu.Lock()</span><br><span class="line"><span class="hljs-comment">// 双检查，避免加锁的时候m.dirty提升为m.read,这个时候m.read可能被替换了。</span></span><br><span class="line">read, _ = m.read.Load().(readOnly)</span><br><span class="line">e, ok = read.m[key]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 如果m.read中还是不存在，并且m.dirty中有新数据</span></span><br><span class="line"><span class="hljs-keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line"><span class="hljs-comment">// 从m.dirty查找</span></span><br><span class="line">e, ok = m.dirty[key]</span><br><span class="line"><span class="hljs-comment">// 不管m.dirty中存不存在，都将misses计数加一</span></span><br><span class="line"><span class="hljs-comment">// missLocked()中满足条件后就会提升m.dirty</span></span><br><span class="line">m.missLocked()</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> e.load()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个值的关注的地方。一个是首先从<code>m.read</code>中加载，不存在的情况下，并且<code>m.dirty</code>中有新数据，加锁，然后从<code>m.dirty</code>中加载。</p><p>二是这里使用了双检查的处理，因为在下面的两个语句中，这两行语句并不是一个原子操作。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line">m.mu.Lock()</span><br></pre></td></tr></table></figure><p>虽然第一句执行的时候条件满足，但是在加锁之前，<code>m.dirty</code>可能被提升为<code>m.read</code>,所以加锁后还得再检查<code>m.read</code>，后续的方法中都使用了这个方法。</p><p>双检查的技术Java程序员非常熟悉了，单例模式的实现之一就是利用双检查的技术。</p><p>可以看到，如果我们查询的键值正好存在于<code>m.read</code>中，无须加锁，直接返回，理论上性能优异。即使不存在于<code>m.read</code>中，经过<code>miss</code>几次之后，<code>m.dirty</code>会被提升为<code>m.read</code>，又会从<code>m.read</code>中查找。所以对于更新／增加较少，加载存在的key很多的case,性能基本和无锁的map类似。</p><p>下面看看<code>m.dirty</code>是如何被提升的。 <code>missLocked</code>方法中可能会将<code>m.dirty</code>提升。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Map)</span> <span class="hljs-title">missLocked</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">m.misses++</span><br><span class="line"><span class="hljs-keyword">if</span> m.misses &lt; <span class="hljs-built_in">len</span>(m.dirty) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">m.read.Store(readOnly&#123;m: m.dirty&#125;)</span><br><span class="line">m.dirty = <span class="hljs-literal">nil</span></span><br><span class="line">m.misses = <span class="hljs-number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的最后三行代码就是提升<code>m.dirty</code>的，很简单的将<code>m.dirty</code>作为<code>readOnly</code>的<code>m</code>字段，原子更新<code>m.read</code>。提升后<code>m.dirty</code>、<code>m.misses</code>重置， 并且<code>m.read.amended</code>为false。</p><h4 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h4><p>这个方法是更新或者新增一个entry。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Map)</span> <span class="hljs-title">Store</span><span class="hljs-params">(key, value <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// 如果m.read存在这个键，并且这个entry没有被标记删除，尝试直接存储。</span></span><br><span class="line"><span class="hljs-comment">// 因为m.dirty也指向这个entry,所以m.dirty也保持最新的entry。</span></span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line"><span class="hljs-keyword">if</span> e, ok := read.m[key]; ok &amp;&amp; e.tryStore(&amp;value) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 如果`m.read`不存在或者已经被标记删除</span></span><br><span class="line">m.mu.Lock()</span><br><span class="line">read, _ = m.read.Load().(readOnly)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> e, ok := read.m[key]; ok &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> e.unexpungeLocked() &#123; <span class="hljs-comment">//标记成未被删除</span></span><br><span class="line">m.dirty[key] = e <span class="hljs-comment">//m.dirty中不存在这个键，所以加入m.dirty</span></span><br><span class="line">&#125;</span><br><span class="line">e.storeLocked(&amp;value) <span class="hljs-comment">//更新</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> e, ok := m.dirty[key]; ok &#123; <span class="hljs-comment">// m.dirty存在这个键，更新</span></span><br><span class="line">e.storeLocked(&amp;value)</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//新键值</span></span><br><span class="line"><span class="hljs-keyword">if</span> !read.amended &#123; <span class="hljs-comment">//m.dirty中没有新的数据，往m.dirty中增加第一个新键</span></span><br><span class="line">m.dirtyLocked() <span class="hljs-comment">//从m.read中复制未删除的数据</span></span><br><span class="line">m.read.Store(readOnly&#123;m: read.m, amended: <span class="hljs-literal">true</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">m.dirty[key] = newEntry(value) <span class="hljs-comment">//将这个entry加入到m.dirty中</span></span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Map)</span> <span class="hljs-title">dirtyLocked</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> m.dirty != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line">m.dirty = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*entry, <span class="hljs-built_in">len</span>(read.m))</span><br><span class="line"><span class="hljs-keyword">for</span> k, e := <span class="hljs-keyword">range</span> read.m &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> !e.tryExpungeLocked() &#123;</span><br><span class="line">m.dirty[k] = e</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *entry)</span> <span class="hljs-title">tryExpungeLocked</span><span class="hljs-params">()</span> <span class="hljs-params">(isExpunged <span class="hljs-keyword">bool</span>)</span></span> &#123;</span><br><span class="line">p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="hljs-keyword">for</span> p == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line"><span class="hljs-comment">// 将已经删除标记为nil的数据标记为expunged</span></span><br><span class="line"><span class="hljs-keyword">if</span> atomic.CompareAndSwapPointer(&amp;e.p, <span class="hljs-literal">nil</span>, expunged) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">p = atomic.LoadPointer(&amp;e.p)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> p == expunged</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以看到，以上操作都是先从操作<code>m.read</code>开始的，不满足条件再加锁，然后操作<code>m.dirty</code>。</p><p><code>Store</code>可能会在某种情况下(初始化或者m.dirty刚被提升后)从<code>m.read</code>中复制数据，如果这个时候<code>m.read</code>中数据量非常大，可能会影响性能。</p><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p>删除一个键值。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Map)</span> <span class="hljs-title">Delete</span><span class="hljs-params">(key <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line">e, ok := read.m[key]</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line">m.mu.Lock()</span><br><span class="line">read, _ = m.read.Load().(readOnly)</span><br><span class="line">e, ok = read.m[key]</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &amp;&amp; read.amended &#123;</span><br><span class="line"><span class="hljs-built_in">delete</span>(m.dirty, key)</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> ok &#123;</span><br><span class="line">e.<span class="hljs-built_in">delete</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，删除操作还是从<code>m.read</code>中开始， 如果这个entry不存在于<code>m.read</code>中，并且<code>m.dirty</code>中有新数据，则加锁尝试从<code>m.dirty</code>中删除。</p><p>注意，还是要双检查的。 从<code>m.dirty</code>中直接删除即可，就当它没存在过，但是如果是从<code>m.read</code>中删除，并不会直接删除，而是打标记：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *entry)</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> <span class="hljs-params">(hadValue <span class="hljs-keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">for</span> &#123;</span><br><span class="line">p := atomic.LoadPointer(&amp;e.p)</span><br><span class="line"><span class="hljs-comment">// 已标记为删除</span></span><br><span class="line"><span class="hljs-keyword">if</span> p == <span class="hljs-literal">nil</span> || p == expunged &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 原子操作，e.p标记为nil</span></span><br><span class="line"><span class="hljs-keyword">if</span> atomic.CompareAndSwapPointer(&amp;e.p, p, <span class="hljs-literal">nil</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><p>因为<code>for ... range map</code>是内建的语言特性，所以没有办法使用<code>for range</code>遍历<code>sync.Map</code>, 但是可以使用它的<code>Range</code>方法，通过回调的方式遍历。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Map)</span> <span class="hljs-title">Range</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(key, value <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">bool</span>)</span> &#123;</span><br><span class="line">read, _ := m.read.Load().(readOnly)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 如果m.dirty中有新数据，则提升m.dirty,然后在遍历</span></span><br><span class="line"><span class="hljs-keyword">if</span> read.amended &#123;</span><br><span class="line"><span class="hljs-comment">//提升m.dirty</span></span><br><span class="line">m.mu.Lock()</span><br><span class="line">read, _ = m.read.Load().(readOnly) <span class="hljs-comment">//双检查</span></span><br><span class="line"><span class="hljs-keyword">if</span> read.amended &#123;</span><br><span class="line">read = readOnly&#123;m: m.dirty&#125;</span><br><span class="line">m.read.Store(read)</span><br><span class="line">m.dirty = <span class="hljs-literal">nil</span></span><br><span class="line">m.misses = <span class="hljs-number">0</span></span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 遍历, for range是安全的</span></span><br><span class="line"><span class="hljs-keyword">for</span> k, e := <span class="hljs-keyword">range</span> read.m &#123;</span><br><span class="line">v, ok := e.load()</span><br><span class="line"><span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line"><span class="hljs-keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> !f(k, v) &#123;</span><br><span class="line"><span class="hljs-keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Range方法调用前可能会做一个<code>m.dirty</code>的提升，不过提升<code>m.dirty</code>不是一个耗时的操作。</p><h3 id="sync-Map的性能"><a href="#sync-Map的性能" class="headerlink" title="sync.Map的性能"></a>sync.Map的性能</h3><p>Go 1.9源代码中提供了性能的测试： <a href="https://github.com/golang/go/blob/master/src/sync/map_bench_test.go" target="_blank" rel="noopener">map_bench_test.go</a>、<a href="https://github.com/golang/go/blob/master/src/sync/map_reference_test.go" target="_blank" rel="noopener">map_reference_test.go</a></p><p>我也基于这些代码修改了一下，得到下面的测试数据，相比较以前的解决方案，性能多少回有些提升，如果你特别关注性能，可以考虑<code>sync.Map</code>。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkHitAll<span class="hljs-comment">/*sync.RWMutexMap-4   20000000        83.8 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkHitAll/*sync.Map-4          30000000        59.9 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkHitAll_WithoutPrompting/*sync.RWMutexMap-4         20000000        96.9 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkHitAll_WithoutPrompting/*sync.Map-4                20000000        64.1 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkHitNone/*sync.RWMutexMap-4                         20000000        79.1 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkHitNone/*sync.Map-4                                30000000        43.3 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkHit_WithoutPrompting/*sync.RWMutexMap-4            20000000        81.5 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkHit_WithoutPrompting/*sync.Map-4                   30000000        44.0 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkUpdate/*sync.RWMutexMap-4                           5000000       328 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkUpdate/*sync.Map-4                                 10000000       146 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkUpdate_WithoutPrompting/*sync.RWMutexMap-4          5000000       336 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkUpdate_WithoutPrompting/*sync.Map-4                 5000000       324 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkDelete/*sync.RWMutexMap-4                          10000000       155 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkDelete/*sync.Map-4                                 30000000        55.0 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkDelete_WithoutPrompting/*sync.RWMutexMap-4         10000000       173 ns/op</span></span><br><span class="line"><span class="hljs-comment">BenchmarkDelete_WithoutPrompting/*sync.Map-4                10000000       147 ns/op</span></span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><code>sync.Map</code>没有<code>Len</code>方法，并且目前没有迹象要加上 (<a href="https://github.com/golang/go/issues/20680" target="_blank" rel="noopener">issue#20680</a>),所以如果想得到当前Map中有效的entries的数量，需要使用<code>Range</code>方法遍历一次， 比较X疼。</p><p><code>LoadOrStore</code>方法如果提供的key存在，则返回已存在的值(Load)，否则保存提供的键值(Store)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Go 1.6之前， 内置的map类型是部分goroutine安全的，并发的读没有问题，并发的写可能有问题。自go 1.6之后， 并发地读写map会报错，这在一些知名的开源库中都存在这个问题，所以go 1.9之前的解决方案是额外绑定一个锁，封装成一个新的struct或者单独使用锁都可以。&lt;/p&gt;
&lt;p&gt;本文深入到&lt;code&gt;sync.Map&lt;/code&gt;的具体实现中，看看为了增加一个功能，代码是如何变的复杂的,以及作者在实现&lt;code&gt;sync.Map&lt;/code&gt;的一些思想。&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Golang编码规范</title>
    <link href="http://yoursite.com/2018/07/05/golang-coding-notations/"/>
    <id>http://yoursite.com/2018/07/05/golang-coding-notations/</id>
    <published>2018-07-05T05:18:54.000Z</published>
    <updated>2018-07-23T03:53:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>强烈谴责所有瞎xx写代码的大佬！压根看不懂啊！拜托有点规范啊！</p><p>参考<a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">https://golang.org/doc/effective_go.html</a></p><a id="more"></a><h3 id="项目目录结构规范"><a href="#项目目录结构规范" class="headerlink" title="项目目录结构规范"></a>项目目录结构规范</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PROJECT_NAME</span><br><span class="line">├── README.md 介绍软件及文档入口</span><br><span class="line">├── bin 编译好的二进制文件,执行./build.sh自动生成，该目录也用于程序打包</span><br><span class="line">├── build.sh 自动编译的脚本</span><br><span class="line">├── doc 该项目的文档</span><br><span class="line">├── pack 打包后的程序放在此处</span><br><span class="line">├── pack.sh 自动打包的脚本，生成类似xxxx<span class="hljs-number">.20170713</span>_14:<span class="hljs-number">45</span>:<span class="hljs-number">35.</span>tar.gz的文件，放在pack文件下</span><br><span class="line">└── src 该项目的源代码</span><br><span class="line">    ├── main 项目主函数</span><br><span class="line">    ├── model 项目代码</span><br><span class="line">    ├── research 在实现该项目中探究的一些程序</span><br><span class="line">    └── vendor 存放<span class="hljs-keyword">go</span>的库</span><br><span class="line">        ├── github.com/xxx 第三方库</span><br><span class="line">        └── xxx.com/obc 公司内部的公共库</span><br></pre></td></tr></table></figure><p>项目的目录结构尽量做到简明、层次清楚</p><h4 id="文件名命名规范"><a href="#文件名命名规范" class="headerlink" title="文件名命名规范"></a>文件名命名规范</h4><p>用小写，尽量见名思义，看见文件名就可以知道这个文件下的大概内容，对于源代码里的文件，文件名要很好的代表了一个模块实现的功能。</p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><h4 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h4><p>包名用小写,使用短命名,尽量和标准库不要冲突</p><h4 id="接口名"><a href="#接口名" class="headerlink" title="接口名"></a>接口名</h4><p>单个函数的接口名以”er”作为后缀，如Reader,Writer</p><p>接口的实现则去掉“er”</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">        Read(p []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个函数的接口名综合两个函数名</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> WriteFlusher <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">    Write([]<span class="hljs-keyword">byte</span>) (<span class="hljs-keyword">int</span>, error)</span><br><span class="line">    Flush() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个以上函数的接口名，类似于结构体名</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> Car <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">    Start([]<span class="hljs-keyword">byte</span>) </span><br><span class="line">    Stop() error</span><br><span class="line">    Recover()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>全局变量：采用驼峰命名法，仅限在包内的全局变量，包外引用需要写接口，提供调用 局部变量：驼峰式，小写字母开头</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>常量：大写，采用下划线</p><h3 id="import-规范"><a href="#import-规范" class="headerlink" title="import 规范"></a>import 规范</h3><p>import在多行的情况下，goimports会自动帮你格式化，在一个文件里面引入了一个package，建议采用如下格式：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果你的包引入了三种类型的包，标准库包，程序内部包，第三方包，建议采用如下方式进行组织你的包：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"encoding/json"</span></span><br><span class="line">    <span class="hljs-string">"strings"</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-string">"myproject/models"</span></span><br><span class="line">    <span class="hljs-string">"myproject/controller"</span></span><br><span class="line">    <span class="hljs-string">"git.obc.im/obc/utils"</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-string">"git.obc.im/dep/beego"</span></span><br><span class="line">    <span class="hljs-string">"git.obc.im/dep/mysql"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在项目中不要使用相对路径引入包：</p><p>// 这是不好的导入</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> “../net”</span><br></pre></td></tr></table></figure><p>// 这是正确的做法</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> “xxxx.com/proj/net”</span><br></pre></td></tr></table></figure><h4 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h4><p>函数名采用驼峰命名法，尽量不要使用下划线</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>error作为函数的值返回,必须尽快对error进行处理<br>采用独立的错误流进行处理<br>不要采用这种方式</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// error handling</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// normal code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而要采用下面的方式</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// error handling</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-comment">// or continue, etc.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// normal code</span></span><br></pre></td></tr></table></figure><p>如果返回值需要初始化，则采用下面的方式</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x, err := f()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// error handling</span></span><br><span class="line">    <span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// use x</span></span><br></pre></td></tr></table></figure><h3 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h3><p>在逻辑处理中禁用panic<br>在main包中只有当实在不可运行的情况采用panic，例如文件无法打开，数据库无法连接导致程序无法 正常运行，但是对于其他的package对外的接口不能有panic，只能在包内采用。 建议在main包中使用log.Fatal来记录错误，这样就可以由log来结束程序。</p><h3 id="Recover"><a href="#Recover" class="headerlink" title="Recover"></a>Recover</h3><p>recover用于捕获runtime的异常，禁止滥用recover，在开发测试阶段尽量不要用recover，recover一般放在你认为会有不可预期的异常的地方。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">server</span><span class="hljs-params">(workChan &lt;-<span class="hljs-keyword">chan</span> *Work)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> work := <span class="hljs-keyword">range</span> workChan &#123;</span><br><span class="line">        <span class="hljs-keyword">go</span> safelyDo(work)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">safelyDo</span><span class="hljs-params">(work *Work)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> err := <span class="hljs-built_in">recover</span>(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">            log.Println(<span class="hljs-string">"work failed:"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="hljs-comment">// do 函数可能会有不可预期的异常</span></span><br><span class="line">    do(work)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Defer"><a href="#Defer" class="headerlink" title="Defer"></a>Defer</h3><p>defer在函数return之前执行，对于一些资源的回收用defer是好的，但也禁止滥用defer，defer是需要消耗性能的,所以频繁调用的函数尽量不要使用defer。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Contents returns the file's contents as a string.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Contents</span><span class="hljs-params">(filename <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    f, err := os.Open(filename)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">defer</span> f.Close()  <span class="hljs-comment">// f.Close will run when we're finished.</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> result []<span class="hljs-keyword">byte</span></span><br><span class="line">    buf := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">100</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span> &#123;</span><br><span class="line">        n, err := f.Read(buf[<span class="hljs-number">0</span>:])</span><br><span class="line">        result = <span class="hljs-built_in">append</span>(result, buf[<span class="hljs-number">0</span>:n]...) <span class="hljs-comment">// append is discussed later.</span></span><br><span class="line">        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> err == io.EOF &#123;</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>, err  <span class="hljs-comment">// f will be closed if we return here.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">string</span>(result), <span class="hljs-literal">nil</span> <span class="hljs-comment">// f will be closed if we return here.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>if接受初始化语句，约定如下方式建立局部变量</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> err := file.Chmod(<span class="hljs-number">0664</span>); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>采用短声明建立局部变量</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;</span><br><span class="line">    sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>如果只需要第一项（key），就丢弃第二个：</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> key := <span class="hljs-keyword">range</span> m &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> key.expired() &#123;</span><br><span class="line">        <span class="hljs-built_in">delete</span>(m, key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只需要第二项，则把第一项置为下划线</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := 0</span><br><span class="line">for _, value := range array &#123;</span><br><span class="line">    sum += value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><p>尽早return：一旦有错误发生，马上返回</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(name)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">d, err := f.Stat()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">    f.Close()</span><br><span class="line">    <span class="hljs-keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">codeUsing(f, d)</span><br></pre></td></tr></table></figure><h3 id="方法的接收器"><a href="#方法的接收器" class="headerlink" title="方法的接收器"></a>方法的接收器</h3><p>名称 一般采用strcut的第一个字母且为小写，而不是this，me或者self</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span>&#123;&#125; </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *T)</span><span class="hljs-title">Get</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果接收者是map,slice或者chan，不要用指针传递</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//Map</span></span><br><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> mp <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m mp)</span> <span class="hljs-title">Set</span><span class="hljs-params">(k, v <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">    m[k] = v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    m := <span class="hljs-built_in">make</span>(mp)</span><br><span class="line">    m.Set(<span class="hljs-string">"k"</span>, <span class="hljs-string">"v"</span>)</span><br><span class="line">    fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//Channel</span></span><br><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> ch <span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c ch)</span> <span class="hljs-title">Push</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c ch)</span> <span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &lt;-c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    c := <span class="hljs-built_in">make</span>(ch, <span class="hljs-number">1</span>)</span><br><span class="line">    c.Push(<span class="hljs-string">"i"</span>)</span><br><span class="line">    fmt.Println(c.Pop())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要对slice进行修改，通过返回值的方式重新赋值</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//Slice</span></span><br><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> slice []<span class="hljs-keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    s := <span class="hljs-built_in">make</span>(slice, <span class="hljs-number">0</span>)</span><br><span class="line">    s = s.addOne(<span class="hljs-number">42</span>)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s slice)</span> <span class="hljs-title">addOne</span><span class="hljs-params">(b <span class="hljs-keyword">byte</span>)</span> []<span class="hljs-title">byte</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">append</span>(s, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果接收者是含有sync.Mutex或者类似同步字段的结构体，必须使用指针传递避免复制</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    m sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *T)</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    t.m.Lock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">Wrong !!!</span></span><br><span class="line"><span class="hljs-comment">func (t T) lock() &#123;</span></span><br><span class="line"><span class="hljs-comment">    t.m.Lock()</span></span><br><span class="line"><span class="hljs-comment">&#125;</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    t := <span class="hljs-built_in">new</span>(T)</span><br><span class="line">    t.lock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果接收者是大的结构体或者数组，使用指针传递会更有效率。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    data [<span class="hljs-number">1024</span>]<span class="hljs-keyword">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *T)</span> <span class="hljs-title">Get</span><span class="hljs-params">()</span> <span class="hljs-title">byte</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> t.data[<span class="hljs-number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    t := <span class="hljs-built_in">new</span>(T)</span><br><span class="line">    fmt.Println(t.Get())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;强烈谴责所有瞎xx写代码的大佬！压根看不懂啊！拜托有点规范啊！&lt;/p&gt;
&lt;p&gt;参考&lt;a href=&quot;https://golang.org/doc/effective_go.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://golang.org/doc/effective_go.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Golang反射浅析</title>
    <link href="http://yoursite.com/2018/07/03/golang-reflect/"/>
    <id>http://yoursite.com/2018/07/03/golang-reflect/</id>
    <published>2018-07-03T05:18:54.000Z</published>
    <updated>2018-07-19T12:25:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>Go 是一种静态类型的语言，我们在代码中定义的每个变量，都会有其类型，例如<code>var a int = 10, b string = &quot;acb&quot;</code>语句中，我们定义了两个变量<code>a</code>和<code>b</code>，它们的类型分别是<code>int</code>和<code>string</code>。</p><p>除了系统预定义的类型之外，我们还可以自定义类型，例如下面的语句中，我们定义了一个自定义类型<code>MyInt</code>，然后我们分别定义了两个变量<code>i1</code>和<code>i2</code>，尽管这两个变量的内容是相同的，但是他们由于类型不同，并不能够直接赋值，必须要经过类型转换以后才能赋值。</p><a id="more"></a><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> MyInt <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> i1 <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">var</span> i2 MyInt = <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line">    i1 = i2 <span class="hljs-comment">//cannot use i2 (type MyInt) as type int in assignment</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口类型的定义"><a href="#接口类型的定义" class="headerlink" title="接口类型的定义"></a>接口类型的定义</h3><p>在 Go 的类型系统中，还有一种重要的类型叫做接口类型，一个接口类型代表了一组固定的方法。一个接口变量可以存储任意合适的值，只要这个值实现了这个接口的所有方法。</p><p>在下面的代码中，我们定义了一个接口类型<code>Animal</code>，然后定义了两种结构体类型<code>Cat</code>和<code>Dog</code>，由于<code>Cat</code>和<code>Dog</code>都实现了<code>Animal</code>的两个方法，所以我们定义的<code>Animal</code>接口变量<code>i</code>既能存储<code>Dog</code>类型的值，又能存储<code>Cat</code>类型的值。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">    run()</span><br><span class="line">    jump()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dog)</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"A dog is running"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dog)</span> <span class="hljs-title">jump</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"A dog is jumping"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Cat <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Cat)</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"A cat is running"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Cat)</span> <span class="hljs-title">jump</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"A cat is jumping"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> i Animal</span><br><span class="line"></span><br><span class="line">    i = Dog&#123;&#125;</span><br><span class="line">    i.jump()</span><br><span class="line">    i = Cat&#123;&#125;</span><br><span class="line">    i.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>在接口类型中，有一种比较特殊，那就是空接口类型<code>interface{}</code>。空接口类型的方法集合为空集，意味着任意类型都实现了空接口，也就是说空接口类型的变量能够存储任意类型的值。正是由于空接口的这个特性，我们就可以动态地获取空接口类型变量的实际类型，并更改它的值，来实现我们的反射机制。</p><h3 id="接口类型的底层实现"><a href="#接口类型的底层实现" class="headerlink" title="接口类型的底层实现"></a>接口类型的底层实现</h3><p>每一个接口类型的变量，它其实是由两部分组成，被赋的值的拷贝，和被赋的值的类型描述器。例如上面代码中的<code>i</code>变量，我们可以用这样一个二元组来表示: <code>(c, Cat)</code>，代表了变量<code>c</code>和它的类型<code>Cat</code>。</p><h2 id="Type-和-Value"><a href="#Type-和-Value" class="headerlink" title="Type 和 Value"></a>Type 和 Value</h2><p>在上文中，我们了解到一个接口变量是由值和值类型两部分组成的，我们的反射相关函数主要就是获取这两部分。当我们调用<code>reflect.ValueOf</code>方法的时候，就是获取接口中的变量，并使用一个<code>reflect.Value</code>类型的变量来代表它。同理，当我们使用<code>reflect.TypeOf</code>方法的时候，它获取的就是接口中存储的变量类型，并使用一个<code>reflect.Type</code>类型的变量来代表它。关于<code>reflect</code>包中这些常用方法的描述如下所示:</p><h3 id="TypeOf-方法"><a href="#TypeOf-方法" class="headerlink" title="TypeOf 方法"></a>TypeOf 方法</h3><p><code>reflect.TypeOf</code>方法的声明如下: <code>func TypeOf(i interface{}) Type</code>。</p><p>它接收一个<strong>空接口类型变量</strong><code>i</code>作为参数，返回一个<code>Type</code>变量，代表了传入参数的类型。由于这个函数的参数是<strong>空接口类型</strong>，所以即使我们传入了一个其他类型的变量，参数也首先会被转换成<strong>空接口类型</strong>。</p><h3 id="ValueOf-方法"><a href="#ValueOf-方法" class="headerlink" title="ValueOf 方法"></a>ValueOf 方法</h3><p><code>reflect.ValueOf</code>方法的声明如下：<code>func ValueOf(i interface{}) Value</code></p><p>它返回一个<code>Value</code>变量代表传入参数<code>i</code>运行时的数据。</p><p><code>Value.Interface()</code>方法是<code>ValueOf</code>方法的逆向方法，<code>Value</code>可以通过<code>Interface()</code>转换成接口。</p><h3 id="Zero-方法"><a href="#Zero-方法" class="headerlink" title="Zero 方法"></a>Zero 方法</h3><p><code>reflect.Zero</code>方法的声明如下: <code>func Zero(typ Type) Value</code></p><p>它接收一个<code>Type</code>变量，并且返回一个<code>Value</code>变量代表<code>typ</code>所对应的0值。</p><h3 id="Kind-类型"><a href="#Kind-类型" class="headerlink" title="Kind 类型"></a>Kind 类型</h3><p><code>reflect.Value</code>和<code>reflect.Type</code>类型有一个<code>Kind()</code>方法，它返回一个<code>reflect.Kind</code>类型的变量，代表了反射类型<code>reflect.Type</code>的具体分类。需要注意的是，<code>Kind</code>方法返回的是底层类型，而不是静态声明的类型，如果我们声明了自定义类型<code>type MyInt int</code>，通过<code>Value.Kind()</code>获取的类型仍然为<code>int</code>。具体例子请参考下面这段代码:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">    <span class="hljs-string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="hljs-keyword">string</span></span><br><span class="line">    Age  <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> MyInt <span class="hljs-keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    u := User&#123;<span class="hljs-string">"xff"</span>, <span class="hljs-number">19</span>&#125;</span><br><span class="line">    <span class="hljs-keyword">var</span> i MyInt = <span class="hljs-number">42</span></span><br><span class="line"></span><br><span class="line">    t := reflect.TypeOf(u)</span><br><span class="line">    <span class="hljs-comment">// reflect.Struct是一个reflect.Kind类型的常量，代表了结构体类型</span></span><br><span class="line">    fmt.Println(t.Kind() == reflect.Struct) <span class="hljs-comment">// 输出 true</span></span><br><span class="line"></span><br><span class="line">    t = reflect.TypeOf(i)</span><br><span class="line">    <span class="hljs-comment">// 这里变量i的类型是我们自定义的类型MyInt，但是Type.Kind()方法返回的类型是reflect.Int</span></span><br><span class="line">    fmt.Println(t.Kind() == reflect.Int) <span class="hljs-comment">// 输出true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Value-的-settable"><a href="#Value-的-settable" class="headerlink" title="Value 的 settable"></a>Value 的 settable</h3><p><code>settable</code>就是表示一个通过空接口反射出来的<code>Value</code>变量是否是可以修改原始的值，通过调用<code>Value.CanSet()</code>方法，我们可以查看某个<code>Value</code>的<code>settable</code>属性。那么什么情况下<code>Value</code>变量可以修改原始的值呢？请参考下面这段代码:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">    <span class="hljs-string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> x <span class="hljs-keyword">float64</span> = <span class="hljs-number">4.1</span></span><br><span class="line">    xPointerValue := reflect.ValueOf(&amp;x)</span><br><span class="line">    fmt.Println(xPointerValue.CanSet())  <span class="hljs-comment">// 输出 false</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 只有 Interface 或 Ptr 类型的 Value 才能调用 Elem 方法</span></span><br><span class="line">    xPointerValueElem := xPointerValue.Elem()</span><br><span class="line">    fmt.Println(xPointerValueElem.CanSet()) <span class="hljs-comment">// 输出 true</span></span><br><span class="line"></span><br><span class="line">    xValue := reflect.ValueOf(x)</span><br><span class="line">    fmt.Println(xValue.CanSet())  <span class="hljs-comment">// 输出 false</span></span><br><span class="line">    _ = xValue.Elem() <span class="hljs-comment">// 这里程序会报 panic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，变量<code>x</code>反射出来的变量<code>xValue</code>是不能修改原始值的，这是因为<code>reflect.ValueOf</code>方法其实是将<code>x</code>赋值到了一个空接口变量<code>o</code>上，<code>o</code>中保存的是<code>x</code>的拷贝和<code>x</code>的类型描述器，而<code>ValueOf()</code>方法返回的<code>xValue</code>变量指向的就是空接口变量<code>o</code>中保存的<code>x</code>的拷贝。如果<code>xValue</code>变量可以修改原始值，那么修改的也仅仅只是<code>x</code>的拷贝，并不能够修改<code>x</code>本身，所以<code>xValue</code>是不可修改的。</p><p>指针<code>&amp;x</code>反射出来的<code>xPointerValue</code>也是不能修改原始值的，原理和上文中讲述的类似，<code>xPointerValue</code>指向的是空接口变量<code>o</code>中保存的<code>x</code>的指针的拷贝，这个指针中保存的地址是不可修改的。</p><p>但是<code>xPointer</code>调用<code>Elem()</code>方法获取到的<code>xPointerValueElem</code>变量就是可以修改原始值的了，这是因为<code>xPointerValue.Elem()</code>方法返回的是这个指针指向的值，也就是<code>x</code>，也就是说<code>xPointerValueElem</code>指向的就是<code>x</code>，所以<code>xPointerValueElem</code>就是可以修改原始值的了。</p><p>这里的内容比较绕，理解起来可能不太容易，大家可以参考下面的图进行理解：</p><p><img src="http://owcwlb3jm.bkt.clouddn.com/2017-09-16-1505538303474.jpg" alt="go-reflect"></p><h2 id="反射的示例"><a href="#反射的示例" class="headerlink" title="反射的示例"></a>反射的示例</h2><p>OK，讲了一大串的理论，大家忍不住想要通过代码来验证一下自己的想法了吧，我们接下来就会通过几个例子，来演示一下 go 中反射的具体用法。</p><h3 id="简单数据的类型和内容解析"><a href="#简单数据的类型和内容解析" class="headerlink" title="简单数据的类型和内容解析"></a>简单数据的类型和内容解析</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">    <span class="hljs-string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> x <span class="hljs-keyword">float64</span> = <span class="hljs-number">4.1</span></span><br><span class="line"></span><br><span class="line">    v = reflect.ValueOf(x)</span><br><span class="line">    fmt.Println(<span class="hljs-string">"Type:"</span>, v.Type())</span><br><span class="line">    fmt.Println(<span class="hljs-string">"Kind is float64:"</span>, v.Kind() == reflect.Float64)</span><br><span class="line">    fmt.Println(<span class="hljs-string">"value:"</span>, v.Float())</span><br><span class="line">    <span class="hljs-comment">// 输出内容</span></span><br><span class="line">    <span class="hljs-comment">// Type: float64</span></span><br><span class="line">    <span class="hljs-comment">// Kind is float64: true</span></span><br><span class="line">    <span class="hljs-comment">// value: 4.1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们设置了一个float64类型的变量x，并通过<code>reflect.ValueOf</code>方法来获取这个变量所对应的<code>reflect.Value</code>，并输出了这个<code>reflect.Value</code>的类型和值。</p><h3 id="结构体变量的类型和内容解析"><a href="#结构体变量的类型和内容解析" class="headerlink" title="结构体变量的类型和内容解析"></a>结构体变量的类型和内容解析</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">    <span class="hljs-string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Id   <span class="hljs-keyword">int</span></span><br><span class="line">    Name <span class="hljs-keyword">string</span></span><br><span class="line">    Age  <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u User)</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 结构体方法的类型名参数其实就是函数的第一个参数，通过反射打印方法类型可以看出</span></span><br><span class="line">    fmt.Println(<span class="hljs-string">"Hello, World."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    u := User&#123;<span class="hljs-number">1</span>, <span class="hljs-string">"wahahah"</span>, <span class="hljs-number">23</span>&#125;</span><br><span class="line">    Info(u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Info</span><span class="hljs-params">(o <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// TypeOf获取的某个对象的所有字段的名称和类型</span></span><br><span class="line">    t := reflect.TypeOf(o)</span><br><span class="line">    fmt.Println(<span class="hljs-string">"Type:"</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 由于`Type.Field()`方法只支持结构体类型，所以这里如果传入的变量不是结构体类型会直接返回。</span></span><br><span class="line">    <span class="hljs-keyword">if</span> k := t.Kind(); k != reflect.Struct &#123;</span><br><span class="line">        fmt.Println(<span class="hljs-string">"Error type"</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// ValueOf获取的是某个对象的所有字段的值</span></span><br><span class="line">    fmt.Println(<span class="hljs-string">"Fields:"</span>)</span><br><span class="line">    v := reflect.ValueOf(o)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; v.NumField(); i++ &#123;</span><br><span class="line">        <span class="hljs-comment">// t.Filed(i) 返回的是一个`reflect.StructField`类型的变量，描述了结构体类型中的某个字段的类型信息</span></span><br><span class="line">        field_type := t.Field(i)</span><br><span class="line">        <span class="hljs-comment">// v.Filed(i) 返回了一个`reflect.Value`类型的变量，代表了结构体类型中某个字段的值</span></span><br><span class="line">        val := v.Field(i).Interface()</span><br><span class="line">        fmt.Printf(<span class="hljs-string">"%6s: %v = %v\n"</span>, field_type.Name, field_type.Type, val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Method获取的某个对象的所有方法的名字和类型(即方法签名)</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; t.NumMethod(); i++ &#123;</span><br><span class="line">        m := t.Method(i)</span><br><span class="line">        fmt.Printf(<span class="hljs-string">"%6s: %v\n"</span>, m.Name, m.Type)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，我们遍历了一个结构体类型，输出了它的所有字段的类型和值，还输出了它所有方法的签名。它的输出结果如下所示:</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Type: main.User</span><br><span class="line">Fields:</span><br><span class="line">    Id: <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span></span><br><span class="line">  Name: <span class="hljs-keyword">string</span> = wahahah</span><br><span class="line">   Age: <span class="hljs-keyword">int</span> = <span class="hljs-number">23</span></span><br><span class="line"> Hello: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(main.User)</span></span></span><br></pre></td></tr></table></figure><h3 id="嵌套结构体变量的类型和内容解析"><a href="#嵌套结构体变量的类型和内容解析" class="headerlink" title="嵌套结构体变量的类型和内容解析"></a>嵌套结构体变量的类型和内容解析</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">    <span class="hljs-string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Id   <span class="hljs-keyword">int</span></span><br><span class="line">    Name <span class="hljs-keyword">string</span></span><br><span class="line">    Age  <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Manager <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    User <span class="hljs-comment">// 这是一个匿名字段，这个字段的名称也是User</span></span><br><span class="line">    title <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    m := Manager&#123;</span><br><span class="line">        User: User&#123;<span class="hljs-number">1</span>, <span class="hljs-string">"xff"</span>, <span class="hljs-number">19</span>&#125;,</span><br><span class="line">        title: <span class="hljs-string">"manager"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    t := reflect.TypeOf(m)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="hljs-string">"Type: %#v\n"</span>, t.Field(<span class="hljs-number">0</span>)) <span class="hljs-comment">// 这里把User类型当做一个字段</span></span><br><span class="line">    fmt.Printf(<span class="hljs-string">"Type: %#v\n"</span>, t.Field(<span class="hljs-number">1</span>)) <span class="hljs-comment">// 这里打印的是title字段</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// t.FidleByIndex传入的是一个int的slice，第一个数字表示在大的结构体中的索引，第二个数字表示在User结构体中的索引</span></span><br><span class="line">    <span class="hljs-comment">// 打印 User 结构体的 ID 字段</span></span><br><span class="line">    fmt.Printf(<span class="hljs-string">"Type: %#v\n"</span>, t.FieldByIndex([]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;))</span><br><span class="line">    <span class="hljs-comment">// 这里获取的是User结构体的 Name 字段</span></span><br><span class="line">    fmt.Printf(<span class="hljs-string">"Type: %#v\n"</span>, t.FieldByIndex([]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单数据的内容修改"><a href="#简单数据的内容修改" class="headerlink" title="简单数据的内容修改"></a>简单数据的内容修改</h3><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">    <span class="hljs-string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> x <span class="hljs-keyword">float64</span> = <span class="hljs-number">4.1</span></span><br><span class="line">    xPointerValue := reflect.ValueOf(&amp;x)</span><br><span class="line"></span><br><span class="line">    val := xPointerValue.Elem()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 检查要更改原始值的 Value 的 settable 属性</span></span><br><span class="line">    <span class="hljs-keyword">if</span> val.CanSet() &#123;</span><br><span class="line">        val.SetFloat(<span class="hljs-number">3.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(x) <span class="hljs-comment">// 输出3.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们演示了如何通过反射来更改一个<code>float64</code>类型变量的值。</p><h3 id="结构体类型变量的内容修改"><a href="#结构体类型变量的内容修改" class="headerlink" title="结构体类型变量的内容修改"></a>结构体类型变量的内容修改</h3><p>下面的代码演示了如何从一个结构体变量中获取字段，并改变这个字段的值。</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">    <span class="hljs-string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 本处代码演示的是如何通过反射动态地修改结构体类型的值</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Id   <span class="hljs-keyword">int</span></span><br><span class="line">    Name <span class="hljs-keyword">string</span></span><br><span class="line">    Age  <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    u := User&#123;<span class="hljs-number">1</span>, <span class="hljs-string">"bwangel"</span>, <span class="hljs-number">23</span>&#125;</span><br><span class="line">    fmt.Println(u)</span><br><span class="line">    Set(&amp;u)</span><br><span class="line">    fmt.Println(u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Set</span><span class="hljs-params">(o <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    pointerValue := reflect.ValueOf(o)</span><br><span class="line">    <span class="hljs-comment">// 判断类型是指针</span></span><br><span class="line">    <span class="hljs-keyword">if</span> pointerValue.Kind() != reflect.Ptr &#123;</span><br><span class="line">        fmt.Println(pointerValue.Type(), <span class="hljs-string">"Cannot be set"</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// pointerValue.Elem() 了一个Value类型的值， 代表的是这个指针所指向的值</span></span><br><span class="line">    value := pointerValue.Elem()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> !value.CanSet() &#123;</span><br><span class="line">        fmt.Println(value, <span class="hljs-string">"is not settable"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 获取字段的名称，并且判断类型是否为字符串</span></span><br><span class="line">    <span class="hljs-comment">// Value.IsValid 方法判断一个 Value 类型是否有效地代表了一个值</span></span><br><span class="line">    field_name := <span class="hljs-string">"Name"</span></span><br><span class="line">    <span class="hljs-keyword">if</span> f := value.FieldByName(field_name); f.IsValid() &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> f.Kind() == reflect.String &#123;</span><br><span class="line">            fmt.Println(f, reflect.TypeOf(f))</span><br><span class="line">            <span class="hljs-comment">// Value.SetString 设置了这个类型所代表的对象的值</span></span><br><span class="line">            f.SetString(<span class="hljs-string">"xff"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="hljs-string">"Bad Field"</span>, field_name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体变量的方法调用"><a href="#结构体变量的方法调用" class="headerlink" title="结构体变量的方法调用"></a>结构体变量的方法调用</h3><p>下面的代码演示了如何通过反射来实现结构体变量方法的调用</p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">    <span class="hljs-string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Id   <span class="hljs-keyword">int</span></span><br><span class="line">    Name <span class="hljs-keyword">string</span></span><br><span class="line">    Age  <span class="hljs-keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u User)</span> <span class="hljs-title">Hello</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>, number <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"hello,"</span>, name, <span class="hljs-string">"my name is"</span>, u.Name, number)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    u := User&#123;<span class="hljs-number">1</span>, <span class="hljs-string">"bwangel"</span>, <span class="hljs-number">23</span>&#125;</span><br><span class="line">    u.Hello(<span class="hljs-string">"xff"</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">    v := reflect.ValueOf(u)</span><br><span class="line">    mv := v.MethodByName(<span class="hljs-string">"Hello"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 动态地调用方法传递的参数必须是 reflect.Value 组成的一个切片</span></span><br><span class="line">    <span class="hljs-comment">// 可以通过 reflect.ValueOf 将任意值转换成 Value 类型</span></span><br><span class="line">    args := []reflect.Value&#123;reflect.ValueOf(<span class="hljs-string">"xff2"</span>), reflect.ValueOf(<span class="hljs-number">2</span>)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// mv.Call函数执行了实际的方法调用</span></span><br><span class="line">    <span class="hljs-comment">// 它返回的是一个由 Value 类型变量组成的数组([]reflect.Value)，代表了所有的返回值</span></span><br><span class="line">    return_vals := mv.Call(args)</span><br><span class="line">    fmt.Println(<span class="hljs-built_in">len</span>(return_vals), return_vals, return_vals[<span class="hljs-number">0</span>]) <span class="hljs-comment">// 输出 `1 [&lt;int Value&gt;] 123`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;&lt;/a&gt;类型&lt;/h2&gt;&lt;p&gt;Go 是一种静态类型的语言，我们在代码中定义的每个变量，都会有其类型，例如&lt;code&gt;var a int = 10, b string = &amp;quot;acb&amp;quot;&lt;/code&gt;语句中，我们定义了两个变量&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;，它们的类型分别是&lt;code&gt;int&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;除了系统预定义的类型之外，我们还可以自定义类型，例如下面的语句中，我们定义了一个自定义类型&lt;code&gt;MyInt&lt;/code&gt;，然后我们分别定义了两个变量&lt;code&gt;i1&lt;/code&gt;和&lt;code&gt;i2&lt;/code&gt;，尽管这两个变量的内容是相同的，但是他们由于类型不同，并不能够直接赋值，必须要经过类型转换以后才能赋值。&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Imooc Go基础</title>
    <link href="http://yoursite.com/2018/06/23/golang-imooc/"/>
    <id>http://yoursite.com/2018/06/23/golang-imooc/</id>
    <published>2018-06-23T05:18:54.000Z</published>
    <updated>2018-07-19T07:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些基础！</p><a id="more"></a><p>###1.byte(4字节8位),rune(char类型,32位,4字节的int32)</p><p>###2.强制类型转换,go没有隐式类型转换</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//勾股定理</span><br><span class="line">a, b := 3, 4 //int</span><br><span class="line">var c int</span><br><span class="line">//Sqrt(float64)</span><br><span class="line">c = math.Sqrt(a*a+b*b)</span><br><span class="line">//&gt;&gt; 类型错误</span><br><span class="line">//必须显示的进行类型转换</span><br><span class="line">c = int(math.Sqrt(float64(a*a+b+b)))</span><br><span class="line">//如果是const且没有定义类型的话不会报错</span><br><span class="line">const a, b = 3,4</span><br><span class="line">c := math.Sqrt(a*a +b*b)</span><br><span class="line">//&gt;&gt; 5</span><br></pre></td></tr></table></figure><p>###3.iota</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const(</span><br><span class="line">b=1 &lt;&lt;(10*iota)</span><br><span class="line">kb</span><br><span class="line">mb</span><br><span class="line">tb</span><br><span class="line">pb</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>###4.指针</p><p>golang只有值传递一种方式<br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522322191257.png" alt="Alt text"><br>下面这种方式<code>看着像引用传递,实际是复制了a的指针地址然后传递</code>达到了引用传递的效果<br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522322152670.png" alt="Alt text"></p><p>###5.Slice</p><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522375003785.png" alt="Alt text"></p><ul><li>slice可以向后扩展,但无法向前扩展</li><li>s[i]不可以超越len(s),向后扩展不能超过cap(s)</li><li>添加元素时如果超越cap,系统会重新分配更大的底层数组</li></ul><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">s := []int&#123;0,1,2,3,4,5,6,7&#125;</span><br><span class="line">s1 := s[2:6]</span><br><span class="line">// [ 2,3,4,5 ]</span><br><span class="line">s2 := s1[4]</span><br><span class="line">// Error 下标越界了</span><br><span class="line">s3 := s1[3:5]</span><br><span class="line">// [5,6] 向后扩展了一个6</span><br><span class="line">s4 := append(s3,10)</span><br><span class="line">// s4: [5,6,10]</span><br><span class="line">// s: [0,1,2,3,4,5,6,10] 原来的7被append为10了</span><br><span class="line">s5 := append(s4,11)</span><br><span class="line">// s5: [5,6,10,11]</span><br><span class="line">// s: [0,1,2,3,4,5,6,10]当cap不够用的时候,系统已经重新扩展了一个新的slice就不再是操作原来的slice了.原来的slice如果有人用才会存在,否则垃圾回收机制会把回收了.</span><br><span class="line">//copy</span><br><span class="line">s6 := make([]int, 8, 16)</span><br><span class="line">copy(s6, s5)</span><br><span class="line">// [5,6,10,11,0,0,0,0] len:8 cap:16</span><br><span class="line">//delete因为go没有内置的delete方法,所以用append来实现</span><br><span class="line">s7 := append(s5[:3], s5[4:]...)</span><br><span class="line">// [5,6,10,0,0,0,0] len:8 cap:16</span><br></pre></td></tr></table></figure><p>###6.Map</p><ul><li>创建 make(map[string]string)</li><li>获取 m[key]</li><li>key不存在时,获取的是零值</li><li>value, ok :=m[key]判断值是否存在</li><li>delete(m, “key”)删除</li></ul><p>###7.Rune(相当于go的char类型)</p><ul><li>使用range遍历pos,rune对</li><li>使用utf8.RuneCountString()获取字符数量,而不是直接使用len()</li><li>使用len()只是获取到字节长度</li><li>使用[]byte获得字节</li></ul><p>###8.值接收者VS指针接收者</p><ul><li>要改变内容必须使用指针接收者</li><li>结构体过大也考虑使用指针接收者</li><li>一致性:如有指针接收者,最好都是指针接收者</li><li>值接收者是go特有的</li><li>值/指针接收者均可以接收值/指针</li></ul><p>###9.接口</p><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522636423539.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522636466984.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522636555167.png" alt="Alt text"><br>Type Assertion<br>.(type类型)获取interface肚子里的类型</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.(*real.Retriver)</span><br></pre></td></tr></table></figure><p>###10.函数式编程</p><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522638766633.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522638856776.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522639321599.png" alt="Alt text"><br>裴波纳契</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func fibonacci() func() int &#123;</span><br><span class="line">  a, b := 0, 1</span><br><span class="line">  return func() int &#123;</span><br><span class="line">    a, b = b, a+b</span><br><span class="line">    return a</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">func main()&#123;</span><br><span class="line">f := fabonacci()</span><br><span class="line">f() //1</span><br><span class="line">f() //1</span><br><span class="line">f() //2</span><br><span class="line">f() //3</span><br><span class="line">f() //5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###11.资源管理</p><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522653776704.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522653870889.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522654193952.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522740353096.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522740395657.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522741904099.png" alt="Alt text"></p><p>###12.测试</p><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522743849182.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522744008349.png" alt="Alt text"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go test #测试当前目录</span><br><span class="line">go test --coverprofile=c.out #生成c.out文件</span><br><span class="line">go tool cover -html=c.out #将c.out文件生成html格式并用浏览器打开</span><br></pre></td></tr></table></figure><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522745826671.png" alt="Alt text"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go test -bench . #benchmark测试</span><br><span class="line">go test -bench . -cpuprofile=cpu.out</span><br><span class="line">go tool pprof cpu.out</span><br></pre></td></tr></table></figure><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522759597530.png" alt="Alt text"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">godoc -http :6060 #开启webservice文档</span><br></pre></td></tr></table></figure><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522933077902.png" alt="Alt text"></p><p>###13.Goroutine</p><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522933919194.png" alt="Alt text"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtime.Gosched()//手动交出控制权</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run -race main.go #race condition 数据访问冲突,进行错误检测</span><br></pre></td></tr></table></figure><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522934660041.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522934767052.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522935142751.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522935187304.png" alt="Alt text"></p><p>###14.Channel</p><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522935343442.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1522938466872.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523012404646.png" alt="Alt text"></p><p>###15.http</p><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523068699367.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523068751236.png" alt="Alt text"><br>第一种</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import _ &quot;net/http/pprof&quot;</span><br><span class="line">//server func ...</span><br><span class="line">//然后就可以通过url/debug/pprof进行访问</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#会获得30秒的CPU使用率</span><br><span class="line">go tool pprof http://localhost:8888/debug/pprof/profile</span><br><span class="line">#会获得30秒的内存使用率</span><br><span class="line">go tool pprof http://localhost:8888/debug/pprof/heap</span><br><span class="line">#期间访问想要测试的http request,30秒后进入prof模式,可以使用web进行查看</span><br></pre></td></tr></table></figure><p>###16.广度优先算法</p><p>1.探索顺序:上左下右<br>2.结点的三种状态:</p><ul><li>已经发现还未探索(最关键,这些未探索的点需要排队,不能急于探索必须轮到才能探索)</li><li>已经发现并且探索</li><li>连发现都没发现</li></ul><p><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070115303.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070126952.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070135463.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070180156.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070188843.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070357078.png" alt="Alt text"><br>一层一层往外递进,确保每到一个点都是用最短的路径到达<br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070504150.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070546138.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070594114.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070622309.png" alt="Alt text"><br><img src="https://chenjingkun.com/article/Google%E8%B5%84%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%B7%B1%E5%BA%A6%E8%AE%B2%E8%A7%A3Go%E8%AF%AD%E8%A8%80/1523070643640.png" alt="Alt text"><br>最终倒过来走就是最短路径<br>3.结束条件:</p><ul><li>走到终端</li><li>队列为空(死路)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些基础！&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Git工作流程</title>
    <link href="http://yoursite.com/2018/04/24/git-workflow/"/>
    <id>http://yoursite.com/2018/04/24/git-workflow/</id>
    <published>2018-04-24T05:18:54.000Z</published>
    <updated>2018-04-25T05:49:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>忘了的时候看一看！</p><a id="more"></a><p>Git 作为一个源码管理系统，不可避免涉及到多人协作。</p><p>协作必须有一个规范的工作流程，让大家有效地合作，使得项目井井有条地发展下去。”工作流程”在英语里，叫做”workflow”或者”flow”，原意是水流，比喻项目像水流那样，顺畅、自然地向前流动，不会发生冲击、对撞、甚至漩涡。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqnueutn68j30go04k3yk.jpg" alt></p><p>本文介绍三种广泛使用的工作流程：</p><blockquote><ul><li>Git flow</li><li>Github flow</li><li>Gitlab flow</li></ul></blockquote><p>如果你对Git还不是很熟悉，可以先阅读下面的文章。</p><blockquote><ul><li><a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="noopener">《Git 使用规范流程》</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">《常用 Git 命令清单》</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">《Git 远程操作详解》</a></li></ul></blockquote><h2 id="一、功能驱动"><a href="#一、功能驱动" class="headerlink" title="一、功能驱动"></a>一、功能驱动</h2><p>本文的三种工作流程，有一个共同点：都采用<a href="https://en.wikipedia.org/wiki/Feature-driven_development" target="_blank" rel="noopener">“功能驱动式开发”</a>（Feature-driven development，简称FDD）。</p><p>它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。</p><h2 id="二、Git-flow"><a href="#二、Git-flow" class="headerlink" title="二、Git flow"></a>二、Git flow</h2><p>最早诞生、并得到广泛采用的一种工作流程，就是<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Git flow</a> 。</p><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><p>它最主要的特点有两个。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqnufif1upj30ci0iu759.jpg" alt></p><p>首先，项目存在两个长期分支。</p><blockquote><ul><li>主分支<code>master</code></li><li>开发分支<code>develop</code></li></ul></blockquote><p>前者用于存放对外发布的版本，任何时候在这个分支拿到的，都是稳定的分布版；后者用于日常开发，存放最新的开发版。</p><p>其次，项目存在三种短期分支。</p><blockquote><ul><li>功能分支（feature branch）</li><li>补丁分支（hotfix branch）</li><li>预发分支（release branch）</li></ul></blockquote><p>一旦完成开发，它们就会被合并进<code>develop</code>或<code>master</code>，然后被删除。</p><p>Git flow 的详细介绍，请阅读我翻译的中文版<a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">《Git 分支管理策略》</a>。</p><h3 id="2-2-评价"><a href="#2-2-评价" class="headerlink" title="2.2 评价"></a>2.2 评价</h3><p>Git flow的优点是清晰可控，缺点是相对复杂，需要同时维护两个长期分支。大多数工具都将<code>master</code>当作默认分支，可是开发是在<code>develop</code>分支进行的，这导致经常要切换分支，非常烦人。</p><p>更大问题在于，这个模式是基于”版本发布”的，目标是一段时间以后产出一个新版本。但是，很多网站项目是”持续发布”，代码一有变动，就部署一次。这时，<code>master</code>分支和<code>develop</code>分支的差别不大，没必要维护两个长期分支。</p><h2 id="三、Github-flow"><a href="#三、Github-flow" class="headerlink" title="三、Github flow"></a>三、Github flow</h2><p><a href="http://scottchacon.com/2011/08/31/github-flow.html" target="_blank" rel="noopener">Github flow</a> 是Git flow的简化版，专门配合”持续发布”。它是 Github.com 使用的工作流程。</p><h3 id="3-1-流程"><a href="#3-1-流程" class="headerlink" title="3.1 流程"></a>3.1 流程</h3><p>它只有一个长期分支，就是<code>master</code>，因此用起来非常简单。</p><p>官方推荐的<a href="https://guides.github.com/introduction/flow/index.html" target="_blank" rel="noopener">流程</a>如下。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqnufrx3twj30ku03uq39.jpg" alt></p><blockquote><p>第一步：根据需求，从<code>master</code>拉出新分支，不区分功能分支或补丁分支。</p><p>第二步：新分支开发完成后，或者需要讨论的时候，就向<code>master</code>发起一个<a href="https://help.github.com/articles/using-pull-requests/" target="_blank" rel="noopener">pull request</a>（简称PR）。</p><p>第三步：Pull Request既是一个通知，让别人注意到你的请求，又是一种对话机制，大家一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。</p><p>第四步：你的Pull Request被接受，合并进<code>master</code>，重新部署后，原来你拉出来的那个分支就被删除。（先部署再合并也可。）</p></blockquote><h3 id="3-2-评价"><a href="#3-2-评价" class="headerlink" title="3.2 评价"></a>3.2 评价</h3><p>Github flow 的最大优点就是简单，对于”持续发布”的产品，可以说是最合适的流程。</p><p>问题在于它的假设：<code>master</code>分支的更新与产品的发布是一致的。也就是说，<code>master</code>分支的最新代码，默认就是当前的线上代码。</p><p>可是，有些时候并非如此，代码合并进入<code>master</code>分支，并不代表它就能立刻发布。比如，苹果商店的APP提交审核以后，等一段时间才能上架。这时，如果还有新的代码提交，<code>master</code>分支就会与刚发布的版本不一致。另一个例子是，有些公司有发布窗口，只有指定时间才能发布，这也会导致线上版本落后于<code>master</code>分支。</p><p>上面这种情况，只有<code>master</code>一个主分支就不够用了。通常，你不得不在<code>master</code>分支以外，另外新建一个<code>production</code>分支跟踪线上版本。</p><h2 id="四、Gitlab-flow"><a href="#四、Gitlab-flow" class="headerlink" title="四、Gitlab flow"></a>四、Gitlab flow</h2><p><a href="http://doc.gitlab.com/ee/workflow/gitlab_flow.html" target="_blank" rel="noopener">Gitlab flow</a> 是 Git flow 与 Github flow 的综合。它吸取了两者的优点，既有适应不同开发环境的弹性，又有单一主分支的简单和便利。它是 Gitlab.com 推荐的做法。</p><h3 id="4-1-上游优先"><a href="#4-1-上游优先" class="headerlink" title="4.1 上游优先"></a>4.1 上游优先</h3><p>Gitlab flow 的最大原则叫做”上游优先”（upsteam first），即只存在一个主分支<code>master</code>，它是所有其他分支的”上游”。只有上游分支采纳的代码变化，才能应用到其他分支。</p><p><a href="https://www.chromium.org/chromium-os/chromiumos-design-docs/upstream-first" target="_blank" rel="noopener">Chromium项目</a>就是一个例子，它明确规定，上游分支依次为：</p><blockquote><ol><li>Linus Torvalds的分支</li><li>子系统（比如netdev）的分支</li><li>设备厂商（比如三星）的分支</li></ol></blockquote><h3 id="4-2-持续发布"><a href="#4-2-持续发布" class="headerlink" title="4.2 持续发布"></a>4.2 持续发布</h3><p>Gitlab flow 分成两种情况，适应不同的开发流程。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqnufy4r3pj30fk0h63z2.jpg" alt></p><p>对于”持续发布”的项目，它建议在<code>master</code>分支以外，再建立不同的环境分支。比如，”开发环境”的分支是<code>master</code>，”预发环境”的分支是<code>pre-production</code>，”生产环境”的分支是<code>production</code>。</p><p>开发分支是预发分支的”上游”，预发分支又是生产分支的”上游”。代码的变化，必须由”上游”向”下游”发展。比如，生产环境出现了bug，这时就要新建一个功能分支，先把它合并到<code>master</code>，确认没有问题，再<code>cherry-pick</code>到<code>pre-production</code>，这一步也没有问题，才进入<code>production</code>。</p><p>只有紧急情况，才允许跳过上游，直接合并到下游分支。</p><h3 id="4-3-版本发布"><a href="#4-3-版本发布" class="headerlink" title="4.3 版本发布"></a>4.3 版本发布</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fqnug32q17j30fa0jzmxp.jpg" alt></p><p>对于”版本发布”的项目，建议的做法是每一个稳定版本，都要从<code>master</code>分支拉出一个分支，比如<code>2-3-stable</code>、<code>2-4-stable</code>等等。</p><p>以后，只有修补bug，才允许将代码合并到这些分支，并且此时要更新小版本号。</p><h2 id="五、一些小技巧"><a href="#五、一些小技巧" class="headerlink" title="五、一些小技巧"></a>五、一些小技巧</h2><h3 id="5-1-Pull-Request"><a href="#5-1-Pull-Request" class="headerlink" title="5.1 Pull Request"></a>5.1 Pull Request</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fqnugbbryxj30ku0go40j.jpg" alt></p><p>功能分支合并进<code>master</code>分支，必须通过Pull Request（Gitlab里面叫做 Merge Request）。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fqnugh18ttj30iq09kjs5.jpg" alt></p><p>前面说过，Pull Request本质是一种对话机制，你可以在提交的时候，<code>@</code>相关<a href="https://github.com/blog/1004-mention-autocompletion" target="_blank" rel="noopener">人员</a>或<a href="https://github.com/blog/1121-introducing-team-mentions" target="_blank" rel="noopener">团队</a>，引起他们的注意。</p><h3 id="5-2-Protected-branch"><a href="#5-2-Protected-branch" class="headerlink" title="5.2 Protected branch"></a>5.2 Protected branch</h3><p><code>master</code>分支应该受到保护，不是每个人都可以修改这个分支，以及拥有审批 Pull Request 的权力。</p><p><a href="https://help.github.com/articles/about-protected-branches/" target="_blank" rel="noopener">Github</a> 和 <a href="http://doc.gitlab.com/ce/permissions/permissions.html" target="_blank" rel="noopener">Gitlab</a> 都提供”保护分支”（Protected branch）这个功能。</p><h3 id="5-3-Issue"><a href="#5-3-Issue" class="headerlink" title="5.3 Issue"></a>5.3 Issue</h3><p>Issue 用于 Bug追踪和需求管理。建议先新建 Issue，再新建对应的功能分支。功能分支总是为了解决一个或多个 Issue。</p><p>功能分支的名称，可以与issue的名字保持一致，并且以issue的编号起首，比如”15-require-a-password-to-change-it”。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fqnugnwxqgj30dg05dglr.jpg" alt></p><p>开发完成后，在提交说明里面，可以写上”fixes #14”或者”closes #67”。Github规定，只要commit message里面有下面这些<a href="https://help.github.com/articles/closing-issues-via-commit-messages/" target="_blank" rel="noopener">动词</a> + 编号，就会关闭对应的issue。</p><blockquote><ul><li>close</li><li>closes</li><li>closed</li><li>fix</li><li>fixes</li><li>fixed</li><li>resolve</li><li>resolves</li><li>resolved</li></ul></blockquote><p>这种方式还可以一次关闭多个issue，或者关闭其他代码库的issue，格式是<code>username/repository#issue_number</code>。</p><p>Pull Request被接受以后，issue关闭，原始分支就应该删除。如果以后该issue重新打开，新分支可以复用原来的名字。</p><h3 id="5-4-Merge节点"><a href="#5-4-Merge节点" class="headerlink" title="5.4 Merge节点"></a>5.4 Merge节点</h3><p>Git有两种合并：一种是”直进式合并”（fast forward），不生成单独的合并节点；另一种是”非直进式合并”（none fast-forword），会生成单独节点。</p><p>前者不利于保持commit信息的清晰，也不利于以后的回滚，建议总是采用后者（即使用<code>--no-ff</code>参数）。只要发生合并，就要有一个单独的合并节点。</p><h3 id="5-5-Squash-多个commit"><a href="#5-5-Squash-多个commit" class="headerlink" title="5.5 Squash 多个commit"></a>5.5 Squash 多个commit</h3><p>为了便于他人阅读你的提交，也便于<code>cherry-pick</code>或撤销代码变化，在发起Pull Request之前，应该把多个commit合并成一个。（前提是，该分支只有你一个人开发，且没有跟<code>master</code>合并过。）</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fqnugt4nclj30i90dr409.jpg" alt></p><p>这可以采用<code>rebase</code>命令附带的<code>squash</code>操作，具体方法请参考阮一峰老师写的<a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="noopener">《Git 使用规范流程》</a>。</p><p>原文地址：<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-workflow.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;忘了的时候看一看！&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git基础速记</title>
    <link href="http://yoursite.com/2018/04/23/git-base/"/>
    <id>http://yoursite.com/2018/04/23/git-base/</id>
    <published>2018-04-23T05:18:54.000Z</published>
    <updated>2018-04-25T05:46:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>忘了的时候看一看！</p><a id="more"></a><h3 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h3><p>目前世界上最先进的分布式版本控制系统</p><p>集中式vs分布式</p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ul><li>第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>第二步，使用命令<code>git commit</code>，完成。<code>git commit --amend</code>可以重新修改提交的message</li></ul><h3 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h3><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>现在总结一下：</p><ul><li><code>HEAD</code>指向的版本就是当前版本，回退到上一个版本可以用<code>git reset --hard HEAD^</code> 因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本(<code>--pretty=oneline</code>)。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><h4 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h4><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqnqt21nh0j30cq06ijri.jpg" alt></p><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><h4 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h4><p>每次修改，如果不<code>add</code>到暂存区，那就不会加入到<code>commit</code>中。</p><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000" target="_blank" rel="noopener">版本回退</a>一节，不过前提是没有推送到远程库。</p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p><p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p><p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384908342205cc1234dfe1b541ff88b90b44b30360da000/0" alt="github-addkey-1"></p><p>点“Add Key”，你就应该看到已经添加的Key：</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849083502905a4caa2dc6984acd8e39aa5ae5ad6c83000/0" alt="github-addkey-2"></p><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p><p>如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。</p><h4 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h4><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p><h4 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h4><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p><p>Git支持多种协议，包括<code>https</code>，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快。</p><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><p>其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。</p><p>但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</p><h4 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h4><p>Git鼓励大量使用分支：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>用<code>git log --graph( --pretty=oneline --abbrev-commit)</code>命令可以看到分支合并图。</p><h4 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h4><p>Git分支十分强大，在团队开发中应该充分应用。</p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h4 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h4><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</p><h4 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h4><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p>多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin branch-name</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin branch-name</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream branch-name origin/branch-name</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p><p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p><p>Git有commit，为什么还要引入tag？</p><p>“请把上周一的那个版本打包发布，commit号是6a5819e…”</p><p>“一串乱七八糟的数字不好找！”</p><p>如果换一个办法：</p><p>“请把上周一的那个版本打包发布，版本号是v1.2”</p><p>“好的，按照tag v1.2查找commit就行！”</p><p>所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><ul><li>命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签；</li><li>命令<code>git tag</code>可以查看所有标签。</li></ul><h4 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h4><ul><li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul><h3 id="使用Github"><a href="#使用Github" class="headerlink" title="使用Github"></a>使用Github</h3><ul><li>在GitHub上，可以任意Fork开源仓库；</li><li>自己拥有Fork后的仓库的读写权限；</li><li>可以推送pull request给官方仓库来贡献代码。</li></ul><h3 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h3><h4 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h4><ul><li>忽略某些文件时，需要编写<code>.gitignore</code>；</li><li><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</li></ul><p>例如：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 忽略windows上的辣鸡文件</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> Windows:</span></span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 忽略python编译产生的.pyc、.pyo、dist等文件或目录</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> Python:</span></span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 自己定义的文件</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> My configurations:</span></span><br><span class="line">db.ini</span><br><span class="line">deploy_key_rsa</span><br></pre></td></tr></table></figure><p>记得把<code>.gitignore</code>提交到Git！</p><h4 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h4><p>就是给命令配别名，偷懒！</p><h4 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h4><p>在<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000" target="_blank" rel="noopener">远程仓库</a>一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。</p><p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p><p>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的<code>apt</code>命令就可以完成安装。</p><p>假设你已经有<code>sudo</code>权限的用户账号，下面，正式开始安装。</p><p>第一步，安装<code>git</code>：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">$</span><span class="hljs-bash"> sudo apt-get install git</span></span><br></pre></td></tr></table></figure><p>第二步，创建一个<code>git</code>用户，用来运行<code>git</code>服务：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">$</span><span class="hljs-bash"> sudo adduser git</span></span><br></pre></td></tr></table></figure><p>第三步，创建证书登录：</p><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p><p>第四步，初始化Git仓库：</p><p>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">$</span><span class="hljs-bash"> sudo git init --bare sample.git</span></span><br></pre></td></tr></table></figure><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code>：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">$</span><span class="hljs-bash"> sudo chown -R git:git sample.git</span></span><br></pre></td></tr></table></figure><p>第五步，禁用shell登录：</p><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure><p>这样，<code>git</code>用户可以正常通过ssh使用git，但无法登录shell，因为我们为<code>git</code>用户指定的<code>git-shell</code>每次一登录就自动退出。</p><p>第六步，克隆远程仓库：</p><p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">$</span><span class="hljs-bash"> git <span class="hljs-built_in">clone</span> git@server:/srv/sample.git</span></span><br><span class="line">Cloning into 'sample'...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br></pre></td></tr></table></figure><p>剩下的推送就简单了。</p><h5 id="管理公钥"><a href="#管理公钥" class="headerlink" title="管理公钥"></a>管理公钥</h5><p>如果团队很小，把每个人的公钥收集起来放到服务器的<code>/home/git/.ssh/authorized_keys</code>文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用<a href="https://github.com/res0nat0r/gitosis" target="_blank" rel="noopener">Gitosis</a>来管理公钥。</p><p>这里我们不介绍怎么玩<a href="https://github.com/res0nat0r/gitosis" target="_blank" rel="noopener">Gitosis</a>了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。</p><h5 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h5><p>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。<a href="https://github.com/sitaramc/gitolite" target="_blank" rel="noopener">Gitolite</a>就是这个工具。</p><p>这里我们也不介绍<a href="https://github.com/sitaramc/gitolite" target="_blank" rel="noopener">Gitolite</a>了，不要把有限的生命浪费到权限斗争中。</p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ul><li>搭建Git服务器非常简单，通常10分钟即可完成；</li><li>要方便管理公钥，用<a href="https://github.com/sitaramc/gitolite" target="_blank" rel="noopener">Gitosis</a>；</li><li>要像SVN那样变态地控制权限，用<a href="https://github.com/sitaramc/gitolite" target="_blank" rel="noopener">Gitolite</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;忘了的时候看一看！&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Nginx面试准备</title>
    <link href="http://yoursite.com/2018/03/06/nginx-interview/"/>
    <id>http://yoursite.com/2018/03/06/nginx-interview/</id>
    <published>2018-03-06T05:18:54.000Z</published>
    <updated>2018-04-15T07:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Nginx？"><a href="#什么是Nginx？" class="headerlink" title="什么是Nginx？"></a>什么是Nginx？</h3><p>Nginx是一个web服务器和反向代理服务器，用于<code>HTTP</code>、<code>HTTPS</code>、<code>SMTP</code>、<code>POP3</code>和<code>IMAP</code>协议。多进程异步非阻塞事件处理机制：运用了epoll模型</p><a id="more"></a><h3 id="为什么要用Nginx？"><a href="#为什么要用Nginx？" class="headerlink" title="为什么要用Nginx？"></a>为什么要用Nginx？</h3><p>①跨平台、配置简单</p><p>②非阻塞、高并发连接：官方检测支持5万并发</p><p>③内存消耗低：Nginx采取了分阶段资源分配技术</p><p>④内置的健康检查功能：如果有一个服务器宕机，会做一个健康检查，再发送的请求就不会发送到宕机的服务器了。重新将请求提交到其他的节点上。</p><p>⑤节省带宽：支持GZIP压缩，可以添加浏览器本地缓存</p><p>⑥稳定性高：宕机的概率低</p><p>⑦master/worker结构：一个master进程，生成一个或多个worker进程</p><p>⑧接收用户异步请求：浏览器将请求发送到nginx服务器，它先将用户请求全部接收下来，再一次性发送给后端web服务器，极大减轻了web服务器的压力，一边接收web服务器的返回数据，一边发送给浏览器客户端</p><p>⑨网络依赖性比较低，只要ping通就可以负载均衡</p><p>⑩可以有多台nginx服务器</p><h3 id="Nginx和Apache比较"><a href="#Nginx和Apache比较" class="headerlink" title="Nginx和Apache比较"></a>Nginx和Apache比较</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fqdctt2ugtj30hs0a7gmj.jpg" alt></p><p>Nginx相对Apache的优点：</p><p>①轻量，配置简单，内存及资源消耗低</p><p>②高并发，Nginx处理请求是异步非阻塞的，而Apache是阻塞的</p><p>③高度模块化的设计，编写模块相对简单</p><p>④社区活跃，高性能模块出品迅速</p><p>Apache相对Nginx的优点：</p><p>①rewrite强大</p><p>②模块超多</p><p>③少bug，稳定</p><p>Nginx的优势是处理静态请求，cpu内存使用率低，Apache适合处理动态请求，所以现在一般前端用Nginx作为反向代理抗住压力，Apache作为后端处理动态请求。</p><h3 id="Nginx高性能原因"><a href="#Nginx高性能原因" class="headerlink" title="Nginx高性能原因"></a>Nginx高性能原因</h3><p>得益于Nginx的事件处理机制：异步非阻塞事件处理机制，运用了epoll模型，提供了一个队列，排队解决</p><h3 id="Nginx如何处理HTTP请求"><a href="#Nginx如何处理HTTP请求" class="headerlink" title="Nginx如何处理HTTP请求"></a>Nginx如何处理HTTP请求</h3><p>Nginx使用反应器模式。主事件循环等待操作系统发出准备事件的信号，这样数据就可以从套接字读取，在该实例中读取到缓冲区并进行处理。单个线程可以提供数万个并发连接。</p><h3 id="使用反向代理服务器的优点是什么"><a href="#使用反向代理服务器的优点是什么" class="headerlink" title="使用反向代理服务器的优点是什么"></a>使用反向代理服务器的优点是什么</h3><p>反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和web服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用web托管服务时。</p><h3 id="Nginx服务器的最佳用途"><a href="#Nginx服务器的最佳用途" class="headerlink" title="Nginx服务器的最佳用途"></a>Nginx服务器的最佳用途</h3><p>Nginx服务器的最佳用法是在网络上部署动态<code>HTTP</code>内容，使用<code>SCGI</code>、<code>WSGI</code>应用程序服务器、用于脚本的<code>FastCGI</code>处理程序。它还可以作为负载均衡器。</p><h3 id="Nginx为什么不使用多线程"><a href="#Nginx为什么不使用多线程" class="headerlink" title="Nginx为什么不使用多线程"></a>Nginx为什么不使用多线程</h3><p>Apache: 创建多个进程或线程，而每个进程或线程都会为其分配cpu和内存（线程要比进程小的多，所以worker支持比perfork高的并发），并发过大会榨干服务器资源。</p><p>Nginx: 采用单线程来异步非阻塞处理请求（管理员可以配置Nginx主进程的工作进程的数量）(epoll)，不会为每个请求分配cpu和内存资源，节省了大量资源，同时也减少了大量的CPU的上下文切换。所以才使得Nginx支持更高的并发。</p><h3 id="Nginx上的Master和Worker进程分别是什么？"><a href="#Nginx上的Master和Worker进程分别是什么？" class="headerlink" title="Nginx上的Master和Worker进程分别是什么？"></a>Nginx上的Master和Worker进程分别是什么？</h3><p>Master进程：读取、评估配置和维持</p><p>Worker进程：处理请求</p><h3 id="如何通过不同于80的端口开启Nginx"><a href="#如何通过不同于80的端口开启Nginx" class="headerlink" title="如何通过不同于80的端口开启Nginx"></a>如何通过不同于80的端口开启Nginx</h3><p>必须进入<code>/etc/Nginx/sites-enabled/</code>，如果这是默认文件，那么你必须打开名为<code>“default”</code>的文件。编辑文件，并放置在你想要的端口：</p><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">Like</span> server &#123; <span class="hljs-attribute">listen</span> <span class="hljs-number">81</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="是否有可能将Nginx的错误替换为502、503？"><a href="#是否有可能将Nginx的错误替换为502、503？" class="headerlink" title="是否有可能将Nginx的错误替换为502、503？"></a>是否有可能将Nginx的错误替换为502、503？</h3><p>502：错误网关</p><p>503：服务器超载</p><p>有可能，可以确保<code>fastcgi_intercept_errors</code>被设置为<code>ON</code>，并使用错误页面指令。</p><figure class="highlight nginx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">Location</span> / &#123;</span><br><span class="line"><span class="hljs-attribute">fastcgi_pass</span> <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">01</span>:<span class="hljs-number">9001</span>;</span><br><span class="line"><span class="hljs-attribute">fastcgi_intercept_errors</span> <span class="hljs-literal">on</span>;</span><br><span class="line"><span class="hljs-attribute">error_page</span> <span class="hljs-number">502</span> =<span class="hljs-number">503</span>/error_page.html;</span><br><span class="line"><span class="hljs-comment">#…</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx中，如何在URL中保留双斜杠"><a href="#Nginx中，如何在URL中保留双斜杠" class="headerlink" title="Nginx中，如何在URL中保留双斜杠"></a>Nginx中，如何在URL中保留双斜杠</h3><p>要在<code>URL</code>中保留双斜线，就必须使用<code>merge_slashes_off</code>;</p><p>语法:<code>merge_slashes [on/off]</code></p><p>默认值: <code>merge_slashes on</code></p><p>环境: <code>http，server</code></p><h3 id="ngx-http-upstream-module的作用是什么"><a href="#ngx-http-upstream-module的作用是什么" class="headerlink" title="ngx_http_upstream_module的作用是什么"></a>ngx_http_upstream_module的作用是什么</h3><p><code>ngx_http_upstream_module</code>用于定义可通过<code>fastcgi</code>传递、<code>proxy</code>传递、<code>uwsgi</code>传递、<code>memcached</code>传递和scgi传递指令来引用的服务器组。</p><h3 id="什么是C10K问题"><a href="#什么是C10K问题" class="headerlink" title="什么是C10K问题"></a>什么是C10K问题</h3><p><code>C10K</code>问题是指无法同时处理大量客户端(10,000)的网络套接字。</p><h3 id="stub-status和sub-filter指令的作用是什么"><a href="#stub-status和sub-filter指令的作用是什么" class="headerlink" title="stub_status和sub_filter指令的作用是什么"></a><code>stub_status</code>和<code>sub_filter</code>指令的作用是什么</h3><p><code>Stub_status</code>指令：该指令用于了解<code>Nginx</code>当前状态的当前状态，如当前的活动连接，接受和处理当前读/写/等待连接的总数</p><p><code>Sub_filter</code>指令：它用于搜索和替换响应中的内容，并快速修复陈旧的数据</p><h3 id="Nginx是否支持将请求压缩到上游"><a href="#Nginx是否支持将请求压缩到上游" class="headerlink" title="Nginx是否支持将请求压缩到上游"></a>Nginx是否支持将请求压缩到上游</h3><p>可以使用<code>Nginx</code>模块<code>gunzip</code>将请求压缩到上游。<code>gunzip</code>模块是一个过滤器，它可以对不支持“gzip”编码方法的客户机或服务器使用“内容编码:gzip”来解压缩响应。</p><h3 id="如何在Nginx中获取当前时间"><a href="#如何在Nginx中获取当前时间" class="headerlink" title="如何在Nginx中获取当前时间"></a>如何在Nginx中获取当前时间</h3><p>要获得Nginx的当前时间，必须使用<code>SSI</code>模块、<code>$date_gmt</code>和<code>$date_local</code>的变量。</p><p><code>Proxy_set_header</code> <code>THE-TIME $date_gmt</code>;</p><h3 id="如何在Nginx上添加模块"><a href="#如何在Nginx上添加模块" class="headerlink" title="如何在Nginx上添加模块"></a>如何在Nginx上添加模块</h3><p>在变异过程中，必须选择Nginx模块，因为Nginx不支持模块的运行时间选择</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Nginx？&quot;&gt;&lt;a href=&quot;#什么是Nginx？&quot; class=&quot;headerlink&quot; title=&quot;什么是Nginx？&quot;&gt;&lt;/a&gt;什么是Nginx？&lt;/h3&gt;&lt;p&gt;Nginx是一个web服务器和反向代理服务器，用于&lt;code&gt;HTTP&lt;/code&gt;、&lt;code&gt;HTTPS&lt;/code&gt;、&lt;code&gt;SMTP&lt;/code&gt;、&lt;code&gt;POP3&lt;/code&gt;和&lt;code&gt;IMAP&lt;/code&gt;协议。多进程异步非阻塞事件处理机制：运用了epoll模型&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>django celery添加异步任务</title>
    <link href="http://yoursite.com/2018/01/06/django-celery/"/>
    <id>http://yoursite.com/2018/01/06/django-celery/</id>
    <published>2018-01-06T05:18:54.000Z</published>
    <updated>2018-04-15T07:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异步任务的重要性"><a href="#异步任务的重要性" class="headerlink" title="异步任务的重要性"></a>异步任务的重要性</h3><p>大家在做web项目的时候经常会遇到一些耗时的操作， 比如： 发送邮件、发送短信、生成pdf。这些操作在某些情况下需要立即返回结果给用户，但是可以在后台异步执行。</p><a id="more"></a><p>比如用户邮箱注册的时候， 在发送邮件的时候可以先把”已经发送激活邮件到邮箱”返回给用户， 同时把邮件发送任务提交到异步处理线程中。</p><p>现在介绍一款python写的专门用于处理异步任务的框架–celery。当然celery能完成的功能远不止异步任务， 还有一个很常用的功能–定时任务</p><p>celery的功能还包括：定义工作流、监控、任务流控制、资源泄露保护以及自定义用户组件等。</p><h3 id="celery介绍"><a href="#celery介绍" class="headerlink" title="celery介绍"></a>celery介绍</h3><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line">    最新版本的celery支持的python版本必须大于2.7.6，</span><br><span class="line">    如果是python2.7.6及以下版本的时候import celery是会报错滴。</span><br></pre></td></tr></table></figure><p>celery是通过将代码序列然后传输到中间通信组件，这些组件可以采用任何方式实现， 这里最常用的两种是rabbitmq和redis， 然后celery的后台线程不停的从rabbitmq或者redis中读取这些任务并执行然后返回结果到这些组件，这样就实现了一个异步的功能。</p><p>Celery 用redis或者rabbitmq做消息通信，这里redis或者rabbitmq被称为中间人（Broker）Celery 系统可包含多个线程和中间人，以此获得高可用性和横向扩展能力。</p><p>Celery 虽然是用 Python 编写的，但协议可以用任何语言实现。迄今，已有 Ruby 实现的 RCelery 、node.js 实现的 node-celery 以及一个 PHP 客户端 ，语言互通也可以通过 using webhooks 实现。</p><h3 id="django-介绍"><a href="#django-介绍" class="headerlink" title="django 介绍"></a>django 介绍</h3><p>django作为python最主流也是资格最老的的web开发系统，是一个全栈的开发框架，几乎web开发系统中会用到的所有功能django都有，即使没有也可以在网站找到对应的开源解决方案，在stackoverflow上的问答也是最多的。基本上学习懂了django以后学习其他如flask、tornado都会觉得手到擒来。</p><p>本文中我们就介绍一下如何将celery集成到django中来完成django耗时任务的异步执行和定时任务计划。</p><p>我们将采用redis来做为中间人</p><p>###celery 安装和使用</p><blockquote><p>celery安装</p></blockquote><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U celery[redis]</span><br></pre></td></tr></table></figure><p>该命令会安装celery以及redis开发相关所有的依赖包。安装完成我们可以看到：<br><a href="http://okwbmb2ka.bkt.clouddn.com/%E5%AE%89%E8%A3%85celery%E5%90%8E%E7%9A%84%E6%88%AA%E5%9B%BE.png" target="_blank" rel="noopener"><img src="http://okwbmb2ka.bkt.clouddn.com/%E5%AE%89%E8%A3%85celery%E5%90%8E%E7%9A%84%E6%88%AA%E5%9B%BE.png" alt="image"></a><br>这里我们可以看到安装了billiard、pytz、vine、amqp、redis、celery等</p><blockquote><p>redis-server安装</p></blockquote><p>既然是用redis做中间人，当然需要安装redis了、我们直接运行：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-getin install redis-server</span><br></pre></td></tr></table></figure><p>运行成功以后可以，redis-server直接就作为服务启动了， 我们可以通过：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br></pre></td></tr></table></figure><p>命令来查看redis是否启动如下图：<br><a href="http://okwbmb2ka.bkt.clouddn.com/%E6%9F%A5%E7%9C%8Bredis%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8%E6%83%85%E5%86%B5.png" target="_blank" rel="noopener"><img src="http://okwbmb2ka.bkt.clouddn.com/%E6%9F%A5%E7%9C%8Bredis%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8%E6%83%85%E5%86%B5.png" alt="image"></a></p><p>这里我们可以看到redis已经在6379端口监听了</p><blockquote><p>启动celery的worker</p></blockquote><p>前面介绍了celery的处理流程， 既然我们已经启动了redis， 当然我们需要启动一个随时监听异步处理函数的worker了。 这里我们直接启动celery的worker就行了</p><p>首先我们来新建一个tasks.py 文件， 内容如下：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">app = Celery('hello', broker='redis://localhost:6379/0')</span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def hello():</span><br><span class="line">    return 'hello world'</span><br></pre></td></tr></table></figure><p>然后我们允许下面的命令启动celery的worker</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A tasks worker --loglevel=info</span><br></pre></td></tr></table></figure><p>注：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里tasks表示的是上面创建的文件的名字， 比如如果我们的py文件为tasks.py, 则直接 celery -A tasks worker --loglevel=info。 如果我们的py文件为celery-tasks这命令应该修改为：</span><br><span class="line">celery -A celery-tasks worker --loglevel=info</span><br></pre></td></tr></table></figure><p>启动后我们就可以看到celery已经启动了线程时刻监听redis中的异步函数，如下：<br><a href="http://okwbmb2ka.bkt.clouddn.com/celery%E5%90%AF%E5%8A%A8%E6%88%AA%E5%9B%BE.png" target="_blank" rel="noopener"><img src="http://okwbmb2ka.bkt.clouddn.com/celery%E5%90%AF%E5%8A%A8%E6%88%AA%E5%9B%BE.png" alt="image"></a></p><p>接下来我们分析一下上面的tasks.py文件：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    1. 首先直接初始化Celery对象， 并指明使用的redis的连接地址</span><br><span class="line">    2. 直接用celery对象的task装饰任何我们需要异步的函数</span><br><span class="line">简单两步就完成了celery的异步函数</span><br></pre></td></tr></table></figure><blockquote><p>直接执行异步函数</p></blockquote><p>这一步里面我们直接新建test.py文件， 内容如下：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from tasks import add</span><br><span class="line"></span><br><span class="line">add.delay(1,2)</span><br></pre></td></tr></table></figure><p>注意这里对add函数的调用采用的是delay函数而不是直接采用add(1,2),因为这样调用就和普通函数调用没有区别了。所以这里一定要注意。运行test.py文件后我们可以看到celery的输出：</p><p><a href="http://okwbmb2ka.bkt.clouddn.com/celery%E6%8E%A5%E6%94%B6%E5%88%B0celery%E7%9A%84%E6%88%AA%E5%9B%BE.png" target="_blank" rel="noopener"><img src="http://okwbmb2ka.bkt.clouddn.com/celery%E6%8E%A5%E6%94%B6%E5%88%B0celery%E7%9A%84%E6%88%AA%E5%9B%BE.png" alt="image"></a></p><p>在最后面我们可以清楚的看到调用了add函数， add函数的执行结果会返回到redis中<br>这里delay函数是将函数执行异步放入到redis中交给celery执行， 这样delay之后就会有个问题就是如果我们需要理解得到结果怎么办呢？</p><p>我们可以直接调用：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add.delay(1,2).get()</span><br></pre></td></tr></table></figure><p>这样就变成同步的了，等到返回结果才会去执行下一步</p><blockquote><p>celery添加异步任务</p></blockquote><p>celery的使用非常简单 </p><p>这里我们可以看到需要将一个函数变为异步函数非常简单， 只需要添加@app.task装饰器就够了。 是不是非常简单啊。</p><ol><li><p>配置celery连接redis</p><p>app.conf.result_backend = ‘redis://localhost:6379/0’</p></li><li><p>配置任务执行结果保存地址</p><p>app.conf.result_backend = ‘redis://localhost:6379/0’</p><p>前面我们讲到过celery是从中间人取出函数并执行，但是保存结果也需要保存到中间人， 这里实际上取任务的地方和保存结果的中间人实际上可以不一样， 所有这里就提供了中间结果执行的保存地址</p></li></ol><h3 id="集成celery到django中"><a href="#集成celery到django中" class="headerlink" title="集成celery到django中"></a>集成celery到django中</h3><p><em>这里以我的一门django搭建在线教育平台的课程为例来讲解，大家如果有兴趣可以去关注一下，课程强力django+杀手级xadmin</em></p><p>首先我们来看一下完整的系统结构图：<br><a href="http://okwbmb2ka.bkt.clouddn.com/%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.png" target="_blank" rel="noopener"><img src="http://okwbmb2ka.bkt.clouddn.com/%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.png" alt="image"></a></p><p>1.修改django项目的MxOnline/settings.py文件， 加上：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"><span class="hljs-comment">##配置Broker</span></span></span><br><span class="line">BROKER_URL = 'redis://127.0.0.1:6379/0'</span><br><span class="line">BROKER_TRANSPORT = 'redis'</span><br></pre></td></tr></table></figure><p>2.在MxOline下面新建celery.py文件</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> django</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> celery <span class="hljs-keyword">import</span> Celery</span><br><span class="line"><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="hljs-string">'DJANGO_SETTINGS_MODULE'</span>, <span class="hljs-string">'MxOnline.settings'</span>)</span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="hljs-string">'MxOnline'</span>)</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="hljs-string">'django.conf:settings'</span>)</span><br><span class="line">app.autodiscover_tasks(<span class="hljs-keyword">lambda</span>: settings.INSTALLED_APPS)</span><br></pre></td></tr></table></figure><p>结构如图所示：</p><p><a href="http://okwbmb2ka.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0celerypy%E6%96%87%E4%BB%B6%E5%90%8E.png" target="_blank" rel="noopener"><img src="http://okwbmb2ka.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0celerypy%E6%96%87%E4%BB%B6%E5%90%8E.png" alt="image"></a></p><p>3.在对应的app下面新建tasks.py文件， 这里我们在users这个app下面新建， 如图所示：</p><p><a href="http://okwbmb2ka.bkt.clouddn.com/app%E4%B8%8B%E6%96%B0%E5%BB%BAtasks.png" target="_blank" rel="noopener"><img src="http://okwbmb2ka.bkt.clouddn.com/app%E4%B8%8B%E6%96%B0%E5%BB%BAtasks.png" alt="image"></a></p><p>文件源码如下：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> MxOnline.celery <span class="hljs-keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@app.task</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_register_email</span><span class="hljs-params">(email, send_type=<span class="hljs-string">"register"</span>)</span>:</span></span><br><span class="line">    email_record = EmailVerifyRecord()</span><br><span class="line">    <span class="hljs-keyword">if</span> send_type == <span class="hljs-string">"update_email"</span>:</span><br><span class="line">        code = random_str(<span class="hljs-number">4</span>)</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        code = random_str(<span class="hljs-number">16</span>)</span><br><span class="line">    email_record.code = code</span><br><span class="line">    email_record.email = email</span><br><span class="line">    email_record.send_type = send_type</span><br><span class="line">    email_record.save()</span><br><span class="line"></span><br><span class="line">    email_title = <span class="hljs-string">""</span></span><br><span class="line">    email_body = <span class="hljs-string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> send_type == <span class="hljs-string">"register"</span>:</span><br><span class="line">        email_title = <span class="hljs-string">"慕学在线网注册激活链接"</span></span><br><span class="line">        email_body = <span class="hljs-string">"请点击下面的链接激活你的账号: http://www.imooc.com/active/&#123;0&#125;"</span>.format(code)</span><br><span class="line"></span><br><span class="line">        send_status = send_mail(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">        <span class="hljs-keyword">if</span> send_status:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> send_type == <span class="hljs-string">"forget"</span>:</span><br><span class="line">        email_title = <span class="hljs-string">"慕学在线网注册密码重置链接"</span></span><br><span class="line">        email_body = <span class="hljs-string">"请点击下面的链接重置密码: http://www.imooc.com/reset/&#123;0&#125;"</span>.format(code)</span><br><span class="line"></span><br><span class="line">        send_status = send_mail(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">        <span class="hljs-keyword">if</span> send_status:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> send_type == <span class="hljs-string">"update_email"</span>:</span><br><span class="line">        email_title = <span class="hljs-string">"慕学在线邮箱修改验证码"</span></span><br><span class="line">        email_body = <span class="hljs-string">"你的邮箱验证码为: &#123;0&#125;"</span>.format(code)</span><br><span class="line"></span><br><span class="line">        send_status = send_mail(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">        <span class="hljs-keyword">if</span> send_status:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-number">4.</span> 编辑views.py文件完成邮件发送异步调用：</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">#coding:utf-8</span></span><br><span class="line">    <span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render</span><br><span class="line">    <span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">from</span> .tasks <span class="hljs-keyword">import</span> send_register_email</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">(request)</span>:</span></span><br><span class="line">        send_register_email.delay()</span><br><span class="line">        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">u"邮件发送成功， 请查收"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-number">5.</span> 进入MxOnline目录运行：</span><br><span class="line">    celery -A demo worker -l debug</span><br><span class="line"></span><br><span class="line">    以此来启动celery的worker服务</span><br></pre></td></tr></table></figure><p>至此，大功告成了！我们可以在我们定义的任何apps中添加tasks来定义需要的异步任务。</p><p>注：原文地址：<a href="http://www.projectsedu.com/2017/02/08/django通过celery添加异步任务/" target="_blank" rel="noopener">http://www.projectsedu.com/2017/02/08/django通过celery添加异步任务/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;异步任务的重要性&quot;&gt;&lt;a href=&quot;#异步任务的重要性&quot; class=&quot;headerlink&quot; title=&quot;异步任务的重要性&quot;&gt;&lt;/a&gt;异步任务的重要性&lt;/h3&gt;&lt;p&gt;大家在做web项目的时候经常会遇到一些耗时的操作， 比如： 发送邮件、发送短信、生成pdf。这些操作在某些情况下需要立即返回结果给用户，但是可以在后台异步执行。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django，Celery" scheme="http://yoursite.com/tags/Django%EF%BC%8CCelery/"/>
    
  </entry>
  
  <entry>
    <title>centos7下通过nginx+uwsgi部署django应用</title>
    <link href="http://yoursite.com/2018/01/06/django-nginx-uwsgi/"/>
    <id>http://yoursite.com/2018/01/06/django-nginx-uwsgi/</id>
    <published>2018-01-06T05:18:54.000Z</published>
    <updated>2018-04-15T07:30:50.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-安装python3-6"><a href="#1-安装python3-6" class="headerlink" title="1. 安装python3.6"></a>1. 安装python3.6</h5><a id="more"></a><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 获取</span><br><span class="line"></span><br><span class="line">wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgz</span><br><span class="line">tar -xzvf Python-3.6.2.tgz -C  /tmp</span><br><span class="line">cd  /tmp/Python-3.6.2/</span><br><span class="line"></span><br><span class="line">2. 把Python3.6安装到 /usr/local 目录</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make</span><br><span class="line">make altinstall</span><br><span class="line"></span><br><span class="line">3. 更改/usr/bin/python链接</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/bin/python3.6 /usr/bin/python3</span><br></pre></td></tr></table></figure><h5 id="2-maridb"><a href="#2-maridb" class="headerlink" title="2. maridb"></a>2. maridb</h5><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1. 安装</span><br><span class="line"></span><br><span class="line">    sudo yum install mariadb-server</span><br><span class="line">2. 启动， 重启</span><br><span class="line"></span><br><span class="line">    sudo systemctl start mariadb</span><br><span class="line">    sudo systemctl restart mariadb</span><br><span class="line"></span><br><span class="line">3. 设置bind-ip</span><br><span class="line"></span><br><span class="line">    vim /etc/my.cnf</span><br><span class="line">    在 [mysqld]:</span><br><span class="line">        下面加一行</span><br><span class="line">        bind-address = 0.0.0.0</span><br><span class="line"></span><br><span class="line">4. 设置外部ip可以访问</span><br><span class="line"></span><br><span class="line">    先进入mysql才能运行下面命令:</span><br><span class="line">        mysql 直接进入就行</span><br><span class="line"></span><br><span class="line">    GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">    FLUSH PRIVILEGES</span><br><span class="line"></span><br><span class="line">5. 设置阿里云的对外端口</span><br><span class="line"></span><br><span class="line">6. 安装mysqlclient出问题</span><br><span class="line"></span><br><span class="line">    centos 7：</span><br><span class="line">        yum install python-devel mariadb-devel -y</span><br><span class="line"></span><br><span class="line">    ubuntu：</span><br><span class="line">        sudo apt-get install libmysqlclient-dev</span><br><span class="line"></span><br><span class="line">    然后：</span><br><span class="line">        pip install mysqlclient</span><br></pre></td></tr></table></figure><h5 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3. 安装nginx"></a>3. 安装nginx</h5><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7</span><br></pre></td></tr></table></figure><h5 id="4-安装virtualenvwrapper"><a href="#4-安装virtualenvwrapper" class="headerlink" title="4. 安装virtualenvwrapper"></a>4. 安装virtualenvwrapper</h5><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools python-devel</span><br><span class="line">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>环境配置</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">编辑.bashrc文件</span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line">重新加载.bashrc文件</span><br><span class="line">source  ~/.bashrc</span><br><span class="line"></span><br><span class="line">新建虚拟环境</span><br><span class="line">mkvirtualenv mxonline</span><br><span class="line"></span><br><span class="line">进入虚拟环境 </span><br><span class="line">workon mxonline</span><br><span class="line"></span><br><span class="line">安装pip包</span><br><span class="line">我们可以通过 pip freeze &gt; requirements.txt 将本地的虚拟环境安装包相信信息导出来</span><br><span class="line"></span><br><span class="line">然后将requirements.txt文件上传到服务器之后运行：</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">安装依赖包</span><br></pre></td></tr></table></figure><h5 id="5-安装uwsgi"><a href="#5-安装uwsgi" class="headerlink" title="5. 安装uwsgi"></a>5. 安装uwsgi</h5><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><h5 id="6-测试uwsgi"><a href="#6-测试uwsgi" class="headerlink" title="6. 测试uwsgi"></a>6. 测试uwsgi</h5><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --module MxOnline.wsgi</span><br></pre></td></tr></table></figure><h5 id="7-配置nginx"><a href="#7-配置nginx" class="headerlink" title="7. 配置nginx"></a>7. 配置nginx</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">新建uc_nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># the upstream component nginx needs to connect to</span><br><span class="line">upstream django &#123;</span><br><span class="line"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span><br><span class="line">server 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)</span><br><span class="line">&#125;</span><br><span class="line"># configuration of the server</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"># the port your site will be served on</span><br><span class="line">listen      80;</span><br><span class="line"># the domain name it will serve for</span><br><span class="line">server_name 你的ip地址 ; # substitute your machine&apos;s IP address or FQDN</span><br><span class="line">charset     utf-8;</span><br><span class="line"></span><br><span class="line"># max upload size</span><br><span class="line">client_max_body_size 75M;   # adjust to taste</span><br><span class="line"></span><br><span class="line"># Django media</span><br><span class="line">location /media  &#123;</span><br><span class="line">    alias 你的目录/Mxonline/media;  # 指向django的media目录</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /static &#123;</span><br><span class="line">    alias 你的目录/Mxonline/static; # 指向django的static目录</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Finally, send all non-media requests to the Django server.</span><br><span class="line">location / &#123;</span><br><span class="line">    uwsgi_pass  django;</span><br><span class="line">    include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-将该配置文件加入到nginx的启动配置文件中"><a href="#8-将该配置文件加入到nginx的启动配置文件中" class="headerlink" title="8. 将该配置文件加入到nginx的启动配置文件中"></a>8. 将该配置文件加入到nginx的启动配置文件中</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s 你的目录/Mxonline/conf/nginx/uc_nginx.conf /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure><h5 id="9-拉取所有需要的static-file-到同一个目录"><a href="#9-拉取所有需要的static-file-到同一个目录" class="headerlink" title="9. 拉取所有需要的static file 到同一个目录"></a>9. 拉取所有需要的static file 到同一个目录</h5><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在django的setting文件中，添加下面一行内容：</span><br><span class="line"></span><br><span class="line">    STATIC_ROOT = os.path.join(BASE_DIR, "static/")</span><br><span class="line">运行命令</span><br><span class="line">    python manage.py collectstatic</span><br></pre></td></tr></table></figure><h5 id="10-运行nginx"><a href="#10-运行nginx" class="headerlink" title="10. 运行nginx"></a>10. 运行nginx</h5><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/sbin/nginx</span><br></pre></td></tr></table></figure><p>这里需要注意 一定是直接用nginx命令启动， 不要用systemctl启动nginx不然会有权限问题</p><h5 id="11-通过配置文件启动uwsgi"><a href="#11-通过配置文件启动uwsgi" class="headerlink" title="11. 通过配置文件启动uwsgi"></a>11. 通过配置文件启动uwsgi</h5><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">新建uwsgi.ini 配置文件， 内容如下：</span><br><span class="line"></span><br><span class="line">    # mysite_uwsgi.ini file</span><br><span class="line">    [uwsgi]</span><br><span class="line"></span><br><span class="line">    # Django-related settings</span><br><span class="line">    # the base directory (full path)</span><br><span class="line">    chdir           = /home/bobby/Projects/MxOnline</span><br><span class="line">    # Django's wsgi file</span><br><span class="line">    module          = MxOnline.wsgi</span><br><span class="line">    # the virtualenv (full path)</span><br><span class="line"></span><br><span class="line">    # process-related settings</span><br><span class="line">    # master</span><br><span class="line">    master          = true</span><br><span class="line">    # maximum number of worker processes</span><br><span class="line">    processes       = 10</span><br><span class="line">    # the socket (use the full path to be safe</span><br><span class="line">    socket          = 127.0.0.1:8000</span><br><span class="line">    # ... with appropriate permissions - may be needed</span><br><span class="line">    # chmod-socket    = 664</span><br><span class="line">    # clear environment on exit</span><br><span class="line">    vacuum          = true</span><br><span class="line">    virtualenv = /home/bobby/.virtualenvs/mxonline</span><br><span class="line"></span><br><span class="line">    logto = /tmp/mylog.log</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">    chdir： 表示需要操作的目录，也就是项目的目录</span><br><span class="line">    module： wsgi文件的路径</span><br><span class="line">    processes： 进程数</span><br><span class="line">    virtualenv：虚拟环境的目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">workon mxonline</span><br><span class="line">uwsgi -i 你的目录/Mxonline/conf/uwsgi.ini &amp;</span><br></pre></td></tr></table></figure><h5 id="12-访问"><a href="#12-访问" class="headerlink" title="12.访问"></a>12.访问</h5><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://你的ip地址/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-安装python3-6&quot;&gt;&lt;a href=&quot;#1-安装python3-6&quot; class=&quot;headerlink&quot; title=&quot;1. 安装python3.6&quot;&gt;&lt;/a&gt;1. 安装python3.6&lt;/h5&gt;
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django，Celery" scheme="http://yoursite.com/tags/Django%EF%BC%8CCelery/"/>
    
  </entry>
  
  <entry>
    <title>centos7下部署sentry日志管理服务</title>
    <link href="http://yoursite.com/2018/01/04/centos-sentry/"/>
    <id>http://yoursite.com/2018/01/04/centos-sentry/</id>
    <published>2018-01-04T05:18:54.000Z</published>
    <updated>2018-01-07T05:23:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a><strong>Docker安装</strong></h2><p><strong>1.卸载旧版本</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-selinux \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure><p><strong>2.安装依赖包</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>3.添加稳定的源</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><strong>安装docker ce</strong></p><p><strong>1.更新yum包</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure><p><strong>2.安装docker ce</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p><strong>3.启动docker</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p><strong>4.测试docker</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://cloud.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure><p><strong>安装docker-compose</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. sudo yum install epel-release</span><br><span class="line">2. sudo yum install -y python-pip</span><br><span class="line">3. sudo pip install docker-compose</span><br></pre></td></tr></table></figure><h2 id="2-sentry安装"><a href="#2-sentry安装" class="headerlink" title="2.sentry安装"></a><strong>2.sentry安装</strong></h2><p>sentry 依赖的组件比较多 包括 redis、 postgresql、 outbound email</p><p>在安装sentry前请确保 docker 版本大于1.10</p><p><strong>1.安装git</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git</span><br></pre></td></tr></table></figure><p><strong>2.下载docker镜像并构建容器</strong></p><p><strong>cd进入到要安装的目录，创建一个程序目录</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p data/&#123;sentry,postgres&#125;</span><br></pre></td></tr></table></figure><p><strong>3.下载onpremise-master项目，放在与刚才创建的data目录同级</strong></p><p><strong>两者选一即可</strong></p><p>下载地址：<a href="https://github.com/getsentry/onpremise" target="_blank" rel="noopener">https://github.com/getsentry/onpremise</a></p><p> 也可以不用下载进行克隆</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone  https://github.com/getsentry/onpremise.git</span><br><span class="line">$ cd onpremise</span><br></pre></td></tr></table></figure><p><strong>4.cd onpremise,进入到onpremise-master项目，执行命令生成key</strong></p><p><strong>注意：以下所有的目录，都是要在onpremise下执行的</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm web config generate-secret-key</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn7z4872tsj30h5031dhz.jpg" alt></p><p>** 复制生成的key写入到docker-compose.yml文件**</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fn7z4cve8rj30sw0b40sy.jpg" alt></p><p><strong>5.生成数据表</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm web upgrade</span><br></pre></td></tr></table></figure><p><strong>6.启动项目，在9000端口，如果是阿里云服务器记得开放端口</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>访问服务器ip加9000端口</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn7z4kchkbj30m40df40b.jpg" alt></p><p> <strong>可以看到是英文的</strong></p><p><strong>首先要改成中文</strong></p><p><strong>1</strong></p><p><strong><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn7z4tog6pj306p041glf.jpg" alt></strong></p><p><strong>2</strong></p><p><strong><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fn7z51oc2tj30lr0fl3ys.jpg" alt></strong></p><p><strong>以后启动项目</strong></p><p><strong>首先启动docker</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p><strong>然后cd进入到onpremise下执行</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><strong>错误日志监控配置</strong></p><p><strong>python脚本监控</strong></p><p><strong><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fn7z5aw4x6j30uk0cjdg2.jpg" alt></strong></p><p><strong>选择监控类型</strong></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fn7z5kb5lxj315s0ez3zf.jpg" alt></p><p>** python监控**</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding:utf8 -*-</span><br><span class="line">from raven import Client</span><br><span class="line"></span><br><span class="line"># 设置dns的key</span><br><span class="line">client = Client(&apos;http://f77284e1694144319ff6e27cf1cf9ae3:dd866ea1b3c34604ad9717deca56c320@47.52.39.160:9000/14&apos;)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    1 / 0</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    # 获取错误推送到错误监控</span><br><span class="line">    client.captureException()[![复制代码](http://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)</span><br></pre></td></tr></table></figure><p>监控</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fn7z5s17khj30w30dwwel.jpg" alt></p><p><strong>Docker监控</strong></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;app1&apos;,</span><br><span class="line">    &apos;social_django&apos;,</span><br><span class="line">    &apos;raven.contrib.django.raven_compat&apos;,   # 配置监控APP</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 配置监控配置</span><br><span class="line">RAVEN_CONFIG = &#123;</span><br><span class="line">    &apos;dsn&apos;: &apos;http://5def24308c64410fab2f8f4dda116195:619079b681ee4fb599ab62db4da8524f@47.52.39.160:9000/15&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;&lt;strong&gt;Docker安装&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.卸载旧版本&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum remove docker \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    docker-common \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    docker-selinux \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    docker-engine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;2.安装依赖包&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install -y yum-utils device-mapper-persistent-data lvm2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django, Centos" scheme="http://yoursite.com/tags/Django-Centos/"/>
    
  </entry>
  
  <entry>
    <title>Go基础速查手册</title>
    <link href="http://yoursite.com/2018/01/03/go-base-tips/"/>
    <id>http://yoursite.com/2018/01/03/go-base-tips/</id>
    <published>2018-01-03T05:18:54.000Z</published>
    <updated>2019-07-18T07:13:40.926Z</updated>
    
    <content type="html"><![CDATA[<p>要用的时候看一看！</p><a id="more"></a><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">  Golang速学速查速用代码手册</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line">    <span class="hljs-string">"errors"</span></span><br><span class="line">    <span class="hljs-string">"fmt"</span></span><br><span class="line">    <span class="hljs-string">"github.com/stretchr/testify/assert"</span></span><br><span class="line">    <span class="hljs-string">"io"</span></span><br><span class="line">    <span class="hljs-string">"io/ioutil"</span></span><br><span class="line">    <span class="hljs-string">"log"</span></span><br><span class="line">    <span class="hljs-string">"math"</span></span><br><span class="line">    <span class="hljs-string">"os"</span></span><br><span class="line">    <span class="hljs-string">"path/filepath"</span></span><br><span class="line">    <span class="hljs-string">"regexp"</span></span><br><span class="line">    <span class="hljs-string">"strings"</span></span><br><span class="line">    <span class="hljs-string">"sync"</span></span><br><span class="line">    <span class="hljs-string">"testing"</span></span><br><span class="line">    <span class="hljs-string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 0. 注释</span></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">规范：</span></span><br><span class="line"><span class="hljs-comment"> 1. 命名：骆驼命名法（不要用下划线）</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">命令:</span></span><br><span class="line"><span class="hljs-comment"> go get github.com/lawtech0902/xxx</span></span><br><span class="line"><span class="hljs-comment"> go build calc</span></span><br><span class="line"><span class="hljs-comment"> go run xxx.go</span></span><br><span class="line"><span class="hljs-comment"> go install calc</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 1. Hello World</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">helloWorld</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="hljs-string">"Hello, 世界"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.变量类型</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">typeDemo</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 变量声明</span></span><br><span class="line">    <span class="hljs-keyword">var</span> v1 <span class="hljs-keyword">int</span></span><br><span class="line">    <span class="hljs-keyword">var</span> (</span><br><span class="line">        v2 <span class="hljs-keyword">int</span></span><br><span class="line">        v3 <span class="hljs-keyword">string</span></span><br><span class="line">    )</span><br><span class="line">    <span class="hljs-comment">//var p *int // 指针类型</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 变量初始化</span></span><br><span class="line">    <span class="hljs-keyword">var</span> v4 <span class="hljs-keyword">int</span> = <span class="hljs-number">10</span></span><br><span class="line">    <span class="hljs-comment">// 等价于:</span></span><br><span class="line">    <span class="hljs-keyword">var</span> v5 = <span class="hljs-number">10</span></span><br><span class="line">    <span class="hljs-comment">// 一般这样就好</span></span><br><span class="line">    v6 := <span class="hljs-number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 赋值，多重赋值</span></span><br><span class="line">    v1 = <span class="hljs-number">10</span></span><br><span class="line">    v2, v3 = <span class="hljs-number">20</span>, <span class="hljs-string">"test"</span></span><br><span class="line">    <span class="hljs-comment">// 匿名变量 _</span></span><br><span class="line">    _, v4 = v5, v6</span><br><span class="line"></span><br><span class="line">    fmt.Println(v1, v2, v3, v4)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 常量</span></span><br><span class="line">    <span class="hljs-keyword">const</span> Pi <span class="hljs-keyword">float64</span> = <span class="hljs-number">3.1415926</span></span><br><span class="line">    <span class="hljs-keyword">const</span> MaxPlayer = <span class="hljs-number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 枚举</span></span><br><span class="line">    <span class="hljs-keyword">const</span> (</span><br><span class="line">        Sunday = <span class="hljs-literal">iota</span> <span class="hljs-comment">// iota从0递增</span></span><br><span class="line">        Mondy</span><br><span class="line">        Tuesday</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 类型</span></span><br><span class="line">    <span class="hljs-comment">// 1. 布尔</span></span><br><span class="line">    <span class="hljs-keyword">var</span> b1 <span class="hljs-keyword">bool</span></span><br><span class="line">    b1 = <span class="hljs-literal">true</span></span><br><span class="line">    b1 = (<span class="hljs-number">1</span> == <span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(b1)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 2. 整形</span></span><br><span class="line">    <span class="hljs-comment">// int8 uint8 int16 uint16 int32 uint32 int64 uint64 int uint uintptr</span></span><br><span class="line">    <span class="hljs-keyword">var</span> i32 <span class="hljs-keyword">int32</span></span><br><span class="line">    <span class="hljs-comment">// 强制转换</span></span><br><span class="line">    i32 = <span class="hljs-keyword">int32</span>(<span class="hljs-number">64</span>)</span><br><span class="line">    <span class="hljs-comment">// 运算：+, -, *, /, %（求余）</span></span><br><span class="line">    <span class="hljs-comment">// 比较：&gt;, &lt;, ==, &gt;=, &lt;=, !=</span></span><br><span class="line">    <span class="hljs-comment">// 位运算：x &lt;&lt; y, x &gt;&gt; y, x ^ y, x &amp; y, x | y, ^x （取反）</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(i32)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 3. 浮点</span></span><br><span class="line">    <span class="hljs-comment">// float32, float64</span></span><br><span class="line">    <span class="hljs-keyword">var</span> f1 <span class="hljs-keyword">float64</span> = <span class="hljs-number">1.0001</span></span><br><span class="line">    <span class="hljs-keyword">var</span> f2 <span class="hljs-keyword">float64</span> = <span class="hljs-number">1.0002</span></span><br><span class="line">    <span class="hljs-comment">// 浮点比较</span></span><br><span class="line">    isEqual := math.Dim(f1, f2) &lt; <span class="hljs-number">0.0001</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(isEqual)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 4. 字符串</span></span><br><span class="line">    <span class="hljs-keyword">var</span> s1 <span class="hljs-keyword">string</span></span><br><span class="line">    s1 = <span class="hljs-string">"abc"</span></span><br><span class="line">    <span class="hljs-comment">// 字符串连接</span></span><br><span class="line">    s1 = s1 + <span class="hljs-string">"ddd"</span></span><br><span class="line">    <span class="hljs-comment">// 取长度</span></span><br><span class="line">    n := <span class="hljs-built_in">len</span>(s1)</span><br><span class="line">    <span class="hljs-comment">// 取字符</span></span><br><span class="line">    c1 := s1[<span class="hljs-number">0</span>]</span><br><span class="line">    <span class="hljs-comment">// 反引号，不转义，常用于正则表达式</span></span><br><span class="line">    s1 = <span class="hljs-string">`\w+`</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(c1)</span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.HasPrefix(<span class="hljs-string">"prefix"</span>, <span class="hljs-string">"pre"</span>)) <span class="hljs-comment">// true</span></span><br><span class="line">    fmt.Println(strings.HasSuffix(<span class="hljs-string">"suffix"</span>, <span class="hljs-string">"fix"</span>)) <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 字节遍历</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        ch := s1[i]</span><br><span class="line">        fmt.Println(ch)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// Unicode字符遍历</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> s1 &#123;</span><br><span class="line">        fmt.Println(i, ch)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 5. 数组</span></span><br><span class="line">    <span class="hljs-keyword">var</span> arr1 [<span class="hljs-number">32</span>]<span class="hljs-keyword">int</span></span><br><span class="line">    <span class="hljs-comment">//var arr2 [3][8]int // 二维数组</span></span><br><span class="line">    <span class="hljs-comment">// 初始化</span></span><br><span class="line">    arr1 = [<span class="hljs-number">32</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">0</span>&#125;</span><br><span class="line">    array := [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;</span><br><span class="line">    <span class="hljs-comment">// 临时结构体数组</span></span><br><span class="line">    structArray := []<span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">        name <span class="hljs-keyword">string</span></span><br><span class="line">        age  <span class="hljs-keyword">int</span></span><br><span class="line">    &#125;&#123;&#123;<span class="hljs-string">"Tim"</span>, <span class="hljs-number">18</span>&#125;, &#123;<span class="hljs-string">"Jim"</span>, <span class="hljs-number">20</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 数组遍历</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(array); i++ &#123;</span><br><span class="line">        fmt.Println(array[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> structArray &#123;</span><br><span class="line">        fmt.Println(i, v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 数组是值类型，每次参数传递都是一份拷贝</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 数组切片Slice</span></span><br><span class="line">    <span class="hljs-keyword">var</span> mySlice []<span class="hljs-keyword">int</span> = arr1[:<span class="hljs-number">2</span>]</span><br><span class="line">    mySlice1 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">5</span>)</span><br><span class="line">    mySlice2 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="hljs-string">"len(mySlice2:"</span>, <span class="hljs-built_in">len</span>(mySlice2)) <span class="hljs-comment">// 5</span></span><br><span class="line">    fmt.Println(<span class="hljs-string">"cap(mySlice2:"</span>, <span class="hljs-built_in">cap</span>(mySlice2)) <span class="hljs-comment">// 10</span></span><br><span class="line"></span><br><span class="line">    mySlice3 := <span class="hljs-built_in">append</span>(mySlice, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span><br><span class="line">    mySlice4 := <span class="hljs-built_in">append</span>(mySlice, mySlice1...)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">copy</span>(mySlice3, mySlice4)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 6. Map</span></span><br><span class="line">    <span class="hljs-keyword">var</span> m <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">string</span></span><br><span class="line">    m[<span class="hljs-number">1</span>] = <span class="hljs-string">"ddd"</span></span><br><span class="line">    m1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">string</span>)</span><br><span class="line">    m2 := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">string</span>&#123;</span><br><span class="line">        <span class="hljs-number">1</span>: <span class="hljs-string">"a"</span>,</span><br><span class="line">        <span class="hljs-number">2</span>: <span class="hljs-string">"b"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">delete</span>(m2, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">    value, ok := m1[<span class="hljs-number">1</span>]</span><br><span class="line">    <span class="hljs-keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Println(value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m2 &#123;</span><br><span class="line">        fmt.Println(k, v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3. 流程控制</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">flowDemo</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// if else</span></span><br><span class="line">    a := <span class="hljs-number">10</span></span><br><span class="line">    <span class="hljs-keyword">if</span> a &lt; <span class="hljs-number">10</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// ..</span></span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// ..</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// switch</span></span><br><span class="line">    <span class="hljs-keyword">switch</span> a &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:</span><br><span class="line">        fmt.Println(<span class="hljs-string">"0"</span>)</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:</span><br><span class="line">        fmt.Println(<span class="hljs-string">"10"</span>)</span><br><span class="line">    <span class="hljs-keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="hljs-string">"default"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">switch</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> a &lt; <span class="hljs-number">10</span>:</span><br><span class="line">        fmt.Println(<span class="hljs-string">"&lt;10"</span>)</span><br><span class="line">    <span class="hljs-keyword">case</span> a &lt; <span class="hljs-number">20</span>:</span><br><span class="line">        fmt.Println(<span class="hljs-string">"&lt;20"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 循环</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 无限循环</span></span><br><span class="line">    sum := <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> &#123;</span><br><span class="line">        sum++</span><br><span class="line">        <span class="hljs-keyword">if</span> sum &gt; <span class="hljs-number">10</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">            <span class="hljs-comment">// 指定break</span></span><br><span class="line">            <span class="hljs-comment">// break JLoop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">goto</span> JLoop</span><br><span class="line"></span><br><span class="line">JLoop:</span><br><span class="line">    <span class="hljs-comment">// break to here</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 4. 函数</span></span><br><span class="line"><span class="hljs-comment">// func 函数名(参数列表)(返回值列表) &#123;</span></span><br><span class="line"><span class="hljs-comment">// &#125;</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum1</span><span class="hljs-params">(value1 <span class="hljs-keyword">int</span>, value2 <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(result <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// err = errors.New("xxxx")</span></span><br><span class="line">    <span class="hljs-keyword">return</span> value1 + value2, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum2</span><span class="hljs-params">(value1, value2 <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> value1 + value2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 不定参数</span></span><br><span class="line"><span class="hljs-comment">// myFunc(1, 2, 3, 4, 5)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myFunc</span><span class="hljs-params">(args ...<span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> args &#123;</span><br><span class="line">        fmt.Println(arg)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 传递</span></span><br><span class="line">    <span class="hljs-comment">// myFunc2(args...)</span></span><br><span class="line">    <span class="hljs-comment">// myFunc2(args[1:]...)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 任意类型的不定参数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myPrintf</span><span class="hljs-params">(args ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> args &#123;</span><br><span class="line">        <span class="hljs-keyword">switch</span> arg.(<span class="hljs-keyword">type</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-keyword">int</span>:</span><br><span class="line">            fmt.Println(arg, <span class="hljs-string">"is int"</span>)</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-keyword">string</span>:</span><br><span class="line">            fmt.Println(arg, <span class="hljs-string">"is string"</span>)</span><br><span class="line">        <span class="hljs-keyword">default</span>:</span><br><span class="line">            fmt.Println(arg, <span class="hljs-string">"is unknown"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 匿名函数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">anonymousFunc</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    f := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// defer</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deferDemo</span><span class="hljs-params">(path <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">    f, err := os.Open(path)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">defer</span> f.Close()</span><br><span class="line">    <span class="hljs-comment">// or</span></span><br><span class="line">    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> r := <span class="hljs-built_in">recover</span>(); r != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="hljs-string">"Runtime error caught: %v"</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 5. 结构体</span></span><br><span class="line"><span class="hljs-keyword">type</span> Rect <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 小写为private</span></span><br><span class="line">    x, y <span class="hljs-keyword">float64</span></span><br><span class="line">    <span class="hljs-comment">// 大写为public</span></span><br><span class="line">    Width, Height <span class="hljs-keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 大写方法为public，小写为private</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Rect)</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span> <span class="hljs-title">float64</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> r.Width * r.Height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">netRect</span><span class="hljs-params">(x, y, width, height <span class="hljs-keyword">float64</span>)</span> *<span class="hljs-title">Rect</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 实例化结构体</span></span><br><span class="line">    <span class="hljs-comment">// rect1 := new(Rect)</span></span><br><span class="line">    <span class="hljs-comment">// rect2 := &amp;Rect&#123;&#125;</span></span><br><span class="line">    <span class="hljs-comment">// rect3 := &amp;Rect&#123;Width:100, Height:200&#125;</span></span><br><span class="line">    <span class="hljs-keyword">return</span> &amp;Rect&#123;x, y, width, height&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 匿名组合</span></span><br><span class="line"><span class="hljs-keyword">type</span> Base <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="hljs-keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(base *Base)</span> <span class="hljs-title">Foo</span><span class="hljs-params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(base *Base)</span> <span class="hljs-title">Bar</span><span class="hljs-params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> Foo <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    Base</span><br><span class="line">    *log.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(foo *Foo)</span> <span class="hljs-title">Bar</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    foo.Base.Bar()</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 非侵入式接口</span></span><br><span class="line"><span class="hljs-keyword">type</span> IFile <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">    Read(buf []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)</span><br><span class="line">    Write(buf []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">type</span> File <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(file *File)</span> <span class="hljs-title">Read</span><span class="hljs-params">(buf []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(file *File)</span> <span class="hljs-title">Write</span><span class="hljs-params">(buf []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(n <span class="hljs-keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">interfaceDemo</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 只要实现了Read, Write方法即可</span></span><br><span class="line">    <span class="hljs-keyword">var</span> file IFile = <span class="hljs-built_in">new</span>(File)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 接口查询</span></span><br><span class="line">    <span class="hljs-comment">// 是否实现了IFile接口</span></span><br><span class="line">    <span class="hljs-keyword">if</span> file2, ok := file.(IFile); ok &#123;</span><br><span class="line">        file2.Read([]<span class="hljs-keyword">byte</span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 实例类型是否是File</span></span><br><span class="line">    <span class="hljs-keyword">if</span> file3, ok := file.(*File); ok &#123;</span><br><span class="line">        file3.Read([]<span class="hljs-keyword">byte</span>&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 类型查询</span></span><br><span class="line">    <span class="hljs-keyword">switch</span> v := file.(<span class="hljs-keyword">type</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 6. 并发编程</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counting</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="hljs-number">1</span></span><br><span class="line">    fmt.Println(<span class="hljs-string">"counting"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">channelDemo</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    chs := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(chs); i++ &#123;</span><br><span class="line">        chs[i] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span><br><span class="line">        <span class="hljs-comment">// 带缓冲区大小</span></span><br><span class="line">        <span class="hljs-comment">// c: = make(chan int, 1024)</span></span><br><span class="line">        <span class="hljs-comment">// for i:= range c &#123;</span></span><br><span class="line">        <span class="hljs-comment">// &#125;</span></span><br><span class="line">        <span class="hljs-keyword">go</span> counting(chs[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> _, ch := <span class="hljs-keyword">range</span> chs &#123;</span><br><span class="line">        &lt;-ch</span><br><span class="line">        <span class="hljs-comment">// channel select</span></span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">            select &#123;</span></span><br><span class="line"><span class="hljs-comment">            case &lt;-ch:</span></span><br><span class="line"><span class="hljs-comment">                // ...</span></span><br><span class="line"><span class="hljs-comment">            case ch &lt;- 1:</span></span><br><span class="line"><span class="hljs-comment">            &#125;</span></span><br><span class="line"><span class="hljs-comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 单向Channel</span></span><br><span class="line">    <span class="hljs-keyword">var</span> ch1 <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span> <span class="hljs-comment">// 只能写入int</span></span><br><span class="line">    <span class="hljs-keyword">var</span> ch2 &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span> <span class="hljs-comment">// 只能读出int</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 关闭Channel</span></span><br><span class="line">    <span class="hljs-built_in">close</span>(ch1)</span><br><span class="line">    _, ok := &lt;-ch2</span><br><span class="line">    <span class="hljs-keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="hljs-comment">// already closed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 锁</span></span><br><span class="line"><span class="hljs-keyword">var</span> m sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lockDemo</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    m.Lock()</span><br><span class="line">    <span class="hljs-comment">// do something</span></span><br><span class="line">    <span class="hljs-keyword">defer</span> m.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 全局唯一操作</span></span><br><span class="line"><span class="hljs-keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// once.Do(someFunction)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 7. 网络编程</span></span><br><span class="line"><span class="hljs-comment">// import "net"</span></span><br><span class="line"><span class="hljs-comment">// net.Dial("tcp", "127.0.0.1:8080")</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 8. json处理</span></span><br><span class="line"><span class="hljs-comment">// import "encoding/json"</span></span><br><span class="line"><span class="hljs-comment">// json.Marshal(obj) 序列化</span></span><br><span class="line"><span class="hljs-comment">// json.Unmarshal() 反序列化</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 9. Web开发</span></span><br><span class="line"><span class="hljs-comment">// import "net/http"</span></span><br><span class="line"><span class="hljs-comment">// 模板</span></span><br><span class="line"><span class="hljs-comment">// import "html/template"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 10. 常用库</span></span><br><span class="line"><span class="hljs-comment">// import "os"</span></span><br><span class="line"><span class="hljs-comment">// import "io"</span></span><br><span class="line"><span class="hljs-comment">// import "flag"</span></span><br><span class="line"><span class="hljs-comment">// import "strconv"</span></span><br><span class="line"><span class="hljs-comment">// import "crypto/sha1"</span></span><br><span class="line"><span class="hljs-comment">// import "crypto/md5"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 11. 单元测试</span></span><br><span class="line"><span class="hljs-comment">// _test结尾的go文件： xxx_test.go</span></span><br><span class="line"><span class="hljs-comment">// 函数名以Test开头</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestDemo</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    r := sum2(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> r != <span class="hljs-number">5</span> &#123;</span><br><span class="line">        t.Errorf(<span class="hljs-string">"sum2(2, 3) failed. Got %d, expect 5."</span>, r)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assert.Equal(t, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 12. 性能测试</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">benchmarkAdd</span><span class="hljs-params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    b.StopTimer()</span><br><span class="line">    <span class="hljs-comment">// dosometing</span></span><br><span class="line">    b.StartTimer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> 其他常用的代码片段</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 1. 遍历文件 filepath.Walk</span></span><br><span class="line"><span class="hljs-comment">// import "path/filepath"</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doHashWalk</span><span class="hljs-params">(dirPath <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    fullPath, err := filepath.Abs(dirPath)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    callback := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(path <span class="hljs-keyword">string</span>, fi os.FileInfo, err error)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> hashFile(fullPath, path, fi, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> filepath.Walk(fullPath, callback)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hashFile</span><span class="hljs-params">(root <span class="hljs-keyword">string</span>, path <span class="hljs-keyword">string</span>, fi os.FileInfo, err error)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> fi.IsDir() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    rel, err := filepath.Rel(root, path)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    log.Println(<span class="hljs-string">"hash rel:"</span>, rel, <span class="hljs-string">"abs:"</span>, path)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2. 读取文件</span></span><br><span class="line"><span class="hljs-comment">// import "io/ioutil"</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readFileDemo</span><span class="hljs-params">(filename <span class="hljs-keyword">string</span>)</span></span> &#123;</span><br><span class="line">    content, err := ioutil.ReadFile(filename)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-comment">//Do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    lines := strings.Split(<span class="hljs-keyword">string</span>(content), <span class="hljs-string">"\n"</span>)</span><br><span class="line">    fmt.Println(<span class="hljs-string">"line count:"</span>, <span class="hljs-built_in">len</span>(lines))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 判断目录或文件是否存在</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">existsPathCheck</span><span class="hljs-params">(path <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 判断不存在</span></span><br><span class="line">    <span class="hljs-keyword">if</span> _, err := os.Stat(path); os.IsNotExist(err) &#123;</span><br><span class="line">        <span class="hljs-comment">// 不存在</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 判断是否存在</span></span><br><span class="line">    _, err := os.Stat(path)</span><br><span class="line">    <span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, <span class="hljs-literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 文件目录操作</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fileDirDemo</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 级联创建目录</span></span><br><span class="line">    os.MkdirAll(<span class="hljs-string">"/path/to/create"</span>, <span class="hljs-number">0777</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 拷贝文件</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(source <span class="hljs-keyword">string</span>, dest <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(err error)</span></span> &#123;</span><br><span class="line">    sf, err := os.Open(source)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">defer</span> sf.Close()</span><br><span class="line">    df, err := os.Create(dest)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">defer</span> df.Close()</span><br><span class="line">    _, err = io.Copy(df, sf)</span><br><span class="line">    <span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        si, err := os.Stat(source)</span><br><span class="line">        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">            err = os.Chmod(dest, si.Mode())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 拷贝目录</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyDir</span><span class="hljs-params">(source <span class="hljs-keyword">string</span>, dest <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(err error)</span></span> &#123;</span><br><span class="line">    fi, err := os.Stat(source)</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> !fi.IsDir() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> errors.New(source + <span class="hljs-string">" is not a directory"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    err = os.MkdirAll(dest, fi.Mode())</span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    entries, err := ioutil.ReadDir(source)</span><br><span class="line">    <span class="hljs-keyword">for</span> _, entry := <span class="hljs-keyword">range</span> entries &#123;</span><br><span class="line">        sfp := filepath.Join(source, entry.Name())</span><br><span class="line">        dfp := filepath.Join(dest, entry.Name())</span><br><span class="line">        <span class="hljs-keyword">if</span> entry.IsDir() &#123;</span><br><span class="line">            err = copyDir(sfp, dfp)</span><br><span class="line">            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">                fmt.Println(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            err = copyFile(sfp, dfp)</span><br><span class="line">            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">                fmt.Println(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3. 时间处理</span></span><br><span class="line"><span class="hljs-comment">// import "time"</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestTimeDemo</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// Parse</span></span><br><span class="line">    postDate, err := time.Parse(<span class="hljs-string">"2006-01-02 15:04:05"</span>, <span class="hljs-string">"2015-09-30 19:19:00"</span>)</span><br><span class="line">    fmt.Println(postDate, err)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Format</span></span><br><span class="line">    assert.Equal(t, <span class="hljs-string">"2015/Sep/30 07:19:00"</span>, postDate.Format(<span class="hljs-string">"2006/Jan/02 03:04:05"</span>))</span><br><span class="line">    assert.Equal(t, <span class="hljs-string">"2015-09-30T19:19:00Z"</span>, postDate.Format(time.RFC3339))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 4. 正则表达式</span></span><br><span class="line"><span class="hljs-comment">// import "regexp"</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestRegexp</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// 查找匹配</span></span><br><span class="line">    re := regexp.MustCompile(<span class="hljs-string">`(\d+)-(\d+)`</span>)</span><br><span class="line">    r := re.FindAllStringSubmatch(<span class="hljs-string">"123-666"</span>, <span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line">    assert.Equal(t, <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(r))</span><br><span class="line">    assert.Equal(t, <span class="hljs-string">"123"</span>, r[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])</span><br><span class="line">    assert.Equal(t, <span class="hljs-string">"666"</span>, r[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">    helloWorld()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要用的时候看一看！&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04安装配置GPU版TensorFlow</title>
    <link href="http://yoursite.com/2017/12/25/ubuntu-tensorflow-gpu/"/>
    <id>http://yoursite.com/2017/12/25/ubuntu-tensorflow-gpu/</id>
    <published>2017-12-25T05:18:54.000Z</published>
    <updated>2018-04-12T14:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本工作"><a href="#基本工作" class="headerlink" title="基本工作"></a><strong>基本工作</strong></h3><ol><li>更新系统（不更新好像也行）</li></ol><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade -y</span><br><span class="line">sudo apt-get dist-upgrade -y</span><br></pre></td></tr></table></figure><ol start="2"><li>安装依赖</li></ol><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 先执行uname -r，查看结果，比如4.4.0-45-generic，然后再执行</span></span><br><span class="line">sudo apt-get install build-essential pkg-config xserver-xorg-dev linux-headers-4.4.0-45-generic(此处记得替换)</span><br></pre></td></tr></table></figure><ol start="3"><li>禁用nouveau内核</li></ol><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/modprobe.d/blacklist.conf </span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 添加如下内容：</span></span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist lbm-nouveau</span><br><span class="line">options nouveau modeset=0</span><br><span class="line">alias nouveau off</span><br><span class="line">alias lbm-nouveau off</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 然后运行以下命令即可：</span></span><br><span class="line">echo options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf</span><br><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure><p>重启之后即可禁用nouveau，可以运行<code>$ lsmod | grep nouveau</code>检查是否禁用成功，如果运行后没有任何输出，则代表禁用成功。</p><a id="more"></a><h3 id="安装显卡驱动"><a href="#安装显卡驱动" class="headerlink" title="安装显卡驱动"></a><strong>安装显卡驱动</strong></h3><p>首先<code>lspci</code>查看自己的GPU显卡版本，然后到<a href="http://www.nvidia.com/Download/index.aspx" target="_blank" rel="noopener">Nvidia官方网站</a>下载对应版本的显卡驱动，之后执行命令<code>sudo service lightdm stop</code>，通过Ctrl+Alt+F1进入init3(文本模式)，输入账号密码进行安装，执行以下命令：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x NVIDIA-Linux-x86_64-375.51.run</span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-375.51.run -no-x-check -no-nouveau-check -no-opengl-files</span><br></pre></td></tr></table></figure><p>除了dkms和open-gl选no，其他一路yes和回车就搞定了。</p><p>然后<code>sudo service lightdm start</code>，可以通过<code>sudo nvidia-xconfig -query-gpu-info</code>和<code>nvidia-smi</code>查看GPU信息。</p><h3 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a><strong>安装CUDA</strong></h3><p>到<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">CUDA</a>官网下载，这里下载的是8.0版本CUDA，然后执行命令安装：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x cuda_8.0.61_375.26_linux.run</span><br><span class="line">sudo ./cuda_8.0.61_375.26_linux.run</span><br></pre></td></tr></table></figure><p>除了OpenGL选no，还有Nvidia选no（因为已经装过了，不然会冲突），其他一路yes和回车就搞定了。如果报错比如X server is running或者unable to locate the kernel的问题，确保之前提到的准备工作全部做好，绝对不会有问题。</p><p>安装好CUDA之后，添加环境变量：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile </span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 添加内容如下：</span></span><br><span class="line">PATH=/usr/local/cuda-8.0/bin:$PATH   </span><br><span class="line">export PATH  </span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:/lib  </span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 保存退出，使之立即生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 添加lib库路径</span></span><br><span class="line">sudo vim /etc/ld.so.conf.d/cuda.conf  </span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 添加内容如下：</span></span><br><span class="line">/usr/local/cuda-8.0/lib64 </span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 保存退出，使之立即生效</span></span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 验证安装结果，有服务器信息和cuda版本号即可</span></span><br><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><h3 id="安装cuDNN"><a href="#安装cuDNN" class="headerlink" title="安装cuDNN"></a><strong>安装cuDNN</strong></h3><p>在<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">cuDNN官网</a>上下载，需要注册，必须下载<a href="https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v5.1/prod_20161129/7.5/cudnn-7.5-linux-x64-v5.1-tgz" target="_blank" rel="noopener">cuDNN v5.1 Library for Linux</a>版本，执行以下命令：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf cudnn-8.0-linux-x64-v5.1.tgz</span><br><span class="line">cd cuda</span><br><span class="line">sudo cp lib64/lib* /usr/local/cuda/lib64/  </span><br><span class="line">sudo cp include/cudnn.h /usr/local/cuda/include/ </span><br><span class="line">cd /usr/local/cuda/lib64/  </span><br><span class="line">sudo rm -rf libcudnn.so libcudnn.so.5  </span><br><span class="line">sudo ln -s libcudnn.so.5.1.10 libcudnn.so.5  </span><br><span class="line">sudo ln -s libcudnn.so.5 libcudnn.so</span><br></pre></td></tr></table></figure><p>然后可以测试CUDA等是否成功配置，编译运行某个sample：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/cuda/samples</span><br><span class="line">sudo make all -j4</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 全部编译完成之后</span></span><br><span class="line">cd /usr/local/cuda/samples/bin/x86_64/linux/release</span><br><span class="line">./deviceQuery# 如果显示有可用的GPU即为成功</span><br></pre></td></tr></table></figure><h3 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a><strong>安装anaconda</strong></h3><p>下载anaconda，执行命令<code>bash Anaconda3-4.3.1-Linux-x86_64.sh</code> ，然后一路yes即可。</p><h3 id="安装TensorFlow"><a href="#安装TensorFlow" class="headerlink" title="安装TensorFlow**"></a>安装TensorFlow**</h3><p>打开一个新的terminal，选择用conda创建独立环境：</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tensor_test python==3.5</span><br><span class="line">source activate tensor_test</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 直接用pip安装</span></span><br><span class="line">pip install tensorflow-gpu==1.2</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 进入python环境测试</span></span><br><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 如下可以查看tensorflow的版本号和安装路径</span></span><br><span class="line">tf.__version__</span><br><span class="line">tf.__path__</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> 如果报ImportError:libcudnn.so.5 cannot open shared object file: No such file or directory, 直接暴力解决</span></span><br><span class="line">sudo cp /usr/local/cuda-8.0/lib64/libcudnn.so /usr/local/lib/libcudnn.so &amp;&amp; sudo ldconfig</span><br><span class="line">sudo cp /usr/local/cuda-8.0/lib64/libcudnn.so.5 /usr/local/lib/libcudnn.so.5 &amp;&amp; sudo ldconfig</span><br><span class="line">sudo cp /usr/local/cuda-8.0/lib64/libcudnn.so.5.1.5 /usr/local/lib/libcudnn.so.5.1.5 &amp;&amp; sudo ldconfig</span><br></pre></td></tr></table></figure><p>一定注意版本，tensorflow-gpu最新版本为1.4，但是会报<code>libcudnn.so.6:cannot open sharedobject file: No such file or directory</code>错误，说明1.4已经开始去找cudnn6了，但我们这是5.1，理论上可以换用cudnn6，算了，还是做一个没有梦想的咸鱼吧，能用就行，换用tensorflow-gpu 1.2版本完美解决。</p><p>重重困难，还得靠自己解决。（Fuck the Christmas!!!）</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本工作&quot;&gt;&lt;a href=&quot;#基本工作&quot; class=&quot;headerlink&quot; title=&quot;基本工作&quot;&gt;&lt;/a&gt;&lt;strong&gt;基本工作&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;更新系统（不更新好像也行）&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get upgrade -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get dist-upgrade -y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;安装依赖&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;hljs-bash&quot;&gt; 先执行uname -r，查看结果，比如4.4.0-45-generic，然后再执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install build-essential pkg-config xserver-xorg-dev linux-headers-4.4.0-45-generic(此处记得替换)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;禁用nouveau内核&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/modprobe.d/blacklist.conf &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;hljs-bash&quot;&gt; 添加如下内容：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blacklist nouveau&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blacklist lbm-nouveau&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options nouveau modeset=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias nouveau off&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias lbm-nouveau off&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;hljs-bash&quot;&gt; 然后运行以下命令即可：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo update-initramfs -u&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;重启之后即可禁用nouveau，可以运行&lt;code&gt;$ lsmod | grep nouveau&lt;/code&gt;检查是否禁用成功，如果运行后没有任何输出，则代表禁用成功。&lt;/p&gt;
    
    </summary>
    
      <category term="TensorFlow" scheme="http://yoursite.com/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow, GPU, Ubuntu, Cuda" scheme="http://yoursite.com/tags/TensorFlow-GPU-Ubuntu-Cuda/"/>
    
  </entry>
  
  <entry>
    <title>centos7部署django应用</title>
    <link href="http://yoursite.com/2017/12/22/centos-django/"/>
    <id>http://yoursite.com/2017/12/22/centos-django/</id>
    <published>2017-12-22T05:18:54.000Z</published>
    <updated>2017-12-22T11:49:28.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-安装python3-6"><a href="#1-安装python3-6" class="headerlink" title="1. 安装python3.6"></a>1. 安装python3.6</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 获取</span><br><span class="line"></span><br><span class="line">wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz</span><br><span class="line">tar -xzvf Python-3.6.3.tgz -C  /tmp</span><br><span class="line">cd  /tmp/Python-3.6.3/</span><br><span class="line"></span><br><span class="line">2. 把Python3.6安装到 /usr/local 目录</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make</span><br><span class="line">make altinstall</span><br><span class="line"></span><br><span class="line">3. 更改/usr/bin/python链接</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/bin/python3.6 /usr/bin/python3</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2-mariadb"><a href="#2-mariadb" class="headerlink" title="2. mariadb"></a>2. mariadb</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1. 安装</span><br><span class="line"></span><br><span class="line">    sudo yum install mariadb-server</span><br><span class="line">2. 启动， 重启</span><br><span class="line"></span><br><span class="line">    sudo systemctl start mariadb</span><br><span class="line">    sudo systemctl restart mariadb</span><br><span class="line"></span><br><span class="line">3. 设置bind-ip</span><br><span class="line"></span><br><span class="line">    vim /etc/my.cnf</span><br><span class="line">    在 [mysqld]:</span><br><span class="line">        下面加一行</span><br><span class="line">        bind-address = 0.0.0.0</span><br><span class="line"></span><br><span class="line">4. 设置外部ip可以访问</span><br><span class="line"></span><br><span class="line">    先进入mysql才能运行下面命令:</span><br><span class="line">        mysql 直接进入就行</span><br><span class="line"></span><br><span class="line">    GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">    FLUSH PRIVILEGES</span><br><span class="line"></span><br><span class="line">5. 设置阿里云的对外端口</span><br><span class="line"></span><br><span class="line">   视频中有讲解这部分</span><br><span class="line"></span><br><span class="line">6. 安装mysqlclient出问题</span><br><span class="line"></span><br><span class="line">    centos 7：</span><br><span class="line">        yum install python-devel mariadb-devel -y</span><br><span class="line"></span><br><span class="line">    ubuntu：</span><br><span class="line">        sudo apt-get install libmysqlclient-dev</span><br><span class="line"></span><br><span class="line">    然后：</span><br><span class="line">        pip install mysqlclient</span><br></pre></td></tr></table></figure><h5 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3. 安装nginx"></a>3. 安装nginx</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7</span><br></pre></td></tr></table></figure><h5 id="4-安装virtualenvwrapper"><a href="#4-安装virtualenvwrapper" class="headerlink" title="4. 安装virtualenvwrapper"></a>4. 安装virtualenvwrapper</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools python-devel</span><br><span class="line">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 编辑.bashrc文件</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; 重新加载.bashrc文件</span><br><span class="line">&gt; source  ~/.bashrc</span><br><span class="line">&gt;</span><br><span class="line">&gt; 新建虚拟环境</span><br><span class="line">&gt; mkvirtualenv mxonline</span><br><span class="line">&gt;</span><br><span class="line">&gt; 进入虚拟环境 </span><br><span class="line">&gt; workon mxonline</span><br><span class="line">&gt;</span><br><span class="line">&gt; 安装pip包</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过 pip freeze &gt; requirements.txt 将本地的虚拟环境安装包相信信息导出来</span><br><span class="line"></span><br><span class="line">然后将requirements.txt文件上传到服务器之后运行：</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">安装依赖包</span><br></pre></td></tr></table></figure><h5 id="5-安装uwsgi"><a href="#5-安装uwsgi" class="headerlink" title="5. 安装uwsgi"></a>5. 安装uwsgi</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><h5 id="6-测试uwsgi"><a href="#6-测试uwsgi" class="headerlink" title="6. 测试uwsgi"></a>6. 测试uwsgi</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --module MxOnline.wsgi</span><br></pre></td></tr></table></figure><h5 id="7-配置nginx"><a href="#7-配置nginx" class="headerlink" title="7. 配置nginx"></a>7. 配置nginx</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">新建uc_nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># the upstream component nginx needs to connect to</span><br><span class="line">upstream django &#123;</span><br><span class="line"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span><br><span class="line">server 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)</span><br><span class="line">&#125;</span><br><span class="line"># configuration of the server</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"># the port your site will be served on</span><br><span class="line">listen      80;</span><br><span class="line"># the domain name it will serve for</span><br><span class="line">server_name 你的ip地址 ; # substitute your machine&apos;s IP address or FQDN</span><br><span class="line">charset     utf-8;</span><br><span class="line"></span><br><span class="line"># max upload size</span><br><span class="line">client_max_body_size 75M;   # adjust to taste</span><br><span class="line"></span><br><span class="line"># Django media</span><br><span class="line">location /media  &#123;</span><br><span class="line">    alias 你的目录/Mxonline/media;  # 指向django的media目录</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /static &#123;</span><br><span class="line">    alias 你的目录/Mxonline/static; # 指向django的static目录</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Finally, send all non-media requests to the Django server.</span><br><span class="line">location / &#123;</span><br><span class="line">    uwsgi_pass  django;</span><br><span class="line">    include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-将该配置文件加入到nginx的启动配置文件中"><a href="#8-将该配置文件加入到nginx的启动配置文件中" class="headerlink" title="8. 将该配置文件加入到nginx的启动配置文件中"></a>8. 将该配置文件加入到nginx的启动配置文件中</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s 你的目录/Mxonline/conf/nginx/uc_nginx.conf /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure><h5 id="8-拉取所有需要的static-file-到同一个目录"><a href="#8-拉取所有需要的static-file-到同一个目录" class="headerlink" title="8. 拉取所有需要的static file 到同一个目录"></a>8. 拉取所有需要的static file 到同一个目录</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在django的setting文件中，添加下面一行内容：</span><br><span class="line"></span><br><span class="line">    STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)</span><br><span class="line">运行命令</span><br><span class="line">    python manage.py collectstatic</span><br></pre></td></tr></table></figure><h5 id="9-运行nginx"><a href="#9-运行nginx" class="headerlink" title="9. 运行nginx"></a>9. 运行nginx</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/sbin/nginx</span><br></pre></td></tr></table></figure><p>这里需要注意 一定是直接用nginx命令启动， 不要用systemctl启动nginx不然会有权限问题</p><h5 id="10-通过配置文件启动uwsgi"><a href="#10-通过配置文件启动uwsgi" class="headerlink" title="10. 通过配置文件启动uwsgi"></a>10. 通过配置文件启动uwsgi</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">新建uwsgi.ini 配置文件， 内容如下：</span><br><span class="line"></span><br><span class="line">    # mysite_uwsgi.ini file</span><br><span class="line">    [uwsgi]</span><br><span class="line"></span><br><span class="line">    # Django-related settings</span><br><span class="line">    # the base directory (full path)</span><br><span class="line">    chdir           = /home/bobby/Projects/MxOnline</span><br><span class="line">    # Django&apos;s wsgi file</span><br><span class="line">    module          = MxOnline.wsgi</span><br><span class="line">    # the virtualenv (full path)</span><br><span class="line"></span><br><span class="line">    # process-related settings</span><br><span class="line">    # master</span><br><span class="line">    master          = true</span><br><span class="line">    # maximum number of worker processes</span><br><span class="line">    processes       = 10</span><br><span class="line">    # the socket (use the full path to be safe</span><br><span class="line">    socket          = 127.0.0.1:8000</span><br><span class="line">    # ... with appropriate permissions - may be needed</span><br><span class="line">    # chmod-socket    = 664</span><br><span class="line">    # clear environment on exit</span><br><span class="line">    vacuum          = true</span><br><span class="line">    virtualenv = /home/bobby/.virtualenvs/mxonline</span><br><span class="line"></span><br><span class="line">    logto = /tmp/mylog.log</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">    chdir： 表示需要操作的目录，也就是项目的目录</span><br><span class="line">    module： wsgi文件的路径</span><br><span class="line">    processes： 进程数</span><br><span class="line">    virtualenv：虚拟环境的目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">workon mxonline</span><br><span class="line">uwsgi -i 你的目录/Mxonline/conf/uwsgi.ini &amp;</span><br></pre></td></tr></table></figure><h5 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://你的ip地址/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-安装python3-6&quot;&gt;&lt;a href=&quot;#1-安装python3-6&quot; class=&quot;headerlink&quot; title=&quot;1. 安装python3.6&quot;&gt;&lt;/a&gt;1. 安装python3.6&lt;/h5&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. 获取&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xzvf Python-3.6.3.tgz -C  /tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd  /tmp/Python-3.6.3/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 把Python3.6安装到 /usr/local 目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure --prefix=/usr/local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make altinstall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 更改/usr/bin/python链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ln -s /usr/local/bin/python3.6 /usr/bin/python3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django, Centos, nginx, uwsgi" scheme="http://yoursite.com/tags/Django-Centos-nginx-uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API设计指南</title>
    <link href="http://yoursite.com/2017/12/07/RESTful-API/"/>
    <id>http://yoursite.com/2017/12/07/RESTful-API/</id>
    <published>2017-12-07T06:20:54.000Z</published>
    <updated>2017-12-07T06:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。</p><p>因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现<a href="http://www.google.com.hk/search?q=API+first" target="_blank" rel="noopener">“API First”</a>的设计思想。<a href="http://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">RESTful API</a>是目前比较成熟的一套互联网应用程序的API设计理论。</p><a id="more"></a><p><img src="http://image.beekka.com/blog/2014/bg2014052201.png" alt="RESTful API"></p><h2 id="一、协议"><a href="#一、协议" class="headerlink" title="一、协议"></a>一、协议</h2><p>API与用户的通信协议，总是使用<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">HTTPs协议</a>。</p><h2 id="二、域名"><a href="#二、域名" class="headerlink" title="二、域名"></a>二、域名</h2><p>应该尽量将API部署在专用域名之下。</p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; https://api.example.com</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; https://example.org/api/</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="三、版本（Versioning）"><a href="#三、版本（Versioning）" class="headerlink" title="三、版本（Versioning）"></a>三、版本（Versioning）</h2><p>应该将API的版本号放入URL。</p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; https://api.example.com/v1/</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。<a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="noopener">Github</a>采用这种做法。</p><h2 id="四、路径（Endpoint）"><a href="#四、路径（Endpoint）" class="headerlink" title="四、路径（Endpoint）"></a>四、路径（Endpoint）</h2><p>路径又称”终点”（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><blockquote><ul><li><a href="https://api.example.com/v1/zoos" target="_blank" rel="noopener">https://api.example.com/v1/zoos</a></li><li><a href="https://api.example.com/v1/animals" target="_blank" rel="noopener">https://api.example.com/v1/animals</a></li><li><a href="https://api.example.com/v1/employees" target="_blank" rel="noopener">https://api.example.com/v1/employees</a></li></ul></blockquote><h2 id="五、HTTP动词"><a href="#五、HTTP动词" class="headerlink" title="五、HTTP动词"></a>五、HTTP动词</h2><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><blockquote><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul></blockquote><p>还有两个不常用的HTTP动词。</p><blockquote><ul><li>HEAD：获取资源的元数据。</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li></ul></blockquote><p>下面是一些例子。</p><blockquote><ul><li>GET /zoos：列出所有动物园</li><li>POST /zoos：新建一个动物园</li><li>GET /zoos/ID：获取某个指定动物园的信息</li><li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li><li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li><li>DELETE /zoos/ID：删除某个动物园</li><li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li><li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li></ul></blockquote><h2 id="六、过滤信息（Filtering）"><a href="#六、过滤信息（Filtering）" class="headerlink" title="六、过滤信息（Filtering）"></a>六、过滤信息（Filtering）</h2><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><blockquote><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul></blockquote><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h2 id="七、状态码（Status-Codes）"><a href="#七、状态码（Status-Codes）" class="headerlink" title="七、状态码（Status Codes）"></a>七、状态码（Status Codes）</h2><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><blockquote><ul><li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li><li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li><li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li><li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li><li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li><li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li><li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li><li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li><li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li><li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li><li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li><li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li></ul></blockquote><p>状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">这里</a>。</p><h2 id="八、错误处理（Error-handling）"><a href="#八、错误处理（Error-handling）" class="headerlink" title="八、错误处理（Error handling）"></a>八、错误处理（Error handling）</h2><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;</span><br><span class="line">&gt;     error: &quot;Invalid API key&quot;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="九、返回结果"><a href="#九、返回结果" class="headerlink" title="九、返回结果"></a>九、返回结果</h2><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><blockquote><ul><li>GET /collection：返回资源对象的列表（数组）</li><li>GET /collection/resource：返回单个资源对象</li><li>POST /collection：返回新生成的资源对象</li><li>PUT /collection/resource：返回完整的资源对象</li><li>PATCH /collection/resource：返回完整的资源对象</li><li>DELETE /collection/resource：返回一个空文档</li></ul></blockquote><h2 id="十、Hypermedia-API"><a href="#十、Hypermedia-API" class="headerlink" title="十、Hypermedia API"></a>十、Hypermedia API</h2><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;&quot;link&quot;: &#123;</span><br><span class="line">&gt;   &quot;rel&quot;:   &quot;collection https://www.example.com/zoos&quot;,</span><br><span class="line">&gt;   &quot;href&quot;:  &quot;https://api.example.com/zoos&quot;,</span><br><span class="line">&gt;   &quot;title&quot;: &quot;List of zoos&quot;,</span><br><span class="line">&gt;   &quot;type&quot;:  &quot;application/vnd.yourformat+json&quot;</span><br><span class="line">&gt; &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为<a href="http://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="noopener">HATEOAS</a>。Github的API就是这种设计，访问<a href="https://api.github.com/" target="_blank" rel="noopener">api.github.com</a>会得到一个所有可用API的网址列表。</p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;</span><br><span class="line">&gt;   &quot;current_user_url&quot;: &quot;https://api.github.com/user&quot;,</span><br><span class="line">&gt;   &quot;authorizations_url&quot;: &quot;https://api.github.com/authorizations&quot;,</span><br><span class="line">&gt;   // ...</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="https://api.github.com/user" target="_blank" rel="noopener">api.github.com/user</a>，然后就得到了下面结果。</p><blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;</span><br><span class="line">&gt;   &quot;message&quot;: &quot;Requires authentication&quot;,</span><br><span class="line">&gt;   &quot;documentation_url&quot;: &quot;https://developer.github.com/v3&quot;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h2 id="十一、其他"><a href="#十一、其他" class="headerlink" title="十一、其他"></a>十一、其他</h2><p>（1）API的身份认证应该使用<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0</a>框架。</p><p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p><p>（完）</p><p>注：原文地址：<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。&lt;/p&gt;
&lt;p&gt;因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现&lt;a href=&quot;http://www.google.com.hk/search?q=API+first&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“API First”&lt;/a&gt;的设计思想。&lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RESTful API&lt;/a&gt;是目前比较成熟的一套互联网应用程序的API设计理论。&lt;/p&gt;
    
    </summary>
    
      <category term="RESTful" scheme="http://yoursite.com/categories/RESTful/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>理解RESTful架构</title>
    <link href="http://yoursite.com/2017/12/07/RESTful/"/>
    <id>http://yoursite.com/2017/12/07/RESTful/</id>
    <published>2017-12-07T06:18:54.000Z</published>
    <updated>2017-12-07T06:25:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>越来越多的人开始意识到，<strong>网站即软件</strong>，而且是一种新型的软件。</p><p>这种”互联网软件”采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点。</p><p>网站开发，完全可以采用软件开发的模式。但是传统上，软件和网络是两个不同的领域，很少有交集；软件开发主要针对单机环境，网络则主要研究系统之间的通信。互联网的兴起，使得这两个领域开始融合，<strong>现在我们必须考虑，如何开发在互联网环境中使用的软件。</strong></p><a id="more"></a><p><img src="http://image.beekka.com/blog/201109/bg2011091202.jpg" alt="img"></p><p>RESTful架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p><p>但是，到底什么是RESTful架构，并不是一个容易说清楚的问题。下面，我就谈谈我理解的RESTful架构。</p><p><strong>一、起源</strong></p><p>REST这个词，是<a href="http://en.wikipedia.org/wiki/Roy_Fielding" target="_blank" rel="noopener">Roy Thomas Fielding</a>在他2000年的<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">博士论文</a>中提出的。</p><p><img src="http://image.beekka.com/blog/201109/bg2011091201.jpg" alt="img"></p><p>Fielding是一个非常重要的人，他是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席。所以，他的这篇论文一经发表，就引起了关注，并且立即对互联网开发产生了深远的影响。</p><p>他这样介绍论文的写作目的：</p><blockquote><p>“本文研究计算机科学两大前沿—-软件和网络—-的交叉点。长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观地评估不同的设计选择对系统行为的影响。而相反地，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响。<strong>我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。</strong>“</p><p>(This dissertation explores a junction on the frontiers of two research disciplines in computer science: software and networking. Software research has long been concerned with the categorization of software designs and the development of design methodologies, but has rarely been able to objectively evaluate the impact of various design choices on system behavior. Networking research, in contrast, is focused on the details of generic communication behavior between systems and improving the performance of particular communication techniques, often ignoring the fact that changing the interaction style of an application can have more impact on performance than the communication protocols used for that interaction. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. )</p></blockquote><p><strong>二、名称</strong></p><p>Fielding将他对互联网软件的架构原则，定名为REST，即Representational State Transfer的缩写。我对这个词组的翻译是”表现层状态转化”。</p><p>如果一个架构符合REST原则，就称它为RESTful架构。</p><p><strong>要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义。</strong>如果你把这个名称搞懂了，也就不难体会REST是一种什么样的设计。</p><p><strong>三、资源（Resources）</strong></p><p>REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p><p><strong>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。</strong>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p><p>所谓”上网”，就是与互联网上一系列的”资源”互动，调用它的URI。</p><p><strong>四、表现层（Representation）</strong></p><p>“资源”是一种信息实体，它可以有多种外在表现形式。<strong>我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。</strong></p><p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p><p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p><p><strong>五、状态转化（State Transfer）</strong></p><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p><p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，<strong>如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</strong></p><p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：<strong>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</strong></p><p><strong>六、综述</strong></p><p>综合上面的解释，我们总结一下什么是RESTful架构：</p><p>　　（1）每一个URI代表一种资源；</p><p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p><p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p><p><strong>七、误区</strong></p><p>RESTful架构有一些典型的设计误区。</p><p><strong>最常见的一种设计错误，就是URI包含动词。</strong>因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p><p>举例来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。</p><p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：</p><blockquote><p>　　POST /accounts/1/transfer/500/to/2</p></blockquote><p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p><blockquote><p>　　POST /transaction HTTP/1.1<br>　　Host: 127.0.0.1<br>　　from=1&amp;to=2&amp;amount=500.00</p></blockquote><p><strong>另一个设计误区，就是在URI中加入版本号</strong>：</p><blockquote><p>　　<a href="http://www.example.com/app/1.0/foo" target="_blank" rel="noopener">http://www.example.com/app/1.0/foo</a></p><p>　　<a href="http://www.example.com/app/1.1/foo" target="_blank" rel="noopener">http://www.example.com/app/1.1/foo</a></p><p>　　<a href="http://www.example.com/app/2.0/foo" target="_blank" rel="noopener">http://www.example.com/app/2.0/foo</a></p></blockquote><p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分（参见<a href="http://www.informit.com/articles/article.aspx?p=1566460" target="_blank" rel="noopener">Versioning REST Services</a>）：</p><blockquote><p>　　Accept: vnd.example-com.foo+json; version=1.0</p><p>　　Accept: vnd.example-com.foo+json; version=1.1</p><p>　　Accept: vnd.example-com.foo+json; version=2.0</p></blockquote><p>（完）</p><p>注：原文地址：<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;越来越多的人开始意识到，&lt;strong&gt;网站即软件&lt;/strong&gt;，而且是一种新型的软件。&lt;/p&gt;
&lt;p&gt;这种”互联网软件”采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点。&lt;/p&gt;
&lt;p&gt;网站开发，完全可以采用软件开发的模式。但是传统上，软件和网络是两个不同的领域，很少有交集；软件开发主要针对单机环境，网络则主要研究系统之间的通信。互联网的兴起，使得这两个领域开始融合，&lt;strong&gt;现在我们必须考虑，如何开发在互联网环境中使用的软件。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="RESTful" scheme="http://yoursite.com/categories/RESTful/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离之JWT用户认证</title>
    <link href="http://yoursite.com/2017/12/06/jwt/"/>
    <id>http://yoursite.com/2017/12/06/jwt/</id>
    <published>2017-12-06T05:18:54.000Z</published>
    <updated>2017-12-07T01:44:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离开发时为什么需要用户认证呢？原因是由于HTTP协定是不储存状态的(stateless)，这意味着当我们透过帐号密码验证一个使用者时，当下一个request请求时它就把刚刚的资料忘了。于是我们的程序就不知道谁是谁，就要再验证一次。所以为了保证系统安全，我们就需要验证用户否处于登录状态。</p><a id="more"></a><h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><p>前后端分离通过Restful API进行数据交互时，如何验证用户的登录信息及权限。在原来的项目中，使用的是最传统也是最简单的方式，前端登录，后端根据用户信息生成一个<code>token</code>，并保存这个 <code>token</code> 和对应的用户id到数据库或Session中，接着把 <code>token</code> 传给用户，存入浏览器 cookie，之后浏览器请求带上这个cookie，后端根据这个cookie值来查询用户，验证是否过期。</p><p>但这样做问题就很多，如果我们的页面出现了 XSS 漏洞，由于 cookie 可以被 JavaScript 读取，XSS 漏洞会导致用户 token 泄露，而作为后端识别用户的标识，cookie 的泄露意味着用户信息不再安全。尽管我们通过转义输出内容，使用 CDN 等可以尽量避免 XSS 注入，但谁也不能保证在大型的项目中不会出现这个问题。</p><p>在设置 cookie 的时候，其实你还可以设置 httpOnly 以及 secure 项。设置 httpOnly 后 cookie 将不能被 JS 读取，浏览器会自动的把它加在请求的 header 当中，设置 secure 的话，cookie 就只允许通过 HTTPS 传输。secure 选项可以过滤掉一些使用 HTTP 协议的 XSS 注入，但并不能完全阻止。</p><p>httpOnly 选项使得 JS 不能读取到 cookie，那么 XSS 注入的问题也基本不用担心了。但设置 httpOnly 就带来了另一个问题，就是很容易的被 XSRF，即跨站请求伪造。当你浏览器开着这个页面的时候，另一个页面可以很容易的跨站请求这个页面的内容。因为 cookie 默认被发了出去。</p><p>另外，如果将验证信息保存在数据库中，后端每次都需要根据<code>token</code>查出用户<code>id</code>，这就增加了数据库的查询和存储开销。若把验证信息保存在session中，有加大了服务器端的存储压力。那我们可不可以不要服务器去查询呢？如果我们生成<code>token</code>遵循一定的规律，比如我们使用对称加密算法来加密用户<code>id</code>形成<code>token</code>，那么服务端以后其实只要解密该<code>token</code>就可以知道用户的<code>id</code>是什么了。不过呢，我只是举个例子而已，要是真这么做，只要你的对称加密算法泄露了，其他人可以通过这种加密方式进行伪造<code>token</code>，那么所有用户信息都不再安全了。恩，那用非对称加密算法来做呢，其实现在有个规范就是这样做的，就是我们接下来要介绍的 JWT。</p><h3 id="Json-Web-Token（JWT）"><a href="#Json-Web-Token（JWT）" class="headerlink" title="Json Web Token（JWT）"></a>Json Web Token（JWT）</h3><p>JWT 是一个开放标准(RFC 7519)，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名。它具备两个特点：</p><ul><li><p>简洁(Compact)</p><p>  可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快</p></li><li><p>自包含(Self-contained)</p><p>  负载中包含了所有用户所需要的信息，避免了多次查询数据库</p></li></ul><h4 id="JWT-组成"><a href="#JWT-组成" class="headerlink" title="JWT 组成"></a>JWT 组成</h4><p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fbv54tfilmj31120b2wl9.jpg" alt="img"></p><ul><li>Header 头部</li></ul><p>头部包含了两部分，token 类型和采用的加密算法</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会使用 Base64 编码组成 JWT 结构的第一部分,如果你使用Node.js，可以用Node.js的包base64url来得到这个字符串。</p><blockquote><p>Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。</p></blockquote><ul><li>Payload 负载</li></ul><p>这部分就是我们存放信息的地方了，你可以把用户 ID 等信息放在这里，JWT 规范里面对这部分有进行了比较详细的介绍，常用的由 iss（签发者），exp（过期时间），sub（面向的用户），aud（接收方），iat（签发时间）。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;iss&quot;: &quot;lion1ou JWT&quot;,</span><br><span class="line">    &quot;iat&quot;: 1441593502,</span><br><span class="line">    &quot;exp&quot;: 1441594722,</span><br><span class="line">    &quot;aud&quot;: &quot;www.example.com&quot;,</span><br><span class="line">    &quot;sub&quot;: &quot;lion1ou@163.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，它会使用 Base64 编码组成 JWT 结构的第二部分</p><ul><li>Signature 签名</li></ul><p>前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过。</p><p>三个部分通过<code>.</code>连接在一起就是我们的 JWT 了，它可能长这个样子，长度貌似和你的加密算法和私钥有关系。</p><p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code>.<code>eyJpZCI6IjU3ZmVmMTY0ZTU0YWY2NGZmYzUzZGJkNSIsInhzcmYiOiI0ZWE1YzUwOGE2NTY2ZTc2MjQwNTQzZjhmZWIwNmZkNDU3Nzc3YmUzOTU0OWM0MDE2NDM2YWZkYTY1ZDIzMzBlIiwiaWF0IjoxNDc2NDI3OTMzfQ</code>.<code>PA3QjeyZSUh7H0GfE0vJaKW4LjKJuC3dVLQiY4hii8s</code></p><p>其实到这一步可能就有人会想了，HTTP 请求总会带上 token，这样这个 token 传来传去占用不必要的带宽啊。如果你这么想了，那你可以去了解下 HTTP2，HTTP2 对头部进行了压缩，相信也解决了这个问题。</p><ul><li>签名的目的</li></ul><p>最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</p><ul><li>信息暴露</li></ul><p>在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？</p><p>是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第三方通过Base64解码就能很快地知道你的密码了。</p><p>因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系统，甚至实现Web应用的单点登录。</p><h3 id="JWT-使用"><a href="#JWT-使用" class="headerlink" title="JWT 使用"></a>JWT 使用</h3><p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fbv63pzqocj30pj0h8t9m.jpg" alt="img"></p><ol><li>首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。</li><li>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT。形成的JWT就是一个形同lll.zzz.xxx的字符串。</li><li>后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。</li><li>前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题)</li><li>后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。</li><li>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</li></ol><h3 id="和Session方式存储id的差异"><a href="#和Session方式存储id的差异" class="headerlink" title="和Session方式存储id的差异"></a>和Session方式存储id的差异</h3><p>Session方式存储用户id的最大弊病在于Session是存储在服务器端的，所以需要占用大量服务器内存，对于较大型应用而言可能还要保存许多的状态。一般而言，大型应用还需要借助一些KV数据库和一系列缓存机制来实现Session的存储。</p><p>而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。除了用户id之外，还可以存储其他的和用户相关的信息，例如该用户是否是管理员、用户所在的分组等。虽说JWT方式让服务器有一些计算压力（例如加密、编码和解码），但是这些压力相比磁盘存储而言可能就不算什么了。具体是否采用，需要在不同场景下用数据说话。</p><ul><li>单点登录</li></ul><p>Session方式来存储用户id，一开始用户的Session只会存储在一台服务器上。对于有多个子域名的站点，每个子域名至少会对应一台不同的服务器，例如：<code>www.taobao.com</code>，<code>nv.taobao.com</code>，<code>nz.taobao.com</code>，<code>login.taobao.com</code>。所以如果要实现在<code>login.taobao.com</code>登录后，在其他的子域名下依然可以取到Session，这要求我们在多台服务器上同步Session。使用JWT的方式则没有这个问题的存在，因为用户的状态已经被传送到了客户端。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>JWT的主要作用在于（一）可附带用户信息，后端直接通过JWT获取相关信息。（二）使用本地保存，通过HTTP Header中的Authorization位提交验证。但其实关于JWT存放到哪里一直有很多讨论，有人说存放到本地存储，有人说存 cookie。个人偏向于放在本地存储，如果你有什么意见和看法欢迎提出。</p><p>注：原文地址：<a href="http://lion1ou.win/2017/01/18/" target="_blank" rel="noopener">http://lion1ou.win/2017/01/18/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前后端分离开发时为什么需要用户认证呢？原因是由于HTTP协定是不储存状态的(stateless)，这意味着当我们透过帐号密码验证一个使用者时，当下一个request请求时它就把刚刚的资料忘了。于是我们的程序就不知道谁是谁，就要再验证一次。所以为了保证系统安全，我们就需要验证用户否处于登录状态。&lt;/p&gt;
    
    </summary>
    
      <category term="JWT" scheme="http://yoursite.com/categories/JWT/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>django从请求到返回都经历了什么</title>
    <link href="http://yoursite.com/2017/12/06/django-request-process/"/>
    <id>http://yoursite.com/2017/12/06/django-request-process/</id>
    <published>2017-12-06T05:18:54.000Z</published>
    <updated>2017-12-07T01:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="从runserver说起"><a href="#从runserver说起" class="headerlink" title="从runserver说起"></a>从runserver说起</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruserver是使用django自己的web server，主要用于开发和调试中， 部署到线上环境一般使用nginx+uwsgi模式</span><br></pre></td></tr></table></figure><h5 id="manage-py-探秘"><a href="#manage-py-探秘" class="headerlink" title="manage.py 探秘"></a>manage.py 探秘</h5><a id="more"></a><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">看一下manager.py的源码，你会发现上面的命令其实是通过Django的execute_from_command_line方法执行了内部实现的runserver命令，那么现在看一下runserver具体做了什么。。</span><br><span class="line">通过源码分析可知， ruserserver主要完成两件事：</span><br><span class="line"></span><br><span class="line">1). 解析参数，并通过django.core.servers.basehttp.get_internal_wsgi_application方法获取wsgi handler;</span><br><span class="line">2). 根据ip_address和port生成一个WSGIServer对象，接受用户请求</span><br></pre></td></tr></table></figure><p>get_internal_wsgi_application的源码如下：</p><p><a href="http://of66as8gb.bkt.clouddn.com/blog/20161017/174541324.png" target="_blank" rel="noopener"><img src="http://of66as8gb.bkt.clouddn.com/blog/20161017/174541324.png" alt="image"></a></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过上面的代码我们可以知道，Django会先根据settings中的WSGI_APPLICATION来获取handler；</span><br><span class="line">在创建project的时候，Django会默认创建一个wsgi.py文件，而settings中的WSGI_APPLICATION配置也会默认指向这个文件。看一下这个wsgi.py文件，其实它也和上面的逻辑一样，最终调用get_wsgi_application实现。</span><br></pre></td></tr></table></figure><h5 id="django-http请求处理流程"><a href="#django-http请求处理流程" class="headerlink" title="django http请求处理流程"></a>django http请求处理流程</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Django和其他Web框架一样，HTTP的处理流程基本类似：接受request，返回response内容。Django的具体处理流程大致如下：</span><br></pre></td></tr></table></figure><h6 id="1-加载settings-py"><a href="#1-加载settings-py" class="headerlink" title="1. 加载settings.py"></a>1. 加载settings.py</h6><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在通过django-admin.py创建project的时候，Django会自动生成默认的settings文件和manager.py等文件，在创建WSGIServer之前会执行下面的引用：</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">上面引用在执行时，会读取os.environ中的DJANGO_SETTINGS_MODULE配置，加载项目配置文件，生成settings对象。所以，在manager.py文件中你可以看到，在获取WSGIServer之前，会先将project的settings路径加到os路径中。</span><br></pre></td></tr></table></figure><h6 id="2-创建WSGIServer"><a href="#2-创建WSGIServer" class="headerlink" title="2. 创建WSGIServer"></a>2. 创建WSGIServer</h6><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">不管是使用runserver还是uWSGI运行Django项目，在启动时都会调用django.core.servers.basehttp中的run()方法</span><br><span class="line">创建一个django.core.servers.basehttp.WSGIServer类的实例，之后调用其serve_forever()方法启动HTTP服务。run方法的源码如下：</span><br><span class="line"></span><br><span class="line">def run(addr, port, wsgi_handler, ipv6=False, threading=False):</span><br><span class="line">    server_address = (addr, port)</span><br><span class="line">    if threading:</span><br><span class="line">        httpd_cls = type(str(&apos;WSGIServer&apos;), (socketserver.ThreadingMixIn, WSGIServer), &#123;&#125;)</span><br><span class="line">    else:</span><br><span class="line">        httpd_cls = WSGIServer</span><br><span class="line">    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)</span><br><span class="line">    if threading:</span><br><span class="line">        # ThreadingMixIn.daemon_threads indicates how threads will behave on an</span><br><span class="line">        # abrupt shutdown; like quitting the server by the user or restarting</span><br><span class="line">        # by the auto-reloader. True means the server will not wait for thread</span><br><span class="line">        # termination before it quits. This will make auto-reloader faster</span><br><span class="line">        # and will prevent the need to kill the server manually if a thread</span><br><span class="line">        # isn&apos;t terminating correctly.</span><br><span class="line">        httpd.daemon_threads = True</span><br><span class="line">    httpd.set_app(wsgi_handler)</span><br><span class="line">    httpd.serve_forever()</span><br><span class="line"></span><br><span class="line">如上，我们可以看到：在创建WSGIServer实例的时候会指定HTTP请求的Handler，</span><br><span class="line">上述代码使用WSGIRequestHandler。当用户的HTTP请求到达服务器时，</span><br><span class="line">WSGIServer会创建WSGIRequestHandler实例，使用其handler方法来处理HTTP请求(其实最终是调用wsgiref.handlers.BaseHandler中的run方法处理)。</span><br><span class="line">WSGIServer通过set_app方法设置一个可调用(callable)的对象作为application，上面提到的handler方法最终会调用设置的application处理request，并返回response。</span><br><span class="line"></span><br><span class="line">其中，WSGIServer继承自wsgiref.simple_server.WSGIServer，而WSGIRequestHandler继承自wsgiref.simple_server.WSGIRequestHandler，wsgiref是Python标准库给出的WSGI的参考实现。其源码可自行到wsgiref参看，这里不再细说。</span><br></pre></td></tr></table></figure><h6 id="3-处理Request"><a href="#3-处理Request" class="headerlink" title="3. 处理Request"></a>3. 处理Request</h6><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第二步中说到的application，在Django中一般是django.core.handlers.wsgi.WSGIHandler对象，WSGIHandler继承自django.core.handlers.base.BaseHandler，这个是Django处理request的核心逻辑，它会创建一个WSGIRequest实例，而WSGIRequest是从http.HttpRequest继承而来</span><br></pre></td></tr></table></figure><h6 id="4-返回Response"><a href="#4-返回Response" class="headerlink" title="4. 返回Response"></a>4. 返回Response</h6><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上面提到的BaseHandler中有个get_response方法，该方法会先加载Django项目的ROOT_URLCONF，然后根据url规则找到对应的view方法(类)，view逻辑会根据request实例生成并返回具体的response。</span><br><span class="line"></span><br><span class="line">在Django返回结果之后，第二步中提到wsgiref.handlers.BaseHandler.run方法会调用finish_response结束请求，并将内容返回给用户</span><br></pre></td></tr></table></figure><h5 id="Django处理Request的详细流程"><a href="#Django处理Request的详细流程" class="headerlink" title="Django处理Request的详细流程"></a>Django处理Request的详细流程</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先给大家分享两个网上看到的Django流程图：</span><br></pre></td></tr></table></figure><p><a href="http://of66as8gb.bkt.clouddn.com/blog/20161017/174911486.png" target="_blank" rel="noopener"><img src="http://of66as8gb.bkt.clouddn.com/blog/20161017/174911486.png" alt="mark"></a><br>​                        流程图一</p><p><a href="http://of66as8gb.bkt.clouddn.com/blog/20161017/180016921.png" target="_blank" rel="noopener"><img src="http://of66as8gb.bkt.clouddn.com/blog/20161017/180016921.png" alt="image"></a><br>流程图二</p><p>上面的两张流程图可以大致描述Django处理request的流程，按照流程图2的标注，可以分为以下几个步骤：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. 用户通过浏览器请求一个页面</span><br><span class="line"></span><br><span class="line">2.请求到达Request Middlewares，中间件对request做一些预处理或者直接response请求</span><br><span class="line">3.URLConf通过urls.py文件和请求的URL找到相应的View</span><br><span class="line">4.View Middlewares被访问，它同样可以对request做一些处理或者直接返回response</span><br><span class="line">5.调用View中的函数</span><br><span class="line">6.View中的方法可以选择性的通过Models访问底层的数据</span><br><span class="line">7.所有的Model-to-DB的交互都是通过manager完成的</span><br><span class="line">8.如果需要，Views可以使用一个特殊的Context</span><br><span class="line">9.Context被传给Template用来生成页面</span><br><span class="line">    a.Template使用Filters和Tags去渲染输出</span><br><span class="line">    b.输出被返回到View</span><br><span class="line">    c.HTTPResponse被发送到Response Middlewares</span><br><span class="line">    d.任何Response Middlewares都可以丰富response或者返回一个完全不同的response</span><br><span class="line">    e.Response返回到浏览器，呈现给用户</span><br><span class="line"></span><br><span class="line">上述流程中最主要的几个部分分别是：Middleware(中间件，包括request, view, exception, response)，URLConf(url映射关系)，Template(模板系统)，下面一一介绍一下。</span><br></pre></td></tr></table></figure><h5 id="1-Middleware-中间件"><a href="#1-Middleware-中间件" class="headerlink" title="1. Middleware(中间件)"></a>1. Middleware(中间件)</h5><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Middleware并不是Django所独有的东西，在其他的Web框架中也有这种概念。在Django中，Middleware可以渗入处理流程的四个阶段：request，view，response和exception，相应的，在每个Middleware类中都有rocess_request，process_view， process_response 和 process_exception这四个方法。你可以定义其中任意一个活多个方法，这取决于你希望该Middleware作用于哪个处理阶段。每个方法都可以直接返回response对象。</span><br><span class="line"></span><br><span class="line">Middleware是在Django BaseHandler的load_middleware方法执行时加载的，加载之后会建立四个列表作为处理器的实例变量：</span><br><span class="line"></span><br><span class="line">_request_middleware：process_request方法的列表</span><br><span class="line"></span><br><span class="line">_view_middleware：process_view方法的列表</span><br><span class="line"></span><br><span class="line">_response_middleware：process_response方法的列表</span><br><span class="line"></span><br><span class="line">_exception_middleware：process_exception方法的列表</span><br><span class="line"></span><br><span class="line">Django的中间件是在其配置文件(settings.py)的MIDDLEWARE_CLASSES元组中定义的。在MIDDLEWARE_CLASSES中，中间件组件用字符串表示：指向中间件类名的完整Python路径。例如</span><br><span class="line"></span><br><span class="line">`MIDDLEWARE_CLASSES = [</span><br><span class="line">    &apos;django.middleware.security.SecurityMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.auth.middleware.SessionAuthenticationMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</span><br><span class="line">]`</span><br><span class="line"></span><br><span class="line">Django项目的安装并不强制要求任何中间件，如果你愿意，MIDDLEWARE_CLASSES可以为空。中间件出现的顺序非常重要：在request和view的处理阶段，Django按照MIDDLEWARE_CLASSES中出现的顺序来应用中间件，而在response和exception异常处理阶段，Django则按逆序来调用它们。也就是说，Django将MIDDLEWARE_CLASSES视为view函数外层的顺序包装子：在request阶段按顺序从上到下穿过，而在response则反过来。以下这张图可以更好地帮助你理解：</span><br></pre></td></tr></table></figure><p><a href="http://of66as8gb.bkt.clouddn.com/blog/20161017/180754931.png" target="_blank" rel="noopener"><img src="http://of66as8gb.bkt.clouddn.com/blog/20161017/180754931.png" alt="image"></a></p><ol><li>URLConf(URL映射)</li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果处理request的中间件都没有直接返回response，那么Django会去解析用户请求的URL。URLconf就是Django所支撑网站的目录。它的本质是URL模式以及要为该URL模式调用的视图函数之间的映射表。通过这种方式可以告诉Django，对于这个URL调用这段代码，对于那个URL调用那段代码。具体的，在Django项目的配置文件中有ROOT_URLCONF常量，这个常量加上根目录&quot;/&quot;，作为参数来创建django.core.urlresolvers.RegexURLResolver的实例，然后通过它的resolve方法解析用户请求的URL，找到第一个匹配的view。</span><br><span class="line"></span><br><span class="line">有关urlconf的内容，大家可以参考 [理解curlConf]()</span><br></pre></td></tr></table></figure><ol><li>Template(模板)</li></ol><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大部分web框架都有自己的Template(模板)系统，Django也是。但是，Django模板不同于Mako模板和jinja2模板，在Django模板不能直接写Python代码，只能通过额外的定义filter和template tag实现。由于本文主要介绍Django流程，模板内容就不过多介绍。</span><br></pre></td></tr></table></figure><p>注：原文地址：<a href="http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;从runserver说起&quot;&gt;&lt;a href=&quot;#从runserver说起&quot; class=&quot;headerlink&quot; title=&quot;从runserver说起&quot;&gt;&lt;/a&gt;从runserver说起&lt;/h5&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ruserver是使用django自己的web server，主要用于开发和调试中， 部署到线上环境一般使用nginx+uwsgi模式&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;manage-py-探秘&quot;&gt;&lt;a href=&quot;#manage-py-探秘&quot; class=&quot;headerlink&quot; title=&quot;manage.py 探秘&quot;&gt;&lt;/a&gt;manage.py 探秘&lt;/h5&gt;
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>随笔12.05</title>
    <link href="http://yoursite.com/2017/12/05/essay-12-05/"/>
    <id>http://yoursite.com/2017/12/05/essay-12-05/</id>
    <published>2017-12-05T05:18:54.000Z</published>
    <updated>2017-12-07T01:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近不想写这些无聊的blog了~心情也不好，准备搞一搞Java，emmmmm，又回到最初的起点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近不想写这些无聊的blog了~心情也不好，准备搞一搞Java，emmmmm，又回到最初的起点。&lt;/p&gt;

      
    
    </summary>
    
      <category term="essay" scheme="http://yoursite.com/categories/essay/"/>
    
    
      <category term="12.05" scheme="http://yoursite.com/tags/12-05/"/>
    
  </entry>
  
</feed>
