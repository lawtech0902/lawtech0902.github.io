<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LawTech&#39;s Blog</title>
  <subtitle>不破不立</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-07T06:23:11.503Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LawTech.</name>
    <email>584563542@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RESTful API设计指南</title>
    <link href="http://yoursite.com/2017/12/07/RESTful-API/"/>
    <id>http://yoursite.com/2017/12/07/RESTful-API/</id>
    <published>2017-12-07T06:20:54.000Z</published>
    <updated>2017-12-07T06:23:11.503Z</updated>
    
    <content type="html"><![CDATA[<p>网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。</p>
<p>因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现<a href="http://www.google.com.hk/search?q=API+first" target="_blank" rel="external">“API First”</a>的设计思想。<a href="http://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="external">RESTful API</a>是目前比较成熟的一套互联网应用程序的API设计理论。</p>
<p><img src="http://image.beekka.com/blog/2014/bg2014052201.png" alt="RESTful API"></p>
<h2 id="一、协议"><a href="#一、协议" class="headerlink" title="一、协议"></a>一、协议</h2><p>API与用户的通信协议，总是使用<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="external">HTTPs协议</a>。</p>
<h2 id="二、域名"><a href="#二、域名" class="headerlink" title="二、域名"></a>二、域名</h2><p>应该尽量将API部署在专用域名之下。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; https://api.example.com</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; https://example.org/api/</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="三、版本（Versioning）"><a href="#三、版本（Versioning）" class="headerlink" title="三、版本（Versioning）"></a>三、版本（Versioning）</h2><p>应该将API的版本号放入URL。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; https://api.example.com/v1/</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。<a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="external">Github</a>采用这种做法。</p>
<h2 id="四、路径（Endpoint）"><a href="#四、路径（Endpoint）" class="headerlink" title="四、路径（Endpoint）"></a>四、路径（Endpoint）</h2><p>路径又称”终点”（endpoint），表示API的具体网址。</p>
<p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p>
<p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p>
<blockquote>
<ul>
<li><a href="https://api.example.com/v1/zoos" target="_blank" rel="external">https://api.example.com/v1/zoos</a></li>
<li><a href="https://api.example.com/v1/animals" target="_blank" rel="external">https://api.example.com/v1/animals</a></li>
<li><a href="https://api.example.com/v1/employees" target="_blank" rel="external">https://api.example.com/v1/employees</a></li>
</ul>
</blockquote>
<h2 id="五、HTTP动词"><a href="#五、HTTP动词" class="headerlink" title="五、HTTP动词"></a>五、HTTP动词</h2><p>对于资源的具体操作类型，由HTTP动词表示。</p>
<p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p>
<blockquote>
<ul>
<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>
<li>POST（CREATE）：在服务器新建一个资源。</li>
<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>
<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>
<li>DELETE（DELETE）：从服务器删除资源。</li>
</ul>
</blockquote>
<p>还有两个不常用的HTTP动词。</p>
<blockquote>
<ul>
<li>HEAD：获取资源的元数据。</li>
<li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li>
</ul>
</blockquote>
<p>下面是一些例子。</p>
<blockquote>
<ul>
<li>GET /zoos：列出所有动物园</li>
<li>POST /zoos：新建一个动物园</li>
<li>GET /zoos/ID：获取某个指定动物园的信息</li>
<li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li>
<li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>
<li>DELETE /zoos/ID：删除某个动物园</li>
<li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li>
<li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>
</ul>
</blockquote>
<h2 id="六、过滤信息（Filtering）"><a href="#六、过滤信息（Filtering）" class="headerlink" title="六、过滤信息（Filtering）"></a>六、过滤信息（Filtering）</h2><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p>
<p>下面是一些常见的参数。</p>
<blockquote>
<ul>
<li>?limit=10：指定返回记录的数量</li>
<li>?offset=10：指定返回记录的开始位置。</li>
<li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li>
<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li>
<li>?animal_type_id=1：指定筛选条件</li>
</ul>
</blockquote>
<p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p>
<h2 id="七、状态码（Status-Codes）"><a href="#七、状态码（Status-Codes）" class="headerlink" title="七、状态码（Status Codes）"></a>七、状态码（Status Codes）</h2><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>
<blockquote>
<ul>
<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li>
<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>
<li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li>
<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>
<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>
<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>
<li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>
<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>
<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>
<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>
<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>
<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li>
</ul>
</blockquote>
<p>状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">这里</a>。</p>
<h2 id="八、错误处理（Error-handling）"><a href="#八、错误处理（Error-handling）" class="headerlink" title="八、错误处理（Error handling）"></a>八、错误处理（Error handling）</h2><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;     error: &quot;Invalid API key&quot;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="九、返回结果"><a href="#九、返回结果" class="headerlink" title="九、返回结果"></a>九、返回结果</h2><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>
<blockquote>
<ul>
<li>GET /collection：返回资源对象的列表（数组）</li>
<li>GET /collection/resource：返回单个资源对象</li>
<li>POST /collection：返回新生成的资源对象</li>
<li>PUT /collection/resource：返回完整的资源对象</li>
<li>PATCH /collection/resource：返回完整的资源对象</li>
<li>DELETE /collection/resource：返回一个空文档</li>
</ul>
</blockquote>
<h2 id="十、Hypermedia-API"><a href="#十、Hypermedia-API" class="headerlink" title="十、Hypermedia API"></a>十、Hypermedia API</h2><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>
<p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;&quot;link&quot;: &#123;</div><div class="line">&gt;   &quot;rel&quot;:   &quot;collection https://www.example.com/zoos&quot;,</div><div class="line">&gt;   &quot;href&quot;:  &quot;https://api.example.com/zoos&quot;,</div><div class="line">&gt;   &quot;title&quot;: &quot;List of zoos&quot;,</div><div class="line">&gt;   &quot;type&quot;:  &quot;application/vnd.yourformat+json&quot;</div><div class="line">&gt; &#125;&#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p>
<p>Hypermedia API的设计被称为<a href="http://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="external">HATEOAS</a>。Github的API就是这种设计，访问<a href="https://api.github.com/" target="_blank" rel="external">api.github.com</a>会得到一个所有可用API的网址列表。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;current_user_url&quot;: &quot;https://api.github.com/user&quot;,</div><div class="line">&gt;   &quot;authorizations_url&quot;: &quot;https://api.github.com/authorizations&quot;,</div><div class="line">&gt;   // ...</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="https://api.github.com/user" target="_blank" rel="external">api.github.com/user</a>，然后就得到了下面结果。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; &#123;</div><div class="line">&gt;   &quot;message&quot;: &quot;Requires authentication&quot;,</div><div class="line">&gt;   &quot;documentation_url&quot;: &quot;https://developer.github.com/v3&quot;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p>
<h2 id="十一、其他"><a href="#十一、其他" class="headerlink" title="十一、其他"></a>十一、其他</h2><p>（1）API的身份认证应该使用<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">OAuth 2.0</a>框架。</p>
<p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p>
<p>（完）</p>
<p>注：原文地址：<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。&lt;/p&gt;
&lt;p&gt;因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现&lt;a href=&quot;http://www.goo
    
    </summary>
    
      <category term="RESTful" scheme="http://yoursite.com/categories/RESTful/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>理解RESTful架构</title>
    <link href="http://yoursite.com/2017/12/07/RESTful/"/>
    <id>http://yoursite.com/2017/12/07/RESTful/</id>
    <published>2017-12-07T06:18:54.000Z</published>
    <updated>2017-12-07T06:16:14.594Z</updated>
    
    <content type="html"><![CDATA[<p>越来越多的人开始意识到，<strong>网站即软件</strong>，而且是一种新型的软件。</p>
<p>这种”互联网软件”采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点。</p>
<p>网站开发，完全可以采用软件开发的模式。但是传统上，软件和网络是两个不同的领域，很少有交集；软件开发主要针对单机环境，网络则主要研究系统之间的通信。互联网的兴起，使得这两个领域开始融合，<strong>现在我们必须考虑，如何开发在互联网环境中使用的软件。</strong></p>
<p><img src="http://image.beekka.com/blog/201109/bg2011091202.jpg" alt="img"></p>
<p>RESTful架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p>
<p>但是，到底什么是RESTful架构，并不是一个容易说清楚的问题。下面，我就谈谈我理解的RESTful架构。</p>
<p><strong>一、起源</strong></p>
<p>REST这个词，是<a href="http://en.wikipedia.org/wiki/Roy_Fielding" target="_blank" rel="external">Roy Thomas Fielding</a>在他2000年的<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="external">博士论文</a>中提出的。</p>
<p><img src="http://image.beekka.com/blog/201109/bg2011091201.jpg" alt="img"></p>
<p>Fielding是一个非常重要的人，他是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席。所以，他的这篇论文一经发表，就引起了关注，并且立即对互联网开发产生了深远的影响。</p>
<p>他这样介绍论文的写作目的：</p>
<blockquote>
<p>“本文研究计算机科学两大前沿—-软件和网络—-的交叉点。长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观地评估不同的设计选择对系统行为的影响。而相反地，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响。<strong>我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。</strong>“</p>
<p>(This dissertation explores a junction on the frontiers of two research disciplines in computer science: software and networking. Software research has long been concerned with the categorization of software designs and the development of design methodologies, but has rarely been able to objectively evaluate the impact of various design choices on system behavior. Networking research, in contrast, is focused on the details of generic communication behavior between systems and improving the performance of particular communication techniques, often ignoring the fact that changing the interaction style of an application can have more impact on performance than the communication protocols used for that interaction. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. )</p>
</blockquote>
<p><strong>二、名称</strong></p>
<p>Fielding将他对互联网软件的架构原则，定名为REST，即Representational State Transfer的缩写。我对这个词组的翻译是”表现层状态转化”。</p>
<p>如果一个架构符合REST原则，就称它为RESTful架构。</p>
<p><strong>要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义。</strong>如果你把这个名称搞懂了，也就不难体会REST是一种什么样的设计。</p>
<p><strong>三、资源（Resources）</strong></p>
<p>REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p>
<p><strong>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。</strong>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p>
<p>所谓”上网”，就是与互联网上一系列的”资源”互动，调用它的URI。</p>
<p><strong>四、表现层（Representation）</strong></p>
<p>“资源”是一种信息实体，它可以有多种外在表现形式。<strong>我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。</strong></p>
<p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p>
<p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p>
<p><strong>五、状态转化（State Transfer）</strong></p>
<p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p>
<p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，<strong>如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</strong></p>
<p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：<strong>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</strong></p>
<p><strong>六、综述</strong></p>
<p>综合上面的解释，我们总结一下什么是RESTful架构：</p>
<p>　　（1）每一个URI代表一种资源；</p>
<p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p>
<p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p>
<p><strong>七、误区</strong></p>
<p>RESTful架构有一些典型的设计误区。</p>
<p><strong>最常见的一种设计错误，就是URI包含动词。</strong>因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p>
<p>举例来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。</p>
<p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：</p>
<blockquote>
<p>　　POST /accounts/1/transfer/500/to/2</p>
</blockquote>
<p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p>
<blockquote>
<p>　　POST /transaction HTTP/1.1<br>　　Host: 127.0.0.1<br>　　from=1&amp;to=2&amp;amount=500.00</p>
</blockquote>
<p><strong>另一个设计误区，就是在URI中加入版本号</strong>：</p>
<blockquote>
<p>　　<a href="http://www.example.com/app/1.0/foo" target="_blank" rel="external">http://www.example.com/app/1.0/foo</a></p>
<p>　　<a href="http://www.example.com/app/1.1/foo" target="_blank" rel="external">http://www.example.com/app/1.1/foo</a></p>
<p>　　<a href="http://www.example.com/app/2.0/foo" target="_blank" rel="external">http://www.example.com/app/2.0/foo</a></p>
</blockquote>
<p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分（参见<a href="http://www.informit.com/articles/article.aspx?p=1566460" target="_blank" rel="external">Versioning REST Services</a>）：</p>
<blockquote>
<p>　　Accept: vnd.example-com.foo+json; version=1.0</p>
<p>　　Accept: vnd.example-com.foo+json; version=1.1</p>
<p>　　Accept: vnd.example-com.foo+json; version=2.0</p>
</blockquote>
<p>（完）</p>
<p>注：原文地址：<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;越来越多的人开始意识到，&lt;strong&gt;网站即软件&lt;/strong&gt;，而且是一种新型的软件。&lt;/p&gt;
&lt;p&gt;这种”互联网软件”采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点。&lt;/p&gt;
&lt;p&gt;网站开发，完全可以
    
    </summary>
    
      <category term="RESTful" scheme="http://yoursite.com/categories/RESTful/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>django从请求到返回都经历了什么</title>
    <link href="http://yoursite.com/2017/12/06/django-request-process/"/>
    <id>http://yoursite.com/2017/12/06/django-request-process/</id>
    <published>2017-12-06T05:18:54.000Z</published>
    <updated>2017-12-07T01:44:17.860Z</updated>
    
    <content type="html"><![CDATA[<h5 id="从runserver说起"><a href="#从runserver说起" class="headerlink" title="从runserver说起"></a>从runserver说起</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruserver是使用django自己的web server，主要用于开发和调试中， 部署到线上环境一般使用nginx+uwsgi模式</div></pre></td></tr></table></figure>
<h5 id="manage-py-探秘"><a href="#manage-py-探秘" class="headerlink" title="manage.py 探秘"></a>manage.py 探秘</h5><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">看一下manager.py的源码，你会发现上面的命令其实是通过Django的execute_from_command_line方法执行了内部实现的runserver命令，那么现在看一下runserver具体做了什么。。</div><div class="line">通过源码分析可知， ruserserver主要完成两件事：</div><div class="line"></div><div class="line">1). 解析参数，并通过django.core.servers.basehttp.get_internal_wsgi_application方法获取wsgi handler;</div><div class="line">2). 根据ip_address和port生成一个WSGIServer对象，接受用户请求</div></pre></td></tr></table></figure>
<p>get_internal_wsgi_application的源码如下：</p>
<p><a href="http://of66as8gb.bkt.clouddn.com/blog/20161017/174541324.png" target="_blank" rel="external"><img src="http://of66as8gb.bkt.clouddn.com/blog/20161017/174541324.png" alt="image"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">通过上面的代码我们可以知道，Django会先根据settings中的WSGI_APPLICATION来获取handler；</div><div class="line">在创建project的时候，Django会默认创建一个wsgi.py文件，而settings中的WSGI_APPLICATION配置也会默认指向这个文件。看一下这个wsgi.py文件，其实它也和上面的逻辑一样，最终调用get_wsgi_application实现。</div></pre></td></tr></table></figure>
<h5 id="django-http请求处理流程"><a href="#django-http请求处理流程" class="headerlink" title="django http请求处理流程"></a>django http请求处理流程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Django和其他Web框架一样，HTTP的处理流程基本类似：接受request，返回response内容。Django的具体处理流程大致如下：</div></pre></td></tr></table></figure>
<h6 id="1-加载settings-py"><a href="#1-加载settings-py" class="headerlink" title="1. 加载settings.py"></a>1. 加载settings.py</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">在通过django-admin.py创建project的时候，Django会自动生成默认的settings文件和manager.py等文件，在创建WSGIServer之前会执行下面的引用：</div><div class="line"></div><div class="line">from django.conf import settings</div><div class="line"></div><div class="line">上面引用在执行时，会读取os.environ中的DJANGO_SETTINGS_MODULE配置，加载项目配置文件，生成settings对象。所以，在manager.py文件中你可以看到，在获取WSGIServer之前，会先将project的settings路径加到os路径中。</div></pre></td></tr></table></figure>
<h6 id="2-创建WSGIServer"><a href="#2-创建WSGIServer" class="headerlink" title="2. 创建WSGIServer"></a>2. 创建WSGIServer</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">不管是使用runserver还是uWSGI运行Django项目，在启动时都会调用django.core.servers.basehttp中的run()方法</div><div class="line">创建一个django.core.servers.basehttp.WSGIServer类的实例，之后调用其serve_forever()方法启动HTTP服务。run方法的源码如下：</div><div class="line"></div><div class="line">def run(addr, port, wsgi_handler, ipv6=False, threading=False):</div><div class="line">    server_address = (addr, port)</div><div class="line">    if threading:</div><div class="line">        httpd_cls = type(str(&apos;WSGIServer&apos;), (socketserver.ThreadingMixIn, WSGIServer), &#123;&#125;)</div><div class="line">    else:</div><div class="line">        httpd_cls = WSGIServer</div><div class="line">    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)</div><div class="line">    if threading:</div><div class="line">        # ThreadingMixIn.daemon_threads indicates how threads will behave on an</div><div class="line">        # abrupt shutdown; like quitting the server by the user or restarting</div><div class="line">        # by the auto-reloader. True means the server will not wait for thread</div><div class="line">        # termination before it quits. This will make auto-reloader faster</div><div class="line">        # and will prevent the need to kill the server manually if a thread</div><div class="line">        # isn&apos;t terminating correctly.</div><div class="line">        httpd.daemon_threads = True</div><div class="line">    httpd.set_app(wsgi_handler)</div><div class="line">    httpd.serve_forever()</div><div class="line"></div><div class="line">如上，我们可以看到：在创建WSGIServer实例的时候会指定HTTP请求的Handler，</div><div class="line">上述代码使用WSGIRequestHandler。当用户的HTTP请求到达服务器时，</div><div class="line">WSGIServer会创建WSGIRequestHandler实例，使用其handler方法来处理HTTP请求(其实最终是调用wsgiref.handlers.BaseHandler中的run方法处理)。</div><div class="line">WSGIServer通过set_app方法设置一个可调用(callable)的对象作为application，上面提到的handler方法最终会调用设置的application处理request，并返回response。</div><div class="line"></div><div class="line">其中，WSGIServer继承自wsgiref.simple_server.WSGIServer，而WSGIRequestHandler继承自wsgiref.simple_server.WSGIRequestHandler，wsgiref是Python标准库给出的WSGI的参考实现。其源码可自行到wsgiref参看，这里不再细说。</div></pre></td></tr></table></figure>
<h6 id="3-处理Request"><a href="#3-处理Request" class="headerlink" title="3. 处理Request"></a>3. 处理Request</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">第二步中说到的application，在Django中一般是django.core.handlers.wsgi.WSGIHandler对象，WSGIHandler继承自django.core.handlers.base.BaseHandler，这个是Django处理request的核心逻辑，它会创建一个WSGIRequest实例，而WSGIRequest是从http.HttpRequest继承而来</div></pre></td></tr></table></figure>
<h6 id="4-返回Response"><a href="#4-返回Response" class="headerlink" title="4. 返回Response"></a>4. 返回Response</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">上面提到的BaseHandler中有个get_response方法，该方法会先加载Django项目的ROOT_URLCONF，然后根据url规则找到对应的view方法(类)，view逻辑会根据request实例生成并返回具体的response。</div><div class="line"></div><div class="line">在Django返回结果之后，第二步中提到wsgiref.handlers.BaseHandler.run方法会调用finish_response结束请求，并将内容返回给用户</div></pre></td></tr></table></figure>
<h5 id="Django处理Request的详细流程"><a href="#Django处理Request的详细流程" class="headerlink" title="Django处理Request的详细流程"></a>Django处理Request的详细流程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">首先给大家分享两个网上看到的Django流程图：</div></pre></td></tr></table></figure>
<p><a href="http://of66as8gb.bkt.clouddn.com/blog/20161017/174911486.png" target="_blank" rel="external"><img src="http://of66as8gb.bkt.clouddn.com/blog/20161017/174911486.png" alt="mark"></a><br>​                        流程图一</p>
<p><a href="http://of66as8gb.bkt.clouddn.com/blog/20161017/180016921.png" target="_blank" rel="external"><img src="http://of66as8gb.bkt.clouddn.com/blog/20161017/180016921.png" alt="image"></a><br>流程图二</p>
<p>上面的两张流程图可以大致描述Django处理request的流程，按照流程图2的标注，可以分为以下几个步骤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1. 用户通过浏览器请求一个页面</div><div class="line"></div><div class="line">2.请求到达Request Middlewares，中间件对request做一些预处理或者直接response请求</div><div class="line">3.URLConf通过urls.py文件和请求的URL找到相应的View</div><div class="line">4.View Middlewares被访问，它同样可以对request做一些处理或者直接返回response</div><div class="line">5.调用View中的函数</div><div class="line">6.View中的方法可以选择性的通过Models访问底层的数据</div><div class="line">7.所有的Model-to-DB的交互都是通过manager完成的</div><div class="line">8.如果需要，Views可以使用一个特殊的Context</div><div class="line">9.Context被传给Template用来生成页面</div><div class="line">    a.Template使用Filters和Tags去渲染输出</div><div class="line">    b.输出被返回到View</div><div class="line">    c.HTTPResponse被发送到Response Middlewares</div><div class="line">    d.任何Response Middlewares都可以丰富response或者返回一个完全不同的response</div><div class="line">    e.Response返回到浏览器，呈现给用户</div><div class="line"></div><div class="line">上述流程中最主要的几个部分分别是：Middleware(中间件，包括request, view, exception, response)，URLConf(url映射关系)，Template(模板系统)，下面一一介绍一下。</div></pre></td></tr></table></figure>
<h5 id="1-Middleware-中间件"><a href="#1-Middleware-中间件" class="headerlink" title="1. Middleware(中间件)"></a>1. Middleware(中间件)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Middleware并不是Django所独有的东西，在其他的Web框架中也有这种概念。在Django中，Middleware可以渗入处理流程的四个阶段：request，view，response和exception，相应的，在每个Middleware类中都有rocess_request，process_view， process_response 和 process_exception这四个方法。你可以定义其中任意一个活多个方法，这取决于你希望该Middleware作用于哪个处理阶段。每个方法都可以直接返回response对象。</div><div class="line"></div><div class="line">Middleware是在Django BaseHandler的load_middleware方法执行时加载的，加载之后会建立四个列表作为处理器的实例变量：</div><div class="line"></div><div class="line">_request_middleware：process_request方法的列表</div><div class="line"></div><div class="line">_view_middleware：process_view方法的列表</div><div class="line"></div><div class="line">_response_middleware：process_response方法的列表</div><div class="line"></div><div class="line">_exception_middleware：process_exception方法的列表</div><div class="line"></div><div class="line">Django的中间件是在其配置文件(settings.py)的MIDDLEWARE_CLASSES元组中定义的。在MIDDLEWARE_CLASSES中，中间件组件用字符串表示：指向中间件类名的完整Python路径。例如</div><div class="line"></div><div class="line">`MIDDLEWARE_CLASSES = [</div><div class="line">    &apos;django.middleware.security.SecurityMiddleware&apos;,</div><div class="line">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</div><div class="line">    &apos;django.middleware.common.CommonMiddleware&apos;,</div><div class="line">    &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</div><div class="line">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</div><div class="line">    &apos;django.contrib.auth.middleware.SessionAuthenticationMiddleware&apos;,</div><div class="line">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</div><div class="line">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</div><div class="line">]`</div><div class="line"></div><div class="line">Django项目的安装并不强制要求任何中间件，如果你愿意，MIDDLEWARE_CLASSES可以为空。中间件出现的顺序非常重要：在request和view的处理阶段，Django按照MIDDLEWARE_CLASSES中出现的顺序来应用中间件，而在response和exception异常处理阶段，Django则按逆序来调用它们。也就是说，Django将MIDDLEWARE_CLASSES视为view函数外层的顺序包装子：在request阶段按顺序从上到下穿过，而在response则反过来。以下这张图可以更好地帮助你理解：</div></pre></td></tr></table></figure>
<p><a href="http://of66as8gb.bkt.clouddn.com/blog/20161017/180754931.png" target="_blank" rel="external"><img src="http://of66as8gb.bkt.clouddn.com/blog/20161017/180754931.png" alt="image"></a></p>
<ol>
<li>URLConf(URL映射)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果处理request的中间件都没有直接返回response，那么Django会去解析用户请求的URL。URLconf就是Django所支撑网站的目录。它的本质是URL模式以及要为该URL模式调用的视图函数之间的映射表。通过这种方式可以告诉Django，对于这个URL调用这段代码，对于那个URL调用那段代码。具体的，在Django项目的配置文件中有ROOT_URLCONF常量，这个常量加上根目录&quot;/&quot;，作为参数来创建django.core.urlresolvers.RegexURLResolver的实例，然后通过它的resolve方法解析用户请求的URL，找到第一个匹配的view。</div><div class="line"></div><div class="line">有关urlconf的内容，大家可以参考 [理解curlConf]()</div></pre></td></tr></table></figure>
<ol>
<li>Template(模板)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">大部分web框架都有自己的Template(模板)系统，Django也是。但是，Django模板不同于Mako模板和jinja2模板，在Django模板不能直接写Python代码，只能通过额外的定义filter和template tag实现。由于本文主要介绍Django流程，模板内容就不过多介绍。</div></pre></td></tr></table></figure>
<p>注：原文地址：<a href="http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="external">http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;从runserver说起&quot;&gt;&lt;a href=&quot;#从runserver说起&quot; class=&quot;headerlink&quot; title=&quot;从runserver说起&quot;&gt;&lt;/a&gt;从runserver说起&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ruserver是使用django自己的web server，主要用于开发和调试中， 部署到线上环境一般使用nginx+uwsgi模式&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;manage-py-探秘&quot;&gt;&lt;a href=&quot;#manage-py-探秘&quot; class=&quot;headerlink&quot; title=&quot;manage.py 探秘&quot;&gt;&lt;/a&gt;manage.py 探秘&lt;/h5&gt;
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离之JWT用户认证</title>
    <link href="http://yoursite.com/2017/12/06/jwt/"/>
    <id>http://yoursite.com/2017/12/06/jwt/</id>
    <published>2017-12-06T05:18:54.000Z</published>
    <updated>2017-12-07T01:44:29.883Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离开发时为什么需要用户认证呢？原因是由于HTTP协定是不储存状态的(stateless)，这意味着当我们透过帐号密码验证一个使用者时，当下一个request请求时它就把刚刚的资料忘了。于是我们的程序就不知道谁是谁，就要再验证一次。所以为了保证系统安全，我们就需要验证用户否处于登录状态。</p>
<a id="more"></a>
<h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><p>前后端分离通过Restful API进行数据交互时，如何验证用户的登录信息及权限。在原来的项目中，使用的是最传统也是最简单的方式，前端登录，后端根据用户信息生成一个<code>token</code>，并保存这个 <code>token</code> 和对应的用户id到数据库或Session中，接着把 <code>token</code> 传给用户，存入浏览器 cookie，之后浏览器请求带上这个cookie，后端根据这个cookie值来查询用户，验证是否过期。</p>
<p>但这样做问题就很多，如果我们的页面出现了 XSS 漏洞，由于 cookie 可以被 JavaScript 读取，XSS 漏洞会导致用户 token 泄露，而作为后端识别用户的标识，cookie 的泄露意味着用户信息不再安全。尽管我们通过转义输出内容，使用 CDN 等可以尽量避免 XSS 注入，但谁也不能保证在大型的项目中不会出现这个问题。</p>
<p>在设置 cookie 的时候，其实你还可以设置 httpOnly 以及 secure 项。设置 httpOnly 后 cookie 将不能被 JS 读取，浏览器会自动的把它加在请求的 header 当中，设置 secure 的话，cookie 就只允许通过 HTTPS 传输。secure 选项可以过滤掉一些使用 HTTP 协议的 XSS 注入，但并不能完全阻止。</p>
<p>httpOnly 选项使得 JS 不能读取到 cookie，那么 XSS 注入的问题也基本不用担心了。但设置 httpOnly 就带来了另一个问题，就是很容易的被 XSRF，即跨站请求伪造。当你浏览器开着这个页面的时候，另一个页面可以很容易的跨站请求这个页面的内容。因为 cookie 默认被发了出去。</p>
<p>另外，如果将验证信息保存在数据库中，后端每次都需要根据<code>token</code>查出用户<code>id</code>，这就增加了数据库的查询和存储开销。若把验证信息保存在session中，有加大了服务器端的存储压力。那我们可不可以不要服务器去查询呢？如果我们生成<code>token</code>遵循一定的规律，比如我们使用对称加密算法来加密用户<code>id</code>形成<code>token</code>，那么服务端以后其实只要解密该<code>token</code>就可以知道用户的<code>id</code>是什么了。不过呢，我只是举个例子而已，要是真这么做，只要你的对称加密算法泄露了，其他人可以通过这种加密方式进行伪造<code>token</code>，那么所有用户信息都不再安全了。恩，那用非对称加密算法来做呢，其实现在有个规范就是这样做的，就是我们接下来要介绍的 JWT。</p>
<h3 id="Json-Web-Token（JWT）"><a href="#Json-Web-Token（JWT）" class="headerlink" title="Json Web Token（JWT）"></a>Json Web Token（JWT）</h3><p>JWT 是一个开放标准(RFC 7519)，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名。它具备两个特点：</p>
<ul>
<li><p>简洁(Compact)</p>
<p>  可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快</p>
</li>
<li><p>自包含(Self-contained)</p>
<p>  负载中包含了所有用户所需要的信息，避免了多次查询数据库</p>
</li>
</ul>
<h4 id="JWT-组成"><a href="#JWT-组成" class="headerlink" title="JWT 组成"></a>JWT 组成</h4><p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fbv54tfilmj31120b2wl9.jpg" alt="img"></p>
<ul>
<li>Header 头部</li>
</ul>
<p>头部包含了两部分，token 类型和采用的加密算法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;alg&quot;: &quot;HS256&quot;,</div><div class="line">  &quot;typ&quot;: &quot;JWT&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它会使用 Base64 编码组成 JWT 结构的第一部分,如果你使用Node.js，可以用Node.js的包base64url来得到这个字符串。</p>
<blockquote>
<p>Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。</p>
</blockquote>
<ul>
<li>Payload 负载</li>
</ul>
<p>这部分就是我们存放信息的地方了，你可以把用户 ID 等信息放在这里，JWT 规范里面对这部分有进行了比较详细的介绍，常用的由 iss（签发者），exp（过期时间），sub（面向的用户），aud（接收方），iat（签发时间）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;iss&quot;: &quot;lion1ou JWT&quot;,</div><div class="line">    &quot;iat&quot;: 1441593502,</div><div class="line">    &quot;exp&quot;: 1441594722,</div><div class="line">    &quot;aud&quot;: &quot;www.example.com&quot;,</div><div class="line">    &quot;sub&quot;: &quot;lion1ou@163.com&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的，它会使用 Base64 编码组成 JWT 结构的第二部分</p>
<ul>
<li>Signature 签名</li>
</ul>
<p>前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过。</p>
<p>三个部分通过<code>.</code>连接在一起就是我们的 JWT 了，它可能长这个样子，长度貌似和你的加密算法和私钥有关系。</p>
<p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code>.<code>eyJpZCI6IjU3ZmVmMTY0ZTU0YWY2NGZmYzUzZGJkNSIsInhzcmYiOiI0ZWE1YzUwOGE2NTY2ZTc2MjQwNTQzZjhmZWIwNmZkNDU3Nzc3YmUzOTU0OWM0MDE2NDM2YWZkYTY1ZDIzMzBlIiwiaWF0IjoxNDc2NDI3OTMzfQ</code>.<code>PA3QjeyZSUh7H0GfE0vJaKW4LjKJuC3dVLQiY4hii8s</code></p>
<p>其实到这一步可能就有人会想了，HTTP 请求总会带上 token，这样这个 token 传来传去占用不必要的带宽啊。如果你这么想了，那你可以去了解下 HTTP2，HTTP2 对头部进行了压缩，相信也解决了这个问题。</p>
<ul>
<li>签名的目的</li>
</ul>
<p>最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</p>
<ul>
<li>信息暴露</li>
</ul>
<p>在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？</p>
<p>是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第三方通过Base64解码就能很快地知道你的密码了。</p>
<p>因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系统，甚至实现Web应用的单点登录。</p>
<h3 id="JWT-使用"><a href="#JWT-使用" class="headerlink" title="JWT 使用"></a>JWT 使用</h3><p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fbv63pzqocj30pj0h8t9m.jpg" alt="img"></p>
<ol>
<li>首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。</li>
<li>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT。形成的JWT就是一个形同lll.zzz.xxx的字符串。</li>
<li>后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。</li>
<li>前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题)</li>
<li>后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。</li>
<li>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</li>
</ol>
<h3 id="和Session方式存储id的差异"><a href="#和Session方式存储id的差异" class="headerlink" title="和Session方式存储id的差异"></a>和Session方式存储id的差异</h3><p>Session方式存储用户id的最大弊病在于Session是存储在服务器端的，所以需要占用大量服务器内存，对于较大型应用而言可能还要保存许多的状态。一般而言，大型应用还需要借助一些KV数据库和一系列缓存机制来实现Session的存储。</p>
<p>而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。除了用户id之外，还可以存储其他的和用户相关的信息，例如该用户是否是管理员、用户所在的分组等。虽说JWT方式让服务器有一些计算压力（例如加密、编码和解码），但是这些压力相比磁盘存储而言可能就不算什么了。具体是否采用，需要在不同场景下用数据说话。</p>
<ul>
<li>单点登录</li>
</ul>
<p>Session方式来存储用户id，一开始用户的Session只会存储在一台服务器上。对于有多个子域名的站点，每个子域名至少会对应一台不同的服务器，例如：<code>www.taobao.com</code>，<code>nv.taobao.com</code>，<code>nz.taobao.com</code>，<code>login.taobao.com</code>。所以如果要实现在<code>login.taobao.com</code>登录后，在其他的子域名下依然可以取到Session，这要求我们在多台服务器上同步Session。使用JWT的方式则没有这个问题的存在，因为用户的状态已经被传送到了客户端。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>JWT的主要作用在于（一）可附带用户信息，后端直接通过JWT获取相关信息。（二）使用本地保存，通过HTTP Header中的Authorization位提交验证。但其实关于JWT存放到哪里一直有很多讨论，有人说存放到本地存储，有人说存 cookie。个人偏向于放在本地存储，如果你有什么意见和看法欢迎提出。</p>
<p>注：原文地址：<a href="http://lion1ou.win/2017/01/18/" target="_blank" rel="external">http://lion1ou.win/2017/01/18/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前后端分离开发时为什么需要用户认证呢？原因是由于HTTP协定是不储存状态的(stateless)，这意味着当我们透过帐号密码验证一个使用者时，当下一个request请求时它就把刚刚的资料忘了。于是我们的程序就不知道谁是谁，就要再验证一次。所以为了保证系统安全，我们就需要验证用户否处于登录状态。&lt;/p&gt;
    
    </summary>
    
      <category term="JWT" scheme="http://yoursite.com/categories/JWT/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>随笔12.05</title>
    <link href="http://yoursite.com/2017/12/05/essay-12-05/"/>
    <id>http://yoursite.com/2017/12/05/essay-12-05/</id>
    <published>2017-12-05T05:18:54.000Z</published>
    <updated>2017-12-07T01:39:19.728Z</updated>
    
    <content type="html"><![CDATA[<p>最近不想写这些无聊的blog了~心情也不好，准备搞一搞Java，emmmmm，又回到最初的起点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近不想写这些无聊的blog了~心情也不好，准备搞一搞Java，emmmmm，又回到最初的起点。&lt;/p&gt;

    
    </summary>
    
      <category term="essay" scheme="http://yoursite.com/categories/essay/"/>
    
    
      <category term="12.05" scheme="http://yoursite.com/tags/12-05/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django REST Framework生鲜电商项目学习笔记——商品类别数据和Vue展示</title>
    <link href="http://yoursite.com/2017/11/27/vue-django-6-1/"/>
    <id>http://yoursite.com/2017/11/27/vue-django-6-1/</id>
    <published>2017-11-27T05:18:54.000Z</published>
    <updated>2017-12-01T06:09:34.941Z</updated>
    
    <content type="html"><![CDATA[<p>分为以下几个环节：</p>
<ol>
<li>商品类别数据接口</li>
<li>Vue展示商品分类数据</li>
<li>Vue展示商品列表页数据</li>
<li>Vue的商品搜索功能</li>
</ol>
<a id="more"></a>
<h2 id="商品类别数据接口"><a href="#商品类别数据接口" class="headerlink" title="商品类别数据接口"></a><strong>商品类别数据接口</strong></h2><p>在<code>views.py</code>中进行修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryViewset</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    list:</div><div class="line">        商品分类列表数据</div><div class="line">    """</div><div class="line">    queryset = GoodsCategory.objects.all()</div><div class="line">    serializer_class = CategorySerializer</div></pre></td></tr></table></figure>
<p>在<code>urls.py</code>中进行修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 配置category的url</span></div><div class="line">router.register(<span class="string">r'categorys'</span>, CategoryViewset, base_name=<span class="string">"categorys"</span>)</div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1flwo2uf2j8j31kw14612d.jpg" alt=""></p>
<p>此时所有的category按照id进行展示，并没有按照category级别有一个分级的层次结构，下面进行处理（利用serializer嵌套）：</p>
<p>在<code>views.py</code>中进行修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryViewset</span><span class="params">(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    list:</div><div class="line">        商品分类列表数据</div><div class="line">    """</div><div class="line">    queryset = GoodsCategory.objects.filter(category_type=<span class="number">1</span>)</div><div class="line">    serializer_class = CategorySerializer</div></pre></td></tr></table></figure>
<p>在<code>serializers.py</code>中进行修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer3</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = GoodsCategory</div><div class="line">        fields = <span class="string">'__all__'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer2</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    sub_cat = CategorySerializer3(many=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = GoodsCategory</div><div class="line">        fields = <span class="string">'__all__'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    sub_cat = CategorySerializer2(many=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = GoodsCategory</div><div class="line">        fields = <span class="string">'__all__'</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1flwqxgz516j31kw146n6j.jpg" alt=""></p>
<p>同时，在<code>CategoryViewset</code>中继承<code>mixins.RetrieveModelMixin</code>，可以让我们不用通过复杂的url配置即可获取指定的商品类别数据，例如获取id为24的商品类别数据只需要访问<code>http://localhost:8000/categorys/24/</code>即可：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1flwr9ux06bj31kw146k1a.jpg" alt=""></p>
<h2 id="Vue展示商品分类数据"><a href="#Vue展示商品分类数据" class="headerlink" title="Vue展示商品分类数据"></a><strong>Vue展示商品分类数据</strong></h2><p>在Vue项目源码<code>online-store/src/api/api.js</code>文件中修改：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> localhost = <span class="string">'http://127.0.0.1:8000'</span></div><div class="line"></div><div class="line">...</div><div class="line"><span class="comment">//获取商品类别信息</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> getCategory = <span class="function"><span class="params">params</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="string">'id'</span> <span class="keyword">in</span> params) &#123;</div><div class="line">        <span class="keyword">return</span> axios.get(<span class="string">`<span class="subst">$&#123;local_host&#125;</span>/categorys/`</span> + params.id + <span class="string">'/'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> axios.get(<span class="string">`<span class="subst">$&#123;local_host&#125;</span>/categorys/`</span>, params);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">...</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1flz2o3w8kmj30wi0p4te2.jpg" alt=""></p>
<p>运行项目，进行商品类别信息接口调试，访问<code>127.0.0.1:3000</code>，发现无法展示商品分类中的数据信息：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1flz2pzctykj31kw14gnpd.jpg" alt=""></p>
<p>出现了跨域的错误，所以需要设置一下解决drf的跨域问题。大体上，有两种解决跨域的方法：</p>
<ol>
<li>前端代理</li>
<li>服务器设置</li>
</ol>
<p>这里我们选择服务器设置的办法，利用<a href="https://github.com/ottoyiu/django-cors-headers" target="_blank" rel="external">django-cors-headers</a>来完成，按照文档进行安装配置，关键在于在<code>settings.py</code>文件中加上<code>CORS_ORIGIN_ALLOW_ALL = True</code>，重新运行之后，就发现数据出来了。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flzvqwint0j31kw14ge81.jpg" alt=""></p>
<p>可以看到Tab中并没有类目，我们在后台管理系统里稍作修改即可，比如修改生鲜食品，是否导航勾选为是，修改类别描述为生鲜食品：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1flzvwcptqtj31kw14gqbl.jpg" alt=""></p>
<p>刷新页面：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flzvxbo3thj30o401w3ym.jpg" alt=""></p>
<p>看到设置生效了，再多设置几个：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1flzwm165rrj31bc01ygm3.jpg" alt=""></p>
<h2 id="Vue展示商品列表页数据"><a href="#Vue展示商品列表页数据" class="headerlink" title="Vue展示商品列表页数据"></a><strong>Vue展示商品列表页数据</strong></h2><p>首先需要展示出商品类别所对应的商品列表数据（懒得写了，艹）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># goods/filters.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> django_filters</div><div class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsFilter</span><span class="params">(django_filters.rest_framework.FilterSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品的过滤类</div><div class="line">    """</div><div class="line">    pricemin = django_filters.NumberFilter(name=<span class="string">"shop_price"</span>, lookup_expr=<span class="string">"gte"</span>)</div><div class="line">    pricemax = django_filters.NumberFilter(name=<span class="string">"shop_price"</span>, lookup_expr=<span class="string">"lte"</span>)</div><div class="line">    top_category = django_filters.NumberFilter(method=<span class="string">'top_category_filter'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top_category_filter</span><span class="params">(self, queryset, name, value)</span>:</span></div><div class="line">        <span class="keyword">return</span> queryset.filter(Q(category_id=value) | Q(category__parent_category_id=value) | Q(</div><div class="line">            category__parent_category__parent_category_id=value))</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Goods</div><div class="line">        fields = [<span class="string">'pricemin'</span>, <span class="string">'pricemax'</span>, ]</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fm17xisthmj31kw14ghdt.jpg" alt=""></p>
<h2 id="Vue的商品搜索功能"><a href="#Vue的商品搜索功能" class="headerlink" title="Vue的商品搜索功能"></a><strong>Vue的商品搜索功能</strong></h2><p>只需要配置search_fields就行了：</p>
<p><code>search_fields = (&#39;name&#39;, &#39;goods_brief&#39;, &#39;goods_desc&#39;)</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分为以下几个环节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;商品类别数据接口&lt;/li&gt;
&lt;li&gt;Vue展示商品分类数据&lt;/li&gt;
&lt;li&gt;Vue展示商品列表页数据&lt;/li&gt;
&lt;li&gt;Vue的商品搜索功能&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Django，Vue" scheme="http://yoursite.com/categories/Django%EF%BC%8CVue/"/>
    
    
      <category term="Django，Vue，Rest" scheme="http://yoursite.com/tags/Django%EF%BC%8CVue%EF%BC%8CRest/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django REST Framework生鲜电商项目学习笔记——商品列表页</title>
    <link href="http://yoursite.com/2017/11/16/vue-django-5-1/"/>
    <id>http://yoursite.com/2017/11/16/vue-django-5-1/</id>
    <published>2017-11-16T05:18:54.000Z</published>
    <updated>2017-11-27T06:12:41.508Z</updated>
    
    <content type="html"><![CDATA[<p>分为以下几个环节：</p>
<ol>
<li>django的view实现商品列表页</li>
<li>django的serializer序列化model</li>
<li>apiview方式实现商品列表页</li>
<li>drf的modelserializer实现商品列表页功能</li>
<li>GenericView方式实现商品列表页和分页功能详解</li>
<li>viewsets和router完成商品列表页</li>
<li>drf的Apiview、GenericView、Viewset和router的原理分析</li>
<li>drf的request和response</li>
<li>drf的过滤</li>
<li>drf的搜索和排序</li>
</ol>
<a id="more"></a>
<h2 id="django的view实现商品列表页"><a href="#django的view实现商品列表页" class="headerlink" title="django的view实现商品列表页"></a><strong>django的view实现商品列表页</strong></h2><p>在goods文件夹下新建views_base.py：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> View</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListView</span><span class="params">(View)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        通过django的view实现商品列表页</div><div class="line">        :param request:</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        json_list = list()</div><div class="line">        goods = Goods.objects.all()[:<span class="number">10</span>]</div><div class="line">        <span class="keyword">for</span> good <span class="keyword">in</span> goods:</div><div class="line">            json_dict = dict()</div><div class="line">            json_dict[<span class="string">"name"</span>] = good.name</div><div class="line">            json_dict[<span class="string">"category"</span>] = good.category.name</div><div class="line">            json_dict[<span class="string">"market_price"</span>] = good.market_price</div><div class="line">            <span class="comment"># json_dict["add_time"] = good.add_time</span></div><div class="line">            json_list.append(json_dict)</div><div class="line"></div><div class="line">        <span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line">        <span class="keyword">import</span> json</div><div class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(json_list), content_type=<span class="string">"application/json"</span>)</div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1floam5fp0qj31kw145dr4.jpg" alt=""></p>
<p>这样就通过django view的方式返回了商品列表数据。</p>
<p>但其中有很多问题，例如在json_dict中加入add_time这个字段，就会出问题：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1floaq0jzlnj30ua0amn06.jpg" alt=""></p>
<h2 id="django的serializer序列化model"><a href="#django的serializer序列化model" class="headerlink" title="django的serializer序列化model"></a><strong>django的serializer序列化model</strong></h2><p>上述采用django view实现商品列表页的方式太过繁琐，需要手动获取每一条字段的信息，如下代码可以解决：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> model_to_dict</div><div class="line">        <span class="keyword">for</span> good <span class="keyword">in</span> goods:</div><div class="line">            json_dict = model_to_dict(good)</div><div class="line">            json_list.append(json_dict)</div></pre></td></tr></table></figure>
<p>但还是会遇到某些字段如Image_field不可序列化的问题，其实，django提供了一种serializer可以解决：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</div><div class="line">json_data = serializers.serialize(<span class="string">"json"</span>, goods)</div><div class="line">json_data = json.loads(json_data)</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</div><div class="line"><span class="keyword">return</span> JsonResponse(json_data, safe=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<h2 id="apiview方式实现商品列表页"><a href="#apiview方式实现商品列表页" class="headerlink" title="apiview方式实现商品列表页"></a><strong>apiview方式实现商品列表页</strong></h2><p>首先根据<a href="http://www.django-rest-framework.org/" target="_blank" rel="external">drf</a>官方文档将必要的包补全：<code>pip install coreapi django-guardian</code> ，然后将<code>&#39;rest_framework&#39;</code>添加到<code>INSTALLED_APPS</code>设置中“</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">    ...</div><div class="line">    <span class="string">'rest_framework'</span>,</div><div class="line">)</div></pre></td></tr></table></figure>
<p>将drf文档功能和drf登录功能引入根<code>urls.py</code>中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">  	url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">   	...</div><div class="line">    url(<span class="string">r'docs/'</span>, include_docs_urls(title=<span class="string">'慕学生鲜'</span>)),</div><div class="line">]</div></pre></td></tr></table></figure>
<p>首先利用drf的serializers在goods下新建<code>serializers.py</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsSerializer</span><span class="params">(serializers.Serializer)</span>:</span></div><div class="line">    name = serializers.CharField(required=<span class="keyword">True</span>, max_length=<span class="number">100</span>)</div><div class="line">    click_num = serializers.IntegerField(default=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>这里只用两个字段简单看一下效果</p>
<p><code>views.py</code>中，参考官方文档中的示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> GoodsSerializer</div><div class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListView</span><span class="params">(APIView)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></div><div class="line">        goods = Goods.objects.all()[:<span class="number">10</span>]</div><div class="line">        goods_serializer = GoodsSerializer(goods, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> Response(goods_serializer.data)</div></pre></td></tr></table></figure>
<p>最后，在<code>urls.py</code>中添加<code>from goods.views import GoodsListView</code>，运行访问<code>localhost:8000/goods/</code>：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1flphyxmplxj31kw145tig.jpg" alt=""></p>
<p>可以看到完成了商品列表页的功能。</p>
<h2 id="drf的modelserializer实现商品列表页功能"><a href="#drf的modelserializer实现商品列表页功能" class="headerlink" title="drf的modelserializer实现商品列表页功能"></a><strong>drf的modelserializer实现商品列表页功能</strong></h2><p>可以利用<code>serializers.ModelSerializer</code>精简我们的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Goods</div><div class="line">        fields = (<span class="string">'name'</span>, <span class="string">'click_num'</span>, <span class="string">'market_price'</span>, <span class="string">'add_time'</span>)</div></pre></td></tr></table></figure>
<p>可以将fields改为<code>fields = &#39;__all__&#39;</code>即可序列化所有字段：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1flprh2uo96j31kw145k34.jpg" alt=""></p>
<p>为了详细展示出category的信息，可以作如下修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods, GoodsCategory</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategorySerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = GoodsCategory</div><div class="line">        fields = <span class="string">'__all__'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    category = CategorySerializer()</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Goods</div><div class="line">        fields = <span class="string">'__all__'</span></div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1flprlzfnwtj31kw145145.jpg" alt=""></p>
<h2 id="GenericView方式实现商品列表页和分页功能"><a href="#GenericView方式实现商品列表页和分页功能" class="headerlink" title="GenericView方式实现商品列表页和分页功能"></a><strong>GenericView方式实现商品列表页和分页功能</strong></h2><p>为了精简<code>GoodsListView</code>中的代码，我们引入drf的mixins和generics：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> GoodsSerializer</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListView</span><span class="params">(mixins.ListModelMixin, generics.GenericAPIView)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品列表页</div><div class="line">    """</div><div class="line"></div><div class="line">    queryset = Goods.objects.all()[:<span class="number">10</span>]</div><div class="line">    serializer_class = GoodsSerializer</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</div></pre></td></tr></table></figure>
<p>其实也可以利用<code>generics.ListAPIView</code>来完成，更加简单：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListAPIView</span><span class="params">(mixins.ListModelMixin,</span></span></div><div class="line">                  GenericAPIView):</div><div class="line">    <span class="string">"""</span></div><div class="line">    Concrete view for listing a queryset.</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</div></pre></td></tr></table></figure>
<p>可以看到它继承了我们之前使用的mixins.ListModelMixin和GenericAPIView。</p>
<p>所以之前的代码就可以精简为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品列表页</div><div class="line">    """</div><div class="line"></div><div class="line">    queryset = Goods.objects.all()[:<span class="number">10</span>]</div><div class="line">    serializer_class = GoodsSerializer</div></pre></td></tr></table></figure>
<p>一般，列表页是需要分页的，利用drf进行分页只要在<code>settings.py</code>中简单设置一下即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</div><div class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">10</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1flptnm0p0oj31kw078dh1.jpg" alt=""></p>
<p>实际上可以通过在Views中通过pagination class来自定义分页效果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> GoodsSerializer</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</div><div class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsPagination</span><span class="params">(PageNumberPagination)</span>:</span></div><div class="line">    page_size = <span class="number">10</span></div><div class="line">    page_size_query_param = <span class="string">"page_size"</span></div><div class="line">    page_query_param = <span class="string">"p"</span></div><div class="line">    max_page_size = <span class="number">100</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品列表页</div><div class="line">    """</div><div class="line"></div><div class="line">    queryset = Goods.objects.all()</div><div class="line">    serializer_class = GoodsSerializer</div><div class="line">    pagination_class = GoodsPagination</div></pre></td></tr></table></figure>
<p>运行之后，自定义效果生效，并且可以动态添加参数：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1flptx8q2mgj30hi0140su.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1flptzoiqa4j31kw145gvv.jpg" alt=""></p>
<h2 id="viewsets和router完成商品列表页"><a href="#viewsets和router完成商品列表页" class="headerlink" title="viewsets和router完成商品列表页"></a><strong>viewsets和router完成商品列表页</strong></h2><p>如何使用？：<a href="http://www.django-rest-framework.org/tutorial/6-viewsets-and-routers/" target="_blank" rel="external">viewsets和router</a></p>
<h3 id="使用viewsets完成商品列表页："><a href="#使用viewsets完成商品列表页：" class="headerlink" title="使用viewsets完成商品列表页："></a>使用viewsets完成商品列表页：</h3><p>views.py中修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品列表页</div><div class="line">    """</div><div class="line"></div><div class="line">    queryset = Goods.objects.all()</div><div class="line">    serializer_class = GoodsSerializer</div><div class="line">    pagination_class = GoodsPagination</div></pre></td></tr></table></figure>
<p>urls.py中修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> goods.views <span class="keyword">import</span> GoodsListViewSet</div><div class="line"></div><div class="line">goods_list = GoodsListViewSet.as_view(&#123;</div><div class="line">    <span class="string">'get'</span>: <span class="string">'list'</span>,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment"># 商品列表页</span></div><div class="line">    url(<span class="string">r'goods/$'</span>, goods_list, name=<span class="string">"goods-list"</span>),</div><div class="line"></div><div class="line">    ...</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="使用router完成商品列表页"><a href="#使用router完成商品列表页" class="headerlink" title="使用router完成商品列表页"></a>使用router完成商品列表页</h3><p>因为我们使用ViewSet类而不是View类，所以实际上我们不需要自己设计URL。 将资源连接到视图和URL的约定可以使用Router类自动处理。 我们所要做的就是用router注册适当的视图集，然后剩下的就依靠router自动完成。</p>
<p>urls.py中修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</div><div class="line"><span class="keyword">import</span> xadmin</div><div class="line"><span class="keyword">from</span> MxShop.settings <span class="keyword">import</span> MEDIA_ROOT</div><div class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</div><div class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</div><div class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.views <span class="keyword">import</span> GoodsListViewSet</div><div class="line"></div><div class="line">router = DefaultRouter()</div><div class="line"></div><div class="line"><span class="comment"># 配置goods的url</span></div><div class="line">router.register(<span class="string">r'goods'</span>, GoodsListViewSet)</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^xadmin/'</span>, xadmin.site.urls),</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>)),</div><div class="line">    url(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT&#125;),</div><div class="line"></div><div class="line">    url(<span class="string">r'^'</span>, include(router.urls)),</div><div class="line"></div><div class="line">    url(<span class="string">r'docs/'</span>, include_docs_urls(title=<span class="string">'慕学生鲜'</span>))</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="drf的APIView、GenericView、Viewsets和router的原理分析"><a href="#drf的APIView、GenericView、Viewsets和router的原理分析" class="headerlink" title="drf的APIView、GenericView、Viewsets和router的原理分析"></a><strong>drf的APIView、GenericView、Viewsets和router的原理分析</strong></h2><p>还是老老实实看源码和文档吧！</p>
<p>贴一篇博客：<a href="http://yindongliang.com/2017/04/20/talk-about-django-rest-framework" target="_blank" rel="external">http://yindongliang.com/2017/04/20/talk-about-django-rest-framework</a></p>
<h2 id="drf的request和response"><a href="#drf的request和response" class="headerlink" title="drf的request和response"></a><strong>drf的request和response</strong></h2><p>tutorial：<a href="http://www.django-rest-framework.org/tutorial/2-requests-and-responses/" target="_blank" rel="external">http://www.django-rest-framework.org/tutorial/2-requests-and-responses/</a></p>
<p>api：<a href="http://www.django-rest-framework.org/api-guide/requests/" target="_blank" rel="external">http://www.django-rest-framework.org/api-guide/requests/</a></p>
<p><a href="http://www.django-rest-framework.org/api-guide/responses/" target="_blank" rel="external">http://www.django-rest-framework.org/api-guide/responses/</a></p>
<h2 id="drf的过滤"><a href="#drf的过滤" class="headerlink" title="drf的过滤"></a><strong>drf的过滤</strong></h2><p>api：<a href="http://www.django-rest-framework.org/api-guide/filtering/" target="_blank" rel="external">http://www.django-rest-framework.org/api-guide/filtering/</a></p>
<p>views.py中代码修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> GoodsSerializer</div><div class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</div><div class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets, mixins</div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsPagination</span><span class="params">(PageNumberPagination)</span>:</span></div><div class="line">    page_size = <span class="number">10</span></div><div class="line">    page_size_query_param = <span class="string">"page_size"</span></div><div class="line">    page_query_param = <span class="string">"p"</span></div><div class="line">    max_page_size = <span class="number">100</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品列表页</div><div class="line">    """</div><div class="line"></div><div class="line">    queryset = Goods.objects.all()</div><div class="line">    serializer_class = GoodsSerializer</div><div class="line">    pagination_class = GoodsPagination</div><div class="line">    filter_backends = (DjangoFilterBackend,)</div><div class="line">    filter_fields = (<span class="string">'name'</span>, <span class="string">'shop_price'</span>)</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1flt7tp5mtoj31kw146dr0.jpg" alt=""></p>
<p>可以看到页面中多了一个过滤器。也可以参考<a href="https://django-filter.readthedocs.io/en/master/guide/rest_framework.html#quickstart" target="_blank" rel="external">django-filter官方文档</a>自定义filter：</p>
<p>新建<code>filters.py</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django_filters <span class="keyword">import</span> rest_framework <span class="keyword">as</span> filters</div><div class="line"></div><div class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsFilter</span><span class="params">(filters.FilterSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品的过滤类</div><div class="line">    """</div><div class="line">    price_min = filters.NumberFilter(name=<span class="string">"shop_price"</span>, lookup_expr=<span class="string">"gte"</span>)</div><div class="line">    price_max = filters.NumberFilter(name=<span class="string">"shop_price"</span>, lookup_expr=<span class="string">"lte"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Goods</div><div class="line">        fields = [<span class="string">'price_min'</span>, <span class="string">'price_max'</span>]</div></pre></td></tr></table></figure>
<p><code>views.py</code>中修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> .filters <span class="keyword">import</span> GoodsFilter</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品列表页</div><div class="line">    """</div><div class="line"></div><div class="line">   	...</div><div class="line">    filter_class = GoodsFilter</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1flweyk7dmuj31kw1464b0.jpg" alt=""></p>
<p>题外话，实现模糊查询效果：<code>name = filters.CharFilter(name=&quot;name&quot;, lookup_expr=&quot;icontains&quot;)</code></p>
<h2 id="drf的搜索和排序"><a href="#drf的搜索和排序" class="headerlink" title="drf的搜索和排序"></a><strong>drf的搜索和排序</strong></h2><p>搜索依赖于<code>SearchFilter</code>，排序依赖于<code>OrderingFilter</code></p>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> filters</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsListViewSet</span><span class="params">(mixins.ListModelMixin, viewsets.GenericViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品列表页</div><div class="line">    """</div><div class="line"></div><div class="line">    ...</div><div class="line">    filter_backends = (DjangoFilterBackend, filters.SearchFilter)</div><div class="line">    filter_class = GoodsFilter</div><div class="line">    search_fields = (<span class="string">'name'</span>, <span class="string">'goods_brief'</span>, <span class="string">'goods_desc'</span>)</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flwfkgrxuij31kw146am3.jpg" alt=""></p>
<p>默认情况下，搜索将使用不区分大小写的部分匹配。搜索参数可能包含多个搜索词，它们应该是空格和/或逗号分隔的。如果使用多个搜索条件，则只有在所有提供的条件匹配的情况下，对象才会返回到列表中。</p>
<p>搜索行为可以通过将各种字符预先添加到search_fields来限制。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'^'</span>开始 - 搜索。</div><div class="line"><span class="string">'='</span>完全匹配。</div><div class="line"><span class="string">'@'</span>全文搜索。 （目前只支持Django的MySQL后端。）</div><div class="line"><span class="string">'$'</span>正则表达式搜索。</div></pre></td></tr></table></figure>
<p>例如：<code>search_fields =（&#39;= username&#39;，&#39;= email&#39;）</code></p>
<p>默认情况下，搜索参数被命名为“搜索”，但是这可能会被SEARCH_PARAM设置覆盖。</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>简单地配置即可，在<code>filter_backends</code>中加入<code>filters.OrderingFilter</code>，加上<code>ordering_fields = (&#39;sold_num&#39;, &#39;add_time&#39;)</code></p>
<p>效果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1flwg4s86igj31kw14615f.jpg" alt=""></p>
<p>很多功能配置要多看文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分为以下几个环节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;django的view实现商品列表页&lt;/li&gt;
&lt;li&gt;django的serializer序列化model&lt;/li&gt;
&lt;li&gt;apiview方式实现商品列表页&lt;/li&gt;
&lt;li&gt;drf的modelserializer实现商品列表页功能&lt;/li&gt;
&lt;li&gt;GenericView方式实现商品列表页和分页功能详解&lt;/li&gt;
&lt;li&gt;viewsets和router完成商品列表页&lt;/li&gt;
&lt;li&gt;drf的Apiview、GenericView、Viewset和router的原理分析&lt;/li&gt;
&lt;li&gt;drf的request和response&lt;/li&gt;
&lt;li&gt;drf的过滤&lt;/li&gt;
&lt;li&gt;drf的搜索和排序&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Django，Vue" scheme="http://yoursite.com/categories/Django%EF%BC%8CVue/"/>
    
    
      <category term="Django，Vue，Rest" scheme="http://yoursite.com/tags/Django%EF%BC%8CVue%EF%BC%8CRest/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django REST Framework生鲜电商项目学习笔记——Vue的结构和restful api介绍</title>
    <link href="http://yoursite.com/2017/11/15/vue-django-4-1/"/>
    <id>http://yoursite.com/2017/11/15/vue-django-4-1/</id>
    <published>2017-11-15T05:18:54.000Z</published>
    <updated>2017-11-16T02:59:17.077Z</updated>
    
    <content type="html"><![CDATA[<p>分为以下几个环节：</p>
<ol>
<li>restful api介绍</li>
<li>vue的基本概念介绍</li>
<li>vue的源码结构介绍</li>
</ol>
<a id="more"></a>
<h2 id="restful-api介绍"><a href="#restful-api介绍" class="headerlink" title="restful api介绍"></a><strong>restful api介绍</strong></h2><h3 id="前后端分离优缺点"><a href="#前后端分离优缺点" class="headerlink" title="前后端分离优缺点"></a><strong>前后端分离优缺点</strong></h3><h4 id="为什么要前后端分离"><a href="#为什么要前后端分离" class="headerlink" title="为什么要前后端分离"></a><strong>为什么要前后端分离</strong></h4><ol>
<li>pc, app, pad多端适应</li>
<li>SPA开发模式开始流行</li>
<li>前后端开发职责不清</li>
<li>开发效率问题，前后端互相等待</li>
<li>前端一直配合着后端，能力受限</li>
<li>后台开发语言和模板高度耦合，导致开发语言依赖严重</li>
</ol>
<h4 id="前后端分离缺点"><a href="#前后端分离缺点" class="headerlink" title="前后端分离缺点"></a><strong>前后端分离缺点</strong></h4><ol>
<li>前后端学习门槛增加</li>
<li>数据依赖导致文档重要性增加</li>
<li>前端工作量加大</li>
<li>SEO的难度加大</li>
<li>后端开发模式迁移增加成本</li>
</ol>
<h3 id="restful-api"><a href="#restful-api" class="headerlink" title="restful api"></a><strong>restful api</strong></h3><p>restful api目前是前后端分离最佳实践：</p>
<ol>
<li>轻量，直接通过http，不需要额外的协议，post/get/put/delete操作</li>
<li>面向资源，一目了然，具有自解释性</li>
<li>数据描述简单，一般通过json或者xml做数据通信</li>
</ol>
<p>restful api 重要概念</p>
<ol>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">概念</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">restful实践</a></li>
</ol>
<h2 id="Vue的基本概念介绍"><a href="#Vue的基本概念介绍" class="headerlink" title="Vue的基本概念介绍"></a><strong>Vue的基本概念介绍</strong></h2><h3 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a><strong>几个概念</strong></h3><ol>
<li>前端工程化</li>
<li>数据双向绑定</li>
<li>组件化开发</li>
</ol>
<h3 id="vue开发的几个概念"><a href="#vue开发的几个概念" class="headerlink" title="vue开发的几个概念"></a><strong>vue开发的几个概念</strong></h3><ol>
<li>webpack</li>
<li>vue, vuex, vue-router, axios</li>
<li>ES6, babel</li>
</ol>
<h2 id="Vue项目源码结构介绍"><a href="#Vue项目源码结构介绍" class="headerlink" title="Vue项目源码结构介绍"></a><strong>Vue项目源码结构介绍</strong></h2><p>老老实实把Vue学一学吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分为以下几个环节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;restful api介绍&lt;/li&gt;
&lt;li&gt;vue的基本概念介绍&lt;/li&gt;
&lt;li&gt;vue的源码结构介绍&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Django，Vue" scheme="http://yoursite.com/categories/Django%EF%BC%8CVue/"/>
    
    
      <category term="Django，Vue，Rest" scheme="http://yoursite.com/tags/Django%EF%BC%8CVue%EF%BC%8CRest/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django REST Framework生鲜电商项目学习笔记——model设计和资源导入</title>
    <link href="http://yoursite.com/2017/11/05/vue-django-3-1/"/>
    <id>http://yoursite.com/2017/11/05/vue-django-3-1/</id>
    <published>2017-11-05T05:18:54.000Z</published>
    <updated>2017-11-14T13:54:29.112Z</updated>
    
    <content type="html"><![CDATA[<p>分为以下几个环节：</p>
<ol>
<li>user用户的model设计</li>
<li>goods商品的model设计</li>
<li>trade交易的model设计</li>
<li>user_operation用户操作的model设计</li>
<li>migrations原理及表生成</li>
<li>xadmin后台管理系统的配置</li>
<li>导入商品和商品类别数据</li>
</ol>
<a id="more"></a>
<h3 id="user用户的model设计"><a href="#user用户的model设计" class="headerlink" title="user用户的model设计"></a><strong>user用户的model设计</strong></h3><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfile</span><span class="params">(AbstractUser)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户</div><div class="line">    """</div><div class="line">    name = models.CharField(max_length=<span class="number">30</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"姓名"</span>)</div><div class="line">    birthday = models.DateField(null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"出生年月"</span>)</div><div class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">"电话"</span>)</div><div class="line">    gender = models.CharField(max_length=<span class="number">6</span>, choices=((<span class="string">"male"</span>, <span class="string">"男"</span>), (<span class="string">"female"</span>, <span class="string">"女"</span>)), default=<span class="string">"female"</span>,</div><div class="line">                              verbose_name=<span class="string">"性别"</span>)</div><div class="line">    email = models.CharField(max_length=<span class="number">100</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"邮箱"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"用户"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerifyCode</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    短信验证码</div><div class="line">    """</div><div class="line">    code = models.CharField(max_length=<span class="number">10</span>, verbose_name=<span class="string">"验证码"</span>)</div><div class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">"电话"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"短信验证码"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.code</div></pre></td></tr></table></figure>
<p>然后在settings文件中添加下面这行代码以替换django本身的用户。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AUTH_USER_MODEL = <span class="string">'users.UserProfile'</span></div></pre></td></tr></table></figure>
<h3 id="goods商品的model设计"><a href="#goods商品的model设计" class="headerlink" title="goods商品的model设计"></a><strong>goods商品的model设计</strong></h3><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> DjangoUeditor.models <span class="keyword">import</span> UEditorField</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCategory</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品类别</div><div class="line">    """</div><div class="line"></div><div class="line">    CATEGORY_TYPE = (</div><div class="line">        (<span class="number">1</span>, <span class="string">"一级类目"</span>),</div><div class="line">        (<span class="number">2</span>, <span class="string">"二级类目"</span>),</div><div class="line">        (<span class="number">3</span>, <span class="string">"三级类目"</span>),</div><div class="line">    )</div><div class="line">    name = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"类别名"</span>, help_text=<span class="string">"类别名"</span>)</div><div class="line">    code = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"类别code"</span>, help_text=<span class="string">"类别code"</span>)</div><div class="line">    desc = models.TextField(default=<span class="string">""</span>, verbose_name=<span class="string">"类别描述"</span>, help_text=<span class="string">"类别描述"</span>)</div><div class="line">    category_type = models.IntegerField(choices=CATEGORY_TYPE, verbose_name=<span class="string">"类目级别"</span>, help_text=<span class="string">"类目级别"</span>)</div><div class="line">    parent_category = models.ForeignKey(<span class="string">"self"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"父类目级别"</span>, help_text=<span class="string">"父目录"</span>,</div><div class="line">                                        related_name=<span class="string">"sub_cat"</span>)</div><div class="line">    is_tab = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否导航"</span>, help_text=<span class="string">"是否导航"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"商品类别"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCategoryBrand</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    品牌</div><div class="line">    """</div><div class="line">    category = models.ForeignKey(GoodsCategory, related_name=<span class="string">'brands'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"商品类目"</span>)</div><div class="line">    name = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"品牌名"</span>, help_text=<span class="string">"品牌名"</span>)</div><div class="line">    desc = models.TextField(default=<span class="string">""</span>, max_length=<span class="number">200</span>, verbose_name=<span class="string">"品牌描述"</span>, help_text=<span class="string">"品牌描述"</span>)</div><div class="line">    image = models.ImageField(max_length=<span class="number">200</span>, upload_to=<span class="string">"brand/"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"品牌"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品</div><div class="line">    """</div><div class="line">    category = models.ForeignKey(GoodsCategory, verbose_name=<span class="string">"商品类目"</span>)</div><div class="line">    goods_sn = models.CharField(max_length=<span class="number">50</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"商品唯一货号"</span>)</div><div class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">"商品名"</span>)</div><div class="line">    click_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"点击数"</span>)</div><div class="line">    sold_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"商品销售量"</span>)</div><div class="line">    fav_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"收藏数"</span>)</div><div class="line">    goods_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"库存数"</span>)</div><div class="line">    market_price = models.FloatField(default=<span class="number">0</span>, verbose_name=<span class="string">"市场价格"</span>)</div><div class="line">    shop_price = models.FloatField(default=<span class="number">0</span>, verbose_name=<span class="string">"本店价格"</span>)</div><div class="line">    goods_brief = models.TextField(max_length=<span class="number">500</span>, verbose_name=<span class="string">"商品简短描述"</span>)</div><div class="line">    goods_desc = UEditorField(verbose_name=<span class="string">"内容"</span>, imagePath=<span class="string">"goods/images/"</span>, width=<span class="number">1000</span>, height=<span class="number">300</span>,</div><div class="line">                              filePath=<span class="string">"goods/files/"</span>, default=<span class="string">''</span>)</div><div class="line">    ship_free = models.BooleanField(default=<span class="keyword">True</span>, verbose_name=<span class="string">"是否承担运费"</span>)</div><div class="line">    goods_front_image = models.ImageField(upload_to=<span class="string">"goods/images/"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"封面图"</span>)</div><div class="line">    is_new = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否新品"</span>)</div><div class="line">    is_hot = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否热销"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">'商品'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsImage</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品轮播图</div><div class="line">    """</div><div class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>, related_name=<span class="string">"images"</span>)</div><div class="line">    image = models.ImageField(upload_to=<span class="string">""</span>, verbose_name=<span class="string">"图片"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"商品轮播图"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.goods.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banner</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    轮播的商品</div><div class="line">    """</div><div class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>)</div><div class="line">    image = models.ImageField(upload_to=<span class="string">'banner'</span>, verbose_name=<span class="string">"轮播图片"</span>)</div><div class="line">    index = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"轮播顺序"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"轮播商品"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.goods.name</div></pre></td></tr></table></figure>
<p>其中需要使用<a href="https://pan.baidu.com/s/1jI7qYH4" target="_blank" rel="external">DjangoUeditor</a>，直接解压放到extra_apps目录下即可，记得在settings.py文件中注册我们的app：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">    <span class="string">'apps.users.apps.UsersConfig'</span>,</div><div class="line">    <span class="string">'DjangoUeditor'</span>,</div><div class="line">    <span class="string">'users'</span>,</div><div class="line">    <span class="string">'goods'</span>,</div><div class="line">    <span class="string">'trade'</span>,</div><div class="line">    <span class="string">'user_operation'</span></div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="trade交易的model设计"><a href="#trade交易的model设计" class="headerlink" title="trade交易的model设计"></a><strong>trade交易的model设计</strong></h3><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model()</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line">User = get_user_model()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    购物车</div><div class="line">    """</div><div class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</div><div class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>)</div><div class="line">    goods_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"购买数量"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"购物车"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"%s(%d)"</span>.format(self.goods.name, self.goods_num)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderInfo</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    订单</div><div class="line">    """</div><div class="line">    ORDER_STATUS = (</div><div class="line">        (<span class="string">"success"</span>, <span class="string">"成功"</span>),</div><div class="line">        (<span class="string">"cancel"</span>, <span class="string">"取消"</span>),</div><div class="line">        (<span class="string">"cancel"</span>, <span class="string">"待支付"</span>),</div><div class="line">    )</div><div class="line"></div><div class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</div><div class="line">    order_sn = models.CharField(max_length=<span class="number">30</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, unique=<span class="keyword">True</span>, verbose_name=<span class="string">"订单号"</span>)</div><div class="line">    trade_no = models.CharField(max_length=<span class="number">100</span>, unique=<span class="keyword">True</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">u"交易号"</span>)</div><div class="line">    pay_status = models.CharField(choices=ORDER_STATUS, default=<span class="string">"paying"</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"订单状态"</span>)</div><div class="line">    post_script = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">"订单留言"</span>)</div><div class="line">    order_mount = models.FloatField(default=<span class="number">0.0</span>, verbose_name=<span class="string">"订单金额"</span>)</div><div class="line">    pay_time = models.DateTimeField(null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"支付时间"</span>)</div><div class="line">    address = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"收货地址"</span>)</div><div class="line">    signer_name = models.CharField(max_length=<span class="number">20</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"签收人"</span>)</div><div class="line">    singer_mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">"联系电话"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"订单"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> str(self.order_sn)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderGoods</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    订单商品详情</div><div class="line">    """</div><div class="line">    order = models.ForeignKey(OrderInfo, verbose_name=<span class="string">"订单信息"</span>, related_name=<span class="string">"goods"</span>)</div><div class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>)</div><div class="line">    goods_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"商品数量"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"订单商品"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> str(self.order.order_sn)</div></pre></td></tr></table></figure>
<p>注：Django 1.5之后y用户可以自定义User Model，可以通过以下两种方式来获取User Model。</p>
<ol>
<li>使用django.contrib.auth.get_user_model()</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 使用默认User model时</div><div class="line">&gt;&gt;&gt; from django.contrib.auth import get_user_model</div><div class="line">&gt;&gt;&gt; get_user_model()</div><div class="line">&lt;class 'django.contrib.auth.models.User'&gt;</div><div class="line"></div><div class="line"># 使用自定义User model时</div><div class="line">&gt;&gt;&gt; from django.contrib.auth import get_user_model</div><div class="line">&gt;&gt;&gt; get_user_model()</div><div class="line">&lt;class 'xxx.models.UserProfile'&gt;</div></pre></td></tr></table></figure>
<ol>
<li>使用settings.AUTH_USER_MODEL</li>
</ol>
<p>应该使用django.contrib.auth.get_user_model()来引用用户模型，而不要直接引用User。 这个方法将返回当前正在使用的用户模型 —— 指定的自定义用户模型或者User。当定义一个外键或者到用户模型的多对多关系时，你应该使用 settings.AUTH_USER_MODEL设置来指定自定义的模型。一般来说，在导入时候执行的代码中，应该使用settings.AUTH_USER_MODEL，get_user_model() 只在Django 已经导入所有的模型后才工作。</p>
<h3 id="user-operation用户操作的model设计"><a href="#user-operation用户操作的model设计" class="headerlink" title="user_operation用户操作的model设计"></a><strong>user_operation用户操作的model设计</strong></h3><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line">User = get_user_model()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFav</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户收藏</div><div class="line">    """</div><div class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</div><div class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>, help_text=<span class="string">"商品id"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"用户收藏"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.user.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserLeavingMessage</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户留言</div><div class="line">    """</div><div class="line">    MESSAGE_CHOICES = (</div><div class="line">        (<span class="number">1</span>, <span class="string">"留言"</span>),</div><div class="line">        (<span class="number">2</span>, <span class="string">"投诉"</span>),</div><div class="line">        (<span class="number">3</span>, <span class="string">"询问"</span>),</div><div class="line">        (<span class="number">4</span>, <span class="string">"售后"</span>),</div><div class="line">        (<span class="number">5</span>, <span class="string">"求购"</span>)</div><div class="line">    )</div><div class="line"></div><div class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</div><div class="line">    message_type = models.IntegerField(default=<span class="number">1</span>, choices=MESSAGE_CHOICES, verbose_name=<span class="string">"留言类型"</span>,</div><div class="line">                                       help_text=<span class="string">u"留言类型: 1(留言),2(投诉),3(询问),4(售后),5(求购)"</span>)</div><div class="line">    subject = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"主题"</span>)</div><div class="line">    message = models.TextField(default=<span class="string">""</span>, verbose_name=<span class="string">"留言内容"</span>, help_text=<span class="string">"留言内容"</span>)</div><div class="line">    file = models.FileField(upload_to=<span class="string">"message/images/"</span>, verbose_name=<span class="string">"上传的文件"</span>, help_text=<span class="string">"上传的文件"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"用户留言"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.subject</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户收货地址</div><div class="line">    """</div><div class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</div><div class="line">    province = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"省份"</span>)</div><div class="line">    city = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"城市"</span>)</div><div class="line">    district = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"区域"</span>)</div><div class="line">    address = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"详细地址"</span>)</div><div class="line">    signer_name = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"签收人"</span>)</div><div class="line">    signer_mobile = models.CharField(max_length=<span class="number">11</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"电话"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"收货地址"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.address</div></pre></td></tr></table></figure>
<h3 id="migrations原理及表生成"><a href="#migrations原理及表生成" class="headerlink" title="migrations原理及表生成"></a><strong>migrations原理及表生成</strong></h3><p>直接Run manage.py Task然后makemigrations</p>
<p><a href="http://python.usyiyi.cn/translate/django_182/topics/migrations.html" target="_blank" rel="external">原理</a>略过，官方文档讲的很详细。</p>
<h3 id="xadmin后台管理系统的配置"><a href="#xadmin后台管理系统的配置" class="headerlink" title="xadmin后台管理系统的配置"></a><strong>xadmin后台管理系统的配置</strong></h3><p>将<a href="https://pan.baidu.com/s/1i5owpE1" target="_blank" rel="external">xadmin</a>中的xadmin文件夹复制到extra_apps目录下，将其中每个app目录下的adminx.py文件复制到项目对应app目录下。</p>
<p>安装xadmin依赖包：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django-crispy-forms django-reversion django-formtools future httplib2 six xlwt xlswriter -i https://pypi.douban.com/simple/</div></pre></td></tr></table></figure>
<p>在settings.py文件中添加配置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">  	<span class="string">'django_filters'</span>,</div><div class="line">    <span class="string">'DjangoUeditor'</span>,</div><div class="line">    <span class="string">'apps.users.apps.UsersConfig'</span>,</div><div class="line">    <span class="string">'goods.apps.GoodsConfig'</span>,</div><div class="line">    <span class="string">'trade.apps.TradeConfig'</span>,</div><div class="line">    <span class="string">'user_operation.apps.UserOperationConfig'</span>,</div><div class="line">    <span class="string">'crispy_forms'</span>,</div><div class="line">    <span class="string">'xadmin'</span>,</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment"># 设置时区</span></div><div class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span>  <span class="comment"># 中文支持，django1.8以后支持；1.8以前是zh-cn</span></div><div class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></div><div class="line">USE_I18N = <span class="keyword">True</span></div><div class="line">USE_L10N = <span class="keyword">True</span></div><div class="line">USE_TZ = <span class="keyword">False</span>  <span class="comment"># 默认是Ture，时间是utc时间，由于我们要用本地时间，所用手动修改为false！！！！</span></div></pre></td></tr></table></figure>
<p>再执行makemigrations和migrate</p>
<p>修改Mxshop/urls.py文件:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">import</span> xadmin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^xadmin/'</span>, xadmin.site.urls),</div><div class="line">]</div></pre></td></tr></table></figure>
<p>创建超级用户</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flhe8itum3j31kw0cjdj5.jpg" alt=""></p>
<p>Debug运行，打开<a href="http://127.0.0.1:8000/xadmin/" target="_blank" rel="external">http://127.0.0.1:8000/xadmin/</a></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flhenvlrxwj31kw13jjwu.jpg" alt=""></p>
<p>发现app名称仍是英文，下面进入对应app下的apps.py文件进行修改，例如goods:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsConfig</span><span class="params">(AppConfig)</span>:</span></div><div class="line">    name = <span class="string">'goods'</span></div><div class="line">    verbose_name = <span class="string">"商品"</span></div></pre></td></tr></table></figure>
<p>OK，大功告成！</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1flhex3e9iuj31kw175wn8.jpg" alt=""></p>
<h3 id="导入商品和商品类别数据"><a href="#导入商品和商品类别数据" class="headerlink" title="导入商品和商品类别数据"></a><strong>导入商品和商品类别数据</strong></h3><p>将<a href="https://pan.baidu.com/s/1hsoyp6k" target="_blank" rel="external">data</a>中的goods和brands文件夹复制到项目的media文件夹中，并在db_tools文件夹下新建data文件夹，拖入category_data.py和product_data.py文件。</p>
<p>在db_tools文件夹下新建import_category_data.py：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 独立使用django的model</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 获取当前文件的目录</span></div><div class="line">pwd = os.path.dirname(os.path.realpath(__file__))</div><div class="line"><span class="comment"># 获取项目名的目录(因为我的当前文件是在项目名下的文件夹下的文件.所以是../)</span></div><div class="line">sys.path.append(pwd + <span class="string">"../"</span>)</div><div class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"MxShop.settings"</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> django</div><div class="line"></div><div class="line">django.setup()</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> GoodsCategory</div><div class="line"></div><div class="line"><span class="keyword">from</span> db_tools.data.category_data <span class="keyword">import</span> row_data</div><div class="line"></div><div class="line"><span class="keyword">for</span> lev1_cat <span class="keyword">in</span> row_data:</div><div class="line">    lev1_instance = GoodsCategory()</div><div class="line">    lev1_instance.code = lev1_cat[<span class="string">"code"</span>]</div><div class="line">    lev1_instance.name = lev1_cat[<span class="string">"name"</span>]</div><div class="line">    lev1_instance.category_type = <span class="number">1</span></div><div class="line">    lev1_instance.save()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> lev2_cat <span class="keyword">in</span> lev1_cat[<span class="string">"sub_categorys"</span>]:</div><div class="line">        lev2_instance = GoodsCategory()</div><div class="line">        lev2_instance.code = lev2_cat[<span class="string">"code"</span>]</div><div class="line">        lev2_instance.name = lev2_cat[<span class="string">"name"</span>]</div><div class="line">        lev2_instance.category_type = <span class="number">2</span></div><div class="line">        lev2_instance.parent_category = lev1_instance</div><div class="line">        lev2_instance.save()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> lev3_cat <span class="keyword">in</span> lev2_cat[<span class="string">"sub_categorys"</span>]:</div><div class="line">            lev3_instance = GoodsCategory()</div><div class="line">            lev3_instance.code = lev3_cat[<span class="string">"code"</span>]</div><div class="line">            lev3_instance.name = lev3_cat[<span class="string">"name"</span>]</div><div class="line">            lev3_instance.category_type = <span class="number">3</span></div><div class="line">            lev3_instance.parent_category = lev2_instance</div><div class="line">            lev3_instance.save()</div></pre></td></tr></table></figure>
<p>运行之后即可导入商品类别数据，可以再navicat或者后台管理系统中查看：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flhoawg0xlj31kw175atl.jpg" alt=""></p>
<p>接下来导入商品数据，观察商品数据结构之后，在db_tools文件夹下新建import_goods_data.py：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 获取当前文件的目录</span></div><div class="line">pwd = os.path.dirname(os.path.realpath(__file__))</div><div class="line"><span class="comment"># 获取项目名的目录(因为我的当前文件是在项目名下的文件夹下的文件.所以是../)</span></div><div class="line">sys.path.append(pwd + <span class="string">"../"</span>)</div><div class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"MxShop.settings"</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> django</div><div class="line"></div><div class="line">django.setup()</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods, GoodsCategory, GoodsImage</div><div class="line"></div><div class="line"><span class="keyword">from</span> db_tools.data.product_data <span class="keyword">import</span> row_data</div><div class="line"></div><div class="line"><span class="keyword">for</span> goods_detail <span class="keyword">in</span> row_data:</div><div class="line">    goods = Goods()</div><div class="line">    goods.name = goods_detail[<span class="string">"name"</span>]</div><div class="line">    goods.market_price = float(int(goods_detail[<span class="string">"market_price"</span>].replace(<span class="string">"￥"</span>, <span class="string">""</span>).replace(<span class="string">"元"</span>, <span class="string">""</span>)))</div><div class="line">    goods.shop_price = float(int(goods_detail[<span class="string">"sale_price"</span>].replace(<span class="string">"￥"</span>, <span class="string">""</span>).replace(<span class="string">"元"</span>, <span class="string">""</span>)))</div><div class="line">    goods.goods_brief = goods_detail[<span class="string">"desc"</span>] <span class="keyword">if</span> goods_detail[<span class="string">"desc"</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="string">""</span></div><div class="line">    goods.goods_desc = goods_detail[<span class="string">"goods_desc"</span>] <span class="keyword">if</span> goods_detail[<span class="string">"goods_desc"</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="string">""</span></div><div class="line">    goods.goods_front_image = goods_detail[<span class="string">"images"</span>][<span class="number">0</span>] <span class="keyword">if</span> goods_detail[<span class="string">"images"</span>] <span class="keyword">else</span> <span class="string">""</span></div><div class="line"></div><div class="line">    category_name = goods_detail[<span class="string">"categorys"</span>][<span class="number">-1</span>]</div><div class="line">    category = GoodsCategory.objects.filter(name=category_name)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> category:</div><div class="line">        goods.category = category[<span class="number">0</span>]</div><div class="line">    goods.save()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> goods_image <span class="keyword">in</span> goods_detail[<span class="string">"images"</span>]:</div><div class="line">        goods_image_instance = GoodsImage()</div><div class="line">        goods_image_instance.image = goods_image</div><div class="line">        goods_image_instance.goods = goods</div><div class="line">        goods_image_instance.save()</div></pre></td></tr></table></figure>
<p>运行即可。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1flhq8ni6jkj31kw175tt8.jpg" alt=""></p>
<p>但是发现其中的图片无法显示，需要我们进行配置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># settings.py文件中添加</span></div><div class="line">MEDIA_URL = <span class="string">"/media/"</span></div><div class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">"media"</span>)</div><div class="line"></div><div class="line"><span class="comment"># MxShop/urls.py文件中修改</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">import</span> xadmin</div><div class="line"><span class="keyword">from</span> MxShop.settings <span class="keyword">import</span> MEDIA_ROOT</div><div class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^xadmin/'</span>, xadmin.site.urls),</div><div class="line">    url(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT&#125;),</div><div class="line">]</div></pre></td></tr></table></figure>
<p>附<a href="http://blog.csdn.net/wwaiym/article/details/5820689" target="_blank" rel="external">Django settings.py的media路径设置</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分为以下几个环节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;user用户的model设计&lt;/li&gt;
&lt;li&gt;goods商品的model设计&lt;/li&gt;
&lt;li&gt;trade交易的model设计&lt;/li&gt;
&lt;li&gt;user_operation用户操作的model设计&lt;/li&gt;
&lt;li&gt;migrations原理及表生成&lt;/li&gt;
&lt;li&gt;xadmin后台管理系统的配置&lt;/li&gt;
&lt;li&gt;导入商品和商品类别数据&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Django，Vue" scheme="http://yoursite.com/categories/Django%EF%BC%8CVue/"/>
    
    
      <category term="Django，Vue，Rest" scheme="http://yoursite.com/tags/Django%EF%BC%8CVue%EF%BC%8CRest/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django REST Framework生鲜电商项目学习笔记——项目初始化</title>
    <link href="http://yoursite.com/2017/11/04/vue-django-2-1/"/>
    <id>http://yoursite.com/2017/11/04/vue-django-2-1/</id>
    <published>2017-11-04T05:18:54.000Z</published>
    <updated>2017-11-14T06:17:10.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="虚拟环境配置"><a href="#虚拟环境配置" class="headerlink" title="虚拟环境配置"></a><strong>虚拟环境配置</strong></h3><ol>
<li>配置virtualenv和virtualenvwrapper(略)</li>
<li>新建虚拟环境VueShop:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install djangorestframework</div><div class="line">pip install markdown django-filter</div><div class="line">pip install django</div><div class="line">pip install mysqlclient</div></pre></td></tr></table></figure>
<p>最好在pip后面加上<code>-i https://pypi.doban.com/simple</code>豆瓣源加快安装速度，否则太慢了，或者直接在配置文件中进行换源，不用每次都加。</p>
<a id="more"></a>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a><strong>新建项目</strong></h3><ol>
<li>创建</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1flbkc8lekej31760qs0wu.jpg" alt=""></p>
<ol>
<li>修改目录和配置</li>
</ol>
<p>新建apps和extra_apps两个Python Package，media和db_tools两个Directory，将users拖入apps中，并将apps和extra_apps右键mark为sources root，初步的项目结构如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1flblin1jgoj30fc0gs0u9.jpg" alt=""></p>
<p>修改settings.py中的配置，添加或修改为如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></div><div class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</div><div class="line">sys.path.insert(<span class="number">0</span>, BASE_DIR)</div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'apps'</span>))</div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'extra_apps'</span>))</div><div class="line"></div><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">"mxshop"</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">"root"</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">"12"</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">        <span class="string">'OPTIONS'</span>: &#123;<span class="string">'init_command'</span>: <span class="string">'SET storage_default_engine=INNODB;'</span>&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在更换数据库配置之后，需要在Navicat中创建相应的数据库。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;虚拟环境配置&quot;&gt;&lt;a href=&quot;#虚拟环境配置&quot; class=&quot;headerlink&quot; title=&quot;虚拟环境配置&quot;&gt;&lt;/a&gt;&lt;strong&gt;虚拟环境配置&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;配置virtualenv和virtualenvwrapper(略)&lt;/li&gt;
&lt;li&gt;新建虚拟环境VueShop:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install djangorestframework&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install markdown django-filter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install django&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install mysqlclient&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最好在pip后面加上&lt;code&gt;-i https://pypi.doban.com/simple&lt;/code&gt;豆瓣源加快安装速度，否则太慢了，或者直接在配置文件中进行换源，不用每次都加。&lt;/p&gt;
    
    </summary>
    
      <category term="Django，Vue" scheme="http://yoursite.com/categories/Django%EF%BC%8CVue/"/>
    
    
      <category term="Django，Vue，Rest" scheme="http://yoursite.com/tags/Django%EF%BC%8CVue%EF%BC%8CRest/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django REST Framework生鲜电商项目学习笔记——概览</title>
    <link href="http://yoursite.com/2017/11/03/vue-django-1-1/"/>
    <id>http://yoursite.com/2017/11/03/vue-django-1-1/</id>
    <published>2017-11-03T05:18:54.000Z</published>
    <updated>2017-11-08T09:49:49.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a><strong>技术要点</strong></h2><ol>
<li>Vue + Django REST Framework前后端分离技术</li>
<li>restful api开发流程</li>
<li>Django REST Framework的功能实现和核心源码分析</li>
<li>Sentry完成线上系统的错误日志的监控和告警</li>
<li>第三方登录和支付宝支付的集成</li>
</ol>
<a id="more"></a>
<h2 id="Django-REST-Framework技能"><a href="#Django-REST-Framework技能" class="headerlink" title="Django REST Framework技能"></a><strong>Django REST Framework技能</strong></h2><h3 id="通过view实现rest-api接口"><a href="#通过view实现rest-api接口" class="headerlink" title="通过view实现rest api接口"></a><strong>通过view实现rest api接口</strong></h3><ol>
<li>ApiView方式实现api接口</li>
<li>GenericView方式实现api接口</li>
<li>Viewset和router方式实现api接口和url配置</li>
<li>django_filter、SearchFilter、OrderFilter、分页</li>
<li>通用mixins</li>
</ol>
<h3 id="权限和认证"><a href="#权限和认证" class="headerlink" title="权限和认证"></a><strong>权限和认证</strong></h3><ol>
<li>Authentication用户认证设置</li>
<li>动态设置permission、Authentication</li>
<li>Validators实现字段验证</li>
</ol>
<h3 id="序列化和表单验证"><a href="#序列化和表单验证" class="headerlink" title="序列化和表单验证"></a><strong>序列化和表单验证</strong></h3><ol>
<li>Serializer</li>
<li>ModelSerializer</li>
<li>动态设置Serializer</li>
</ol>
<h3 id="支付、登录和注册"><a href="#支付、登录和注册" class="headerlink" title="支付、登录和注册"></a><strong>支付、登录和注册</strong></h3><ol>
<li>json web token实现登录</li>
<li>手机注册</li>
<li>支付宝支付</li>
<li>第三方登录</li>
</ol>
<h3 id="进阶开发"><a href="#进阶开发" class="headerlink" title="进阶开发"></a><strong>进阶开发</strong></h3><ol>
<li>django rest framework部分核心源码解读</li>
<li>文档自动化管理</li>
<li>django rest framework的缓存</li>
<li>Throttling对用户和ip进行限速</li>
</ol>
<h3 id="开发中常见的问题"><a href="#开发中常见的问题" class="headerlink" title="开发中常见的问题"></a><strong>开发中常见的问题</strong></h3><ol>
<li>本地系统不能重现的bug</li>
<li>api接口出错不能及时的发现或难找到错误栈</li>
<li>api文档管理问题</li>
<li>大量的url配置造成url配置越来越多难以维护</li>
<li>接口不及时更新文档，对方不知道如何去测试接口，但写文档会话费大量的时间去维护</li>
<li>为了防止爬虫，我们需要针对api的访问频率进行限制，比如一分钟、一小时或者一天用户的访问频率限制问题</li>
<li>某些页面将数据放入缓存，加速某些api的访问速度</li>
</ol>
<h3 id="开发中常见的问题解决方案"><a href="#开发中常见的问题解决方案" class="headerlink" title="开发中常见的问题解决方案"></a><strong>开发中常见的问题解决方案</strong></h3><ol>
<li>通过介绍pycharm的远程服务器代码调试技巧让大家不仅可以调试支付、第三方登录还可以调试远程服务器的代码来重现服务器上的bug</li>
<li>通过docker搭建sentry来体验错误日志监控系统，让我们不仅可以得到线上的错误栈还能及时在发生系统错误时受到邮件通知。</li>
<li>django rest framework的文档自动化管理以及url的注册管理功能会让我们省去写文档的时间</li>
<li>django rest framework的文档管理功能不仅可以让我们省去写文档的时间还能直接在文档里面测试接口、自动生成的js接口代码、shell测试代码和python测试代码</li>
<li>django rest framework提供的throttle来对api进行访问频率限制</li>
<li>引入第三方框架来设置某些api的缓存</li>
</ol>
<h3 id="Django进阶知识点"><a href="#Django进阶知识点" class="headerlink" title="Django进阶知识点"></a><strong>Django进阶知识点</strong></h3><ol>
<li>Django migrations原理</li>
<li>Django信号量</li>
<li>Django从请求到响应的完整过程</li>
<li>独立使用Django的Model</li>
</ol>
<h3 id="Vue知识点"><a href="#Vue知识点" class="headerlink" title="Vue知识点"></a><strong>Vue知识点</strong></h3><ol>
<li>Vue技术选型分析</li>
<li>API后端接口数据填充到Vue组件模板</li>
<li>Vue代码结构分析</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;技术要点&quot;&gt;&lt;a href=&quot;#技术要点&quot; class=&quot;headerlink&quot; title=&quot;技术要点&quot;&gt;&lt;/a&gt;&lt;strong&gt;技术要点&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Vue + Django REST Framework前后端分离技术&lt;/li&gt;
&lt;li&gt;restful api开发流程&lt;/li&gt;
&lt;li&gt;Django REST Framework的功能实现和核心源码分析&lt;/li&gt;
&lt;li&gt;Sentry完成线上系统的错误日志的监控和告警&lt;/li&gt;
&lt;li&gt;第三方登录和支付宝支付的集成&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Django，Vue" scheme="http://yoursite.com/categories/Django%EF%BC%8CVue/"/>
    
    
      <category term="Django，Vue，Rest" scheme="http://yoursite.com/tags/Django%EF%BC%8CVue%EF%BC%8CRest/"/>
    
  </entry>
  
  <entry>
    <title>Mac配置Privoxy设置go get代理</title>
    <link href="http://yoursite.com/2017/10/17/mac-privoxy/"/>
    <id>http://yoursite.com/2017/10/17/mac-privoxy/</id>
    <published>2017-10-17T05:18:54.000Z</published>
    <updated>2017-10-17T05:56:35.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Privoxy"><a href="#安装Privoxy" class="headerlink" title="安装Privoxy"></a><strong>安装Privoxy</strong></h2><p>地址：<a href="https://www.privoxy.org/sf-download-mirror/" target="_blank" rel="external">https://www.privoxy.org/sf-download-mirror/</a></p>
<a id="more"></a>
<h2 id="配置Privoxy"><a href="#配置Privoxy" class="headerlink" title="配置Privoxy"></a><strong>配置Privoxy</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /Applications/Privoxy</div><div class="line"><span class="comment"># 监听8118端口</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'listen-address 0.0.0.0:8118'</span> &gt;&gt; /usr/<span class="built_in">local</span>/etc/privoxy/config</div><div class="line"><span class="comment"># 设置转发socks5服务器</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'forward-socks5 / localhost:1080 .'</span> &gt;&gt; /usr/<span class="built_in">local</span>/etc/privoxy/config</div></pre></td></tr></table></figure>
<p>发现提示错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-bash: /usr/<span class="built_in">local</span>/etc/privoxy/config: Permission denied</div></pre></td></tr></table></figure>
<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改/usr/local目录的所有者与组</span></div><div class="line">sudo chown -R <span class="string">"<span class="variable">$USER</span>"</span>:admin /usr/<span class="built_in">local</span></div></pre></td></tr></table></figure>
<h2 id="配置HTTP代理"><a href="#配置HTTP代理" class="headerlink" title="配置HTTP代理"></a><strong>配置HTTP代理</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果你使用bash</span></div><div class="line">vim ~/.bashrc</div><div class="line"><span class="comment"># 如果你使用zsh</span></div><div class="line">vim ~/.zshrc</div><div class="line"><span class="comment"># 加入</span></div><div class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118/</div><div class="line"><span class="comment"># 保存退出</span></div><div class="line"><span class="comment"># source 使其即刻生效</span></div><div class="line"><span class="built_in">source</span> ~/.bashrc</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="built_in">source</span> ~/.zshrc</div></pre></td></tr></table></figure>
<h2 id="测试Privoxy"><a href="#测试Privoxy" class="headerlink" title="测试Privoxy"></a><strong>测试Privoxy</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">lawtech@lawdeMacBook-Pro:/Applications/Privoxy$ curl www.google.com</div><div class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html;charset=utf-8"</span>&gt;</div><div class="line">&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</div><div class="line">&lt;H1&gt;302 Moved&lt;/H1&gt;</div><div class="line">The document has moved</div><div class="line">&lt;A HREF=<span class="string">"http://www.google.co.jp/?gfe_rd=cr&amp;amp;dcr=0&amp;amp;ei=G5flWZmXKa_o8Ae9j7PADw"</span>&gt;here&lt;/A&gt;.</div><div class="line">&lt;/BODY&gt;&lt;/HTML&gt;</div></pre></td></tr></table></figure>
<p>终于可以开心地go get了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Privoxy&quot;&gt;&lt;a href=&quot;#安装Privoxy&quot; class=&quot;headerlink&quot; title=&quot;安装Privoxy&quot;&gt;&lt;/a&gt;&lt;strong&gt;安装Privoxy&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;地址：&lt;a href=&quot;https://www.privoxy.org/sf-download-mirror/&quot;&gt;https://www.privoxy.org/sf-download-mirror/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go，Mac，Privoxy" scheme="http://yoursite.com/tags/Go%EF%BC%8CMac%EF%BC%8CPrivoxy/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——scrapyd部署scrapy爬虫</title>
    <link href="http://yoursite.com/2017/07/27/scrapyd/"/>
    <id>http://yoursite.com/2017/07/27/scrapyd/</id>
    <published>2017-07-27T12:18:54.000Z</published>
    <updated>2017-07-27T15:22:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>在完成scrapy项目之后，就要进入项目实际部署环节。</p>
<a id="more"></a>
<p>传送门：<a href="https://github.com/scrapy/scrapyd" target="_blank" rel="external">scrapyd</a></p>
<p>首先在我们之前爬虫项目的虚拟环境<code>article_spider</code>中安装scrapyd：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(article_spider) lawtech@lawdeMacBook-Pro-2:~$ pip install scrapyd lawtech@lawdeMacBook-Pro-2:~$ pip install scrapyd-client</div></pre></td></tr></table></figure>
<p><code>scrapyd-client</code>就没必要在虚拟环境中安装了。</p>
<p>在scrapy项目中，有一个文件<code>scrapy.cfg</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Automatically created by: scrapy startproject</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># For more information about the [deploy] section see:</span></div><div class="line"><span class="comment"># https://scrapyd.readthedocs.org/en/latest/deploy.html</span></div><div class="line"></div><div class="line">[settings]</div><div class="line">default = ArticleSpider.settings</div><div class="line"></div><div class="line">[deploy:lawtech]</div><div class="line">url = http://localhost:<span class="number">6800</span>/</div><div class="line">project = ArticleSpider</div></pre></td></tr></table></figure>
<p>其中的deploy就是为scrapyd服务的。</p>
<p>要部署项目，首先要启动scrapyd：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">lawtech@lawdeMacBook-Pro-2:~$ workon article_spider</div><div class="line">(article_spider) lawtech@lawdeMacBook-Pro-2:~$ scrapyd</div><div class="line">2017-07-27T23:14:51+0800 [-] Loading /Users/lawtech/myvirtualenvs/article_spider/lib/python3.5/site-packages/scrapyd/txapp.py...</div><div class="line">2017-07-27T23:14:52+0800 [-] Scrapyd web console available at http://127.0.0.1:6800/</div><div class="line">2017-07-27T23:14:52+0800 [-] Loaded.</div><div class="line">2017-07-27T23:14:52+0800 [twisted.scripts._twistd_unix.UnixAppLogger#info] twistd 17.1.0 (/Users/lawtech/myvirtualenvs/article_spider/bin/python3.5 3.5.2) starting up.</div><div class="line">2017-07-27T23:14:52+0800 [twisted.scripts._twistd_unix.UnixAppLogger#info] reactor class: twisted.internet.selectreactor.SelectReactor.</div><div class="line">2017-07-27T23:14:52+0800 [-] Site starting on 6800</div><div class="line">2017-07-27T23:14:52+0800 [twisted.web.server.Site#info] Starting factory &lt;twisted.web.server.Site object at 0x107a97198&gt;</div><div class="line">2017-07-27T23:14:52+0800 [Launcher] Scrapyd 1.2.0 started: max_proc=16, runner=&apos;scrapyd.runner&apos;</div></pre></td></tr></table></figure>
<p>部署项目：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(article_spider) lawtech@lawdeMacBook-Pro-2:~/PycharmProjects/ArticleSpider$ scrapyd-deploy lawtech -p ArticleSpider</div><div class="line">Packing version 1501168592</div><div class="line">Deploying to project &quot;ArticleSpider&quot; in http://localhost:6800/addversion.json</div><div class="line">Server response (200):</div><div class="line">&#123;&quot;status&quot;: &quot;ok&quot;, &quot;version&quot;: &quot;1501168592&quot;, &quot;spiders&quot;: 3, &quot;project&quot;: &quot;ArticleSpider&quot;, &quot;node_name&quot;: &quot;lawdeMacBook-Pro-2.local&quot;&#125;</div></pre></td></tr></table></figure>
<p>现在只是将项目部署到目标地址，但是没有调度爬虫，调度爬虫需要用到curl命令，在<a href="http://localhost:6800" target="_blank" rel="external">http://localhost:6800</a>有提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://localhost:6800/schedule.json -d project=default -d spider=somespider</div></pre></td></tr></table></figure>
<p>只需要改动一下即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lawtech@lawdeMacBook-Pro-2:~/PycharmProjects/ArticleSpider$ curl http://localhost:6800/schedule.json -d project=ArticleSpider -d spider=jobbole</div><div class="line">&#123;&quot;status&quot;: &quot;ok&quot;, &quot;jobid&quot;: &quot;2466c76872df11e7846da45e60ba3bb7&quot;, &quot;node_name&quot;: &quot;lawdeMacBook-Pro-2.local&quot;&#125;</div></pre></td></tr></table></figure>
<p>然后即可在<a href="http://127.0.0.1:6800/jobs" target="_blank" rel="external">http://127.0.0.1:6800/jobs</a>查看调度结果了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在完成scrapy项目之后，就要进入项目实际部署环节。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python，scrapyd" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython%EF%BC%8Cscrapyd/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——总结</title>
    <link href="http://yoursite.com/2017/07/27/scrapy-summary/"/>
    <id>http://yoursite.com/2017/07/27/scrapy-summary/</id>
    <published>2017-07-27T12:18:54.000Z</published>
    <updated>2017-07-27T15:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<ol>
<li>开发环境搭建</li>
<li>技术选型</li>
<li>伯乐在线爬取</li>
<li>知乎爬虫</li>
<li>拉勾网站整站爬虫</li>
<li>爬虫与反爬虫</li>
<li>scrapy进阶开发</li>
<li>scrapy-redis分布式开发</li>
<li>elasticsearch的基础知识</li>
<li>django搭建搜索网站</li>
<li>scrapyd部署scrapy项目</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;开发环境搭建&lt;/li&gt;
&lt;li&gt;技术选型&lt;/li&gt;
&lt;li&gt;伯乐在线爬取&lt;/li&gt;
&lt;li&gt;知乎爬虫&lt;/li&gt;
&lt;li&gt;拉勾网站整站爬虫&lt;/li&gt;
&lt;li&gt;爬虫与反爬虫&lt;/li&gt;
&lt;li&gt;scrapy进阶开发&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python，ElasticSearch" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython%EF%BC%8CElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Django搭建搜索网站</title>
    <link href="http://yoursite.com/2017/07/20/django-elasticsearch/"/>
    <id>http://yoursite.com/2017/07/20/django-elasticsearch/</id>
    <published>2017-07-20T12:18:54.000Z</published>
    <updated>2017-07-27T14:26:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在完成Scrapy和Elasticsearch的基本学习之后，下面就要利用Django开始搭建我们的搜索网站。</p>
<a id="more"></a>
<h2 id="es完成搜索建议-搜索建议字段保存"><a href="#es完成搜索建议-搜索建议字段保存" class="headerlink" title="es完成搜索建议-搜索建议字段保存"></a>es完成搜索建议-搜索建议字段保存</h2><p>传送门：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-completion.html" target="_blank" rel="external">Completion Suggester</a></p>
<p>为了完成搜索时自动补全的功能，我们在<code>es_types.py</code>中加入一个字段<code>suggest = Completion(analyzer=ik_analyzer)</code>，由于源码冲突问题，我们需要自定义一个analyzer：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> elasticsearch_dsl.analysis <span class="keyword">import</span> CustomAnalyzer <span class="keyword">as</span> _CustomAnalyzer</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomAnalyzer</span><span class="params">(_CustomAnalyzer)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    自定义Analyzer</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_analysis_definition</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> &#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">ik_analyzer = CustomAnalyzer(<span class="string">"ik_max_word"</span>, filter=[<span class="string">"lowercase"</span>])</div></pre></td></tr></table></figure>
<p>然后重新生成索引：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fhf7k4qfqxj30xe0v4n1s.jpg" alt=""></p>
<p>我们需要为article生成搜索建议词，所以在<code>save_to_es()</code>函数中加入<code>article.suggest = [{&quot;input&quot;:[], &quot;weight&quot;:2}]</code>，然后我们需要自己写一个方法通过之前的analyze接口生成搜索建议：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> elasticsearch_dsl.connections <span class="keyword">import</span> connections</div><div class="line"></div><div class="line"><span class="comment"># 生成es的实例</span></div><div class="line">es = connections.create_connection(ArticleType._doc_type.using)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_suggests</span><span class="params">(index, info_tuple)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    根据字符串生成搜索建议数组</div><div class="line">    """</div><div class="line">    used_words = set()</div><div class="line">    suggests = []</div><div class="line">    <span class="keyword">for</span> text, weight <span class="keyword">in</span> info_tuple:</div><div class="line">        <span class="keyword">if</span> text:</div><div class="line">            <span class="comment"># 调用es的analyze接口分析字符串</span></div><div class="line">            words = es.indices.analyze(index=index, analyzer=<span class="string">"ik_max_word"</span>, params=&#123;<span class="string">"filter"</span>: [<span class="string">"lowercase"</span>]&#125;, body=text)</div><div class="line">            analyzed_words = set(r[<span class="string">"token"</span>] <span class="keyword">for</span> r <span class="keyword">in</span> words[<span class="string">"tokens"</span>] <span class="keyword">if</span> len(r[<span class="string">"token"</span>]) &gt; <span class="number">1</span>)</div><div class="line">            new_words = analyzed_words - used_words</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            new_words = set()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> new_words:</div><div class="line">            suggests.append(&#123;<span class="string">"input"</span>: list(new_words), <span class="string">"weight"</span>: weight&#125;)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> suggests</div></pre></td></tr></table></figure>
<p>所以之前的代码就可以修改为</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_es</span><span class="params">(self)</span>:</span></div><div class="line">        article = ArticleType()</div><div class="line">        article.title = self[<span class="string">'title'</span>]</div><div class="line">        article.create_date = self[<span class="string">"create_date"</span>]</div><div class="line">        article.content = remove_tags(self[<span class="string">"content"</span>])</div><div class="line">        article.front_image_url = self[<span class="string">"front_image_url"</span>]</div><div class="line">        <span class="keyword">if</span> <span class="string">"front_image_path"</span> <span class="keyword">in</span> self:</div><div class="line">            article.front_image_path = self[<span class="string">"front_image_path"</span>]</div><div class="line">        article.praise_nums = self[<span class="string">"praise_nums"</span>]</div><div class="line">        article.fav_nums = self[<span class="string">"fav_nums"</span>]</div><div class="line">        article.comment_nums = self[<span class="string">"comment_nums"</span>]</div><div class="line">        article.url = self[<span class="string">"url"</span>]</div><div class="line">        article.tags = self[<span class="string">"tags"</span>]</div><div class="line">        article.meta.id = self[<span class="string">"url_object_id"</span>]</div><div class="line">        </div><div class="line">        article.suggest = gen_suggests(ArticleType._doc_type.index, ((article.title,<span class="number">10</span>),(article.tags, <span class="number">7</span>)))</div><div class="line">        article.save()</div><div class="line">        <span class="keyword">return</span></div></pre></td></tr></table></figure>
<p>这样我们就完成了suggest字段的准备。</p>
<h2 id="Django实现Elasticsearch的搜索建议"><a href="#Django实现Elasticsearch的搜索建议" class="headerlink" title="Django实现Elasticsearch的搜索建议"></a><strong>Django实现Elasticsearch的搜索建议</strong></h2><p>不想写了，没耐心了，巴拉巴拉~~</p>
<p>直接传送门走起：<a href="https://github.com/lawtech0902/LcvSearch" target="_blank" rel="external">LcvSearch</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在完成Scrapy和Elasticsearch的基本学习之后，下面就要利用Django开始搭建我们的搜索网站。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python，Django，Elasticsearch" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython%EF%BC%8CDjango%EF%BC%8CElasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Elasticsearch搜索引擎的使用</title>
    <link href="http://yoursite.com/2017/07/09/elasticsearch-usage/"/>
    <id>http://yoursite.com/2017/07/09/elasticsearch-usage/</id>
    <published>2017-07-09T12:18:54.000Z</published>
    <updated>2017-07-09T15:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch介绍"><a href="#Elasticsearch介绍" class="headerlink" title="Elasticsearch介绍"></a><strong>Elasticsearch介绍</strong></h2><p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>
<p>我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望我们的搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题以及可能出现的更多其它问题。</p>
<a id="more"></a>
<h2 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="Elasticsearch安装"></a><strong>Elasticsearch安装</strong></h2><ol>
<li>Elasticsearch-RTF安装</li>
</ol>
<p><strong>什么是Elasticsearch-RTF？</strong> RTF是Ready To Fly的缩写，在航模里面，表示无需自己组装零件即可直接上手即飞的航空模型，Elasticsearch-RTF是针对中文的一个发行版，即使用最新稳定的elasticsearch版本，并且帮你下载测试好对应的插件，如中文分词插件等，目的是让你可以下载下来就可以直接的使用（虽然es已经很简单了，但是很多新手还是需要去花时间去找配置，中间的过程其实很痛苦），当然等你对这些都熟悉了之后，你完全可以自己去diy了，跟linux的众多发行版是一个意思。</p>
<p>当前版本 Elasticsearch 5.1.1</p>
<p>传送门：<a href="https://github.com/medcl/elasticsearch-rtf" target="_blank" rel="external">Elasticsearch-RTF</a></p>
<ol>
<li>head插件和kibana的安装</li>
</ol>
<p>传送门：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="external">elasticsearch-head</a>，<a href="https://www.elastic.co/products/kibana" target="_blank" rel="external">kibana</a></p>
<p>安装方式在github地址中都有详细说明。</p>
<p>注意：在elsticsearch.yml中添加如下设置，使得elasticsearch-head能够连接到elasticsearch。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># security policy configuration, allowing third-party plugins connection.</span></div><div class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></div><div class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></div><div class="line"><span class="string">http.cors.allow-methods:</span> <span class="string">OPTIONS,</span> <span class="string">HEAD,</span> <span class="string">GET,</span> <span class="string">POST,</span> <span class="string">PUT,</span> <span class="string">DELETE</span></div><div class="line"><span class="string">http.cors.allow-headers:</span> <span class="string">"X-Requested-With, Content-Type, Content-Length, X-User"</span></div></pre></td></tr></table></figure>
<h2 id="Elasticsearch的基本概念"><a href="#Elasticsearch的基本概念" class="headerlink" title="Elasticsearch的基本概念"></a>Elasticsearch的基本概念</h2><p>传送门：<a href="https://endymecy.gitbooks.io/elasticsearch-guide-chinese/content/getting-started/basic-concepts.html" target="_blank" rel="external">基本概念</a></p>
<h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a><strong>倒排索引</strong></h2><p>倒排索引（英语：Inverted index），也常被称为反向索引、置入档案或反向档案，是一种索引方法，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。它是文档检索系统中最常用的数据结构。</p>
<p>有两种不同的反向索引形式：</p>
<ul>
<li>一条记录的水平反向索引（或者反向档案索引）包含每个引用单词的文档的列表。</li>
<li>一个单词的水平反向索引（或者完全反向索引）又包含每个单词在一个文档中的位置。</li>
</ul>
<p>后者的形式提供了更多的兼容性（比如短语搜索），但是需要更多的时间和空间来创建。</p>
<p>传送门：<a href="https://es.xiaoleilu.com/052_Mapping_Analysis/35_Inverted_index.html" target="_blank" rel="external">倒排索引</a></p>
<p>这个例子很好，所以搬来：</p>
<p>以英文为例，下面是要被索引的文本：</p>
<ul>
<li>T0=<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1ab3d9202f18a678affe9a339511bef0a7b8b110" alt="{\displaystyle T_{0}=}"><code>&quot;it is what it is&quot;</code></li>
<li>T1=<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/57ac5840245616f79874f4635b3bcb2e3da344dd" alt="{\displaystyle T_{1}=}"><code>&quot;what is it&quot;</code></li>
<li>T2=”it is a banana”</li>
</ul>
<p>我们就能得到下面的反向文件索引：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;a&quot;:      &#123;2&#125;</div><div class="line">&quot;banana&quot;: &#123;2&#125;</div><div class="line">&quot;is&quot;:     &#123;0, 1, 2&#125;</div><div class="line">&quot;it&quot;:     &#123;0, 1, 2&#125;</div><div class="line">&quot;what&quot;:   &#123;0, 1&#125;</div></pre></td></tr></table></figure>
<p>检索的条件”what”, “is” 和 “it” 将对应这个集合：{0,1}∩{0,1,2}∩{0,1,2}={0,1}。</p>
<p>对相同的文字，我们得到后面这些完全反向索引，有文档数量和当前查询的单词结果组成的的成对数据。 同样，文档数量和当前查询的单词结果都从零开始。所以，”banana”: {(2, 3)} 就是说 “banana”在第三个文档里 (T2)，而且在第三个文档的位置是第四个单词(地址为 3)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;a&quot;:      &#123;(2, 2)&#125;</div><div class="line">&quot;banana&quot;: &#123;(2, 3)&#125;</div><div class="line">&quot;is&quot;:     &#123;(0, 1), (0, 4), (1, 1), (2, 1)&#125;</div><div class="line">&quot;it&quot;:     &#123;(0, 0), (0, 3), (1, 2), (2, 0)&#125; </div><div class="line">&quot;what&quot;:   &#123;(0, 2), (1, 0)&#125;</div></pre></td></tr></table></figure>
<p>如果我们执行短语搜索”what is it” 我们得到这个短语的全部单词各自的结果所在文档为文档0和文档1。但是这个短语检索的连续的条件仅仅在文档1得到。</p>
<h2 id="Elasticsearch基本的索引和文档CRUD操作"><a href="#Elasticsearch基本的索引和文档CRUD操作" class="headerlink" title="Elasticsearch基本的索引和文档CRUD操作"></a>Elasticsearch基本的索引和文档CRUD操作</h2><p>我们在Kibana Dev Tools的Console中进行这些操作。</p>
<ol>
<li>创建索引</li>
</ol>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fh7v9fmdryj31kw0fc0x9.jpg" alt=""></p>
<p>添加索引完成后，elasticsearch-head中显示如下：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fh7va0tji6j31kw0cygpo.jpg" alt=""></p>
<p>实际上，在head中也可以添加索引：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fh7vb41pvbj30m806yq3c.jpg" alt=""></p>
<p>这两种方式是等效的，只是在Kibana中我们使用的是Rest API。</p>
<ol>
<li>获取settings</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 获取settings</div><div class="line">GET lagou/_settings</div><div class="line">GET _all/_settings</div><div class="line">GET .kibana,lagou/_settings</div><div class="line">GET _settings</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"># GET lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET _all/_settings</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;.kibana&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499073856161&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;1&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;g_cP7qZERXiVeKEwjbNE1g&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;.kibana&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET .kibana,lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;.kibana&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499073856161&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;1&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;g_cP7qZERXiVeKEwjbNE1g&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;.kibana&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET _settings</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;.kibana&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499073856161&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;1&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;g_cP7qZERXiVeKEwjbNE1g&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;.kibana&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>修改settings</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 修改settings</div><div class="line">PUT lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;number_of_replicas&quot;: 2</div><div class="line">&#125;</div><div class="line"></div><div class="line">PUT lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;number_of_shards&quot;: 2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># PUT lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;acknowledged&quot;: true</div><div class="line">&#125;</div><div class="line"></div><div class="line"># PUT lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;error&quot;: &#123;</div><div class="line">    &quot;root_cause&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;type&quot;: &quot;illegal_argument_exception&quot;,</div><div class="line">        &quot;reason&quot;: &quot;can&apos;t change the number of shards for an index&quot;</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    &quot;type&quot;: &quot;illegal_argument_exception&quot;,</div><div class="line">    &quot;reason&quot;: &quot;can&apos;t change the number of shards for an index&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;status&quot;: 400</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于shards一旦设置就不能更改，所以第二个操作失败。</p>
<ol>
<li>获取索引信息</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 获取索引信息</div><div class="line">GET _all</div><div class="line">GET lagou</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"># GET _all</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;aliases&quot;: &#123;&#125;,</div><div class="line">    &quot;mappings&quot;: &#123;&#125;,</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;2&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;.kibana&quot;: &#123;</div><div class="line">    &quot;aliases&quot;: &#123;&#125;,</div><div class="line">    &quot;mappings&quot;: &#123;</div><div class="line">      &quot;index-pattern&quot;: &#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">          &quot;fieldFormatMap&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;fields&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;intervalName&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;notExpandable&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;boolean&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;sourceFilters&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timeFieldName&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;title&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;config&quot;: &#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">          &quot;buildNum&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;keyword&quot;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;timelion-sheet&quot;: &#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">          &quot;description&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;hits&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;integer&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;kibanaSavedObjectMeta&quot;: &#123;</div><div class="line">            &quot;properties&quot;: &#123;</div><div class="line">              &quot;searchSourceJSON&quot;: &#123;</div><div class="line">                &quot;type&quot;: &quot;text&quot;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_chart_height&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;integer&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_columns&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;integer&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_interval&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_other_interval&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_rows&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;integer&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_sheet&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;title&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;version&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;integer&quot;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;server&quot;: &#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">          &quot;uuid&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;keyword&quot;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499073856161&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;1&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;g_cP7qZERXiVeKEwjbNE1g&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;.kibana&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET lagou</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;aliases&quot;: &#123;&#125;,</div><div class="line">    &quot;mappings&quot;: &#123;&#125;,</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;2&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>保存文档</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># 保存文档</div><div class="line">PUT lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;:&quot;python分布式爬虫开发&quot;,</div><div class="line">  &quot;salary_min&quot;:15000,</div><div class="line">  &quot;city&quot;:&quot;北京&quot;,</div><div class="line">  &quot;company&quot;:&#123;</div><div class="line">    &quot;name&quot;:&quot;百度&quot;,</div><div class="line">    &quot;company_addr&quot;:&quot;北京市软件园&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;publish_date&quot;:&quot;2017-4-16&quot;,</div><div class="line">  &quot;comments&quot;:15</div><div class="line">&#125;</div><div class="line"></div><div class="line">POST lagou/job/</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;:&quot;python django 开发工程师&quot;,</div><div class="line">  &quot;salary_min&quot;:30000,</div><div class="line">  &quot;city&quot;:&quot;上海&quot;,</div><div class="line">  &quot;company&quot;:&#123;</div><div class="line">    &quot;name&quot;:&quot;美团科技&quot;,</div><div class="line">    &quot;company_addr&quot;:&quot;北京市软件园A区&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;publish_date&quot;:&quot;2017-4-16&quot;,</div><div class="line">  &quot;comments&quot;:20</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># PUT lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST lagou/job/</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;AV0MzKkUnOriGeBA_nYi&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在elasticsearch-head中显示如下：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fh7x0a0953j30g00fuq50.jpg" alt=""><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fh7x0f4prhj30eu0fqdhn.jpg" alt=""></p>
<p>分别采用PUT和POST方法保存两个文档，采用POST方法时未指定id仍然保存成功，id为系统分配的uuid。</p>
<ol>
<li>获取文档</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 获取文档</div><div class="line">GET lagou/job/1</div><div class="line">GET lagou/job/1?_source=title</div><div class="line">GET lagou/job/1?_source=title,city</div><div class="line">GET lagou/job/1?_source</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"># GET lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;found&quot;: true,</div><div class="line">  &quot;_source&quot;: &#123;</div><div class="line">    &quot;title&quot;: &quot;python分布式爬虫开发&quot;,</div><div class="line">    &quot;salary_min&quot;: 15000,</div><div class="line">    &quot;city&quot;: &quot;北京&quot;,</div><div class="line">    &quot;company&quot;: &#123;</div><div class="line">      &quot;name&quot;: &quot;百度&quot;,</div><div class="line">      &quot;company_addr&quot;: &quot;北京市软件园&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;publish_date&quot;: &quot;2017-4-16&quot;,</div><div class="line">    &quot;comments&quot;: 15</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET lagou/job/1?_source=title</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;found&quot;: true,</div><div class="line">  &quot;_source&quot;: &#123;</div><div class="line">    &quot;title&quot;: &quot;python分布式爬虫开发&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET lagou/job/1?_source=title,city</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;found&quot;: true,</div><div class="line">  &quot;_source&quot;: &#123;</div><div class="line">    &quot;city&quot;: &quot;北京&quot;,</div><div class="line">    &quot;title&quot;: &quot;python分布式爬虫开发&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET lagou/job/1?_source</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;found&quot;: true,</div><div class="line">  &quot;_source&quot;: &#123;</div><div class="line">    &quot;title&quot;: &quot;python分布式爬虫开发&quot;,</div><div class="line">    &quot;salary_min&quot;: 15000,</div><div class="line">    &quot;city&quot;: &quot;北京&quot;,</div><div class="line">    &quot;company&quot;: &#123;</div><div class="line">      &quot;name&quot;: &quot;百度&quot;,</div><div class="line">      &quot;company_addr&quot;: &quot;北京市软件园&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;publish_date&quot;: &quot;2017-4-16&quot;,</div><div class="line">    &quot;comments&quot;: 15</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>修改文档</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 修改文档</div><div class="line">PUT lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;:&quot;python分布式爬虫开发&quot;,</div><div class="line">  &quot;salary_min&quot;:15000,</div><div class="line">  &quot;company&quot;:&#123;</div><div class="line">    &quot;name&quot;:&quot;百度&quot;,</div><div class="line">    &quot;company_addr&quot;:&quot;北京市软件园&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;publish_date&quot;:&quot;2017-4-16&quot;,</div><div class="line">  &quot;comments&quot;:15</div><div class="line">&#125;</div><div class="line"></div><div class="line">POST lagou/job/1/_update</div><div class="line">&#123;</div><div class="line">  &quot;doc&quot;:&#123;</div><div class="line">    &quot;comments&quot;:20</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># PUT lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 2,</div><div class="line">  &quot;result&quot;: &quot;updated&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: false</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST lagou/job/1/_update</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 3,</div><div class="line">  &quot;result&quot;: &quot;updated&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改文档有两种方式，一种是PUT覆盖更新方式，一种是POST增量更新方式。</p>
<ol>
<li>删除</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 删除</div><div class="line"></div><div class="line"># 删除文档</div><div class="line">DELETE lagou/job/1</div><div class="line"></div><div class="line"># 删除索引</div><div class="line">DELETE lagou/</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># DELETE lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;found&quot;: true,</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 4,</div><div class="line">  &quot;result&quot;: &quot;deleted&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># DELETE lagou/</div><div class="line">&#123;</div><div class="line">  &quot;acknowledged&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Elasticsearch的mget和bulk批量操作"><a href="#Elasticsearch的mget和bulk批量操作" class="headerlink" title="Elasticsearch的mget和bulk批量操作"></a>Elasticsearch的mget和bulk批量操作</h2><h3 id="mget"><a href="#mget" class="headerlink" title="mget"></a><strong>mget</strong></h3><p>像Elasticsearch一样，检索多个文档依旧非常快。合并多个请求可以避免每个请求单独的网络开销。如果你需要从Elasticsearch中检索多个文档，相对于一个一个的检索，更快的方式是在一个请求中使用multi-get或者mget API。</p>
<p><code>mget</code> API参数是一个<code>docs</code>数组，数组的每个节点定义一个文档的<code>_index</code>、<code>_type</code>、<code>_id</code>元数据。如果你只想检索一个或几个确定的字段，也可以定义一个<code>_source</code>参数。</p>
<p>为了演示mget操作，我们新建了一个索引testdb，其下文档如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fh7yk9bbz0j30k2076t9m.jpg" alt=""></p>
<p>第一种：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 查询job1 id为1的数据，job2 id为2的数据</div><div class="line">GET _mget</div><div class="line">&#123;</div><div class="line">  &quot;docs&quot;:[</div><div class="line">    &#123;</div><div class="line">      &quot;_index&quot;:&quot;testdb&quot;,</div><div class="line">      &quot;_type&quot;:&quot;job1&quot;,</div><div class="line">      &quot;_id&quot;:1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;_index&quot;:&quot;testdb&quot;,</div><div class="line">      &quot;_type&quot;:&quot;job2&quot;,</div><div class="line">      &quot;_id&quot;:2</div><div class="line">    &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;docs&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;_index&quot;: &quot;testdb&quot;,</div><div class="line">      &quot;_type&quot;: &quot;job1&quot;,</div><div class="line">      &quot;_id&quot;: &quot;1&quot;,</div><div class="line">      &quot;_version&quot;: 1,</div><div class="line">      &quot;found&quot;: true,</div><div class="line">      &quot;_source&quot;: &#123;</div><div class="line">        &quot;title&quot;: &quot;job1_1&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;_index&quot;: &quot;testdb&quot;,</div><div class="line">      &quot;_type&quot;: &quot;job2&quot;,</div><div class="line">      &quot;_id&quot;: &quot;2&quot;,</div><div class="line">      &quot;_version&quot;: 1,</div><div class="line">      &quot;found&quot;: true,</div><div class="line">      &quot;_source&quot;: &#123;</div><div class="line">        &quot;title&quot;: &quot;job2_2&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种方法，在url里传递索引名称：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 第二种方法，在url中传递索引名称</div><div class="line">GET testdb/_mget</div><div class="line">&#123;</div><div class="line">  &quot;docs&quot;:[</div><div class="line">    &#123;</div><div class="line">      &quot;_type&quot;:&quot;job1&quot;,</div><div class="line">      &quot;_id&quot;:1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;_type&quot;:&quot;job2&quot;,</div><div class="line">      &quot;_id&quot;:2</div><div class="line">    &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果都是一样的。</p>
<p>如果查询的数据index和type都相同，则可以将type也传入到url中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 查询的数据索引名称相同，type也相同</div><div class="line">GET testdb/job1/_mget</div><div class="line">&#123;</div><div class="line">  &quot;docs&quot;:[</div><div class="line">    &#123;</div><div class="line">      &quot;_id&quot;:1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;_id&quot;:2</div><div class="line">    &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外还有一种简写方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 只需要传递id即可</div><div class="line">GET testdb/job1/_mget</div><div class="line">&#123;</div><div class="line">  &quot;ids&quot;:[1,2]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>两者结果相同。</p>
<h3 id="bulk"><a href="#bulk" class="headerlink" title="bulk"></a><strong>bulk</strong></h3><p>就像<code>mget</code>允许我们一次性检索多个文档一样，<code>bulk</code> API允许我们使用单一请求来实现多个文档的<code>create</code>、<code>index</code>、<code>update</code>或<code>delete</code>。这对索引类似于日志活动这样的数据流非常有用，它们可以以成百上千的数据为一个批次按序进行索引。</p>
<p>传送门：<a href="https://es.xiaoleilu.com/030_Data/55_Bulk.html" target="_blank" rel="external">更新时的批量操作</a></p>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># bulk操作</div><div class="line">POST _bulk</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;lagou&quot;, &quot;_type&quot;:&quot;job&quot;, &quot;_id&quot;:1&#125;&#125;</div><div class="line">&#123;&quot;title&quot;:&quot;python分布式爬虫开发&quot;,&quot;salary_min&quot;:15000,&quot;city&quot;:&quot;北京&quot;,&quot;company&quot;:&#123;&quot;name&quot;:&quot;百度&quot;,&quot;company_addr&quot;:&quot;北京市软件园&quot;&#125;,&quot;publish_date&quot;:&quot;2017-4-16&quot;,&quot;comments&quot;:15&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;lagou&quot;, &quot;_type&quot;:&quot;job2&quot;, &quot;_id&quot;:2&#125;&#125;</div><div class="line">&#123;&quot;title&quot;:&quot;python django开发&quot;,&quot;salary_min&quot;:30000,&quot;city&quot;:&quot;成都&quot;,&quot;company&quot;:&#123;&quot;name&quot;:&quot;阿里巴巴&quot;,&quot;company_addr&quot;:&quot;北京市软件园B区&quot;&#125;,&quot;publish_date&quot;:&quot;2017-4-18&quot;,&quot;comments&quot;:50&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 462,</div><div class="line">  &quot;errors&quot;: false,</div><div class="line">  &quot;items&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;1&quot;,</div><div class="line">        &quot;_version&quot;: 1,</div><div class="line">        &quot;result&quot;: &quot;created&quot;,</div><div class="line">        &quot;_shards&quot;: &#123;</div><div class="line">          &quot;total&quot;: 2,</div><div class="line">          &quot;successful&quot;: 1,</div><div class="line">          &quot;failed&quot;: 0</div><div class="line">        &#125;,</div><div class="line">        &quot;created&quot;: true,</div><div class="line">        &quot;status&quot;: 201</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job2&quot;,</div><div class="line">        &quot;_id&quot;: &quot;2&quot;,</div><div class="line">        &quot;_version&quot;: 1,</div><div class="line">        &quot;result&quot;: &quot;created&quot;,</div><div class="line">        &quot;_shards&quot;: &#123;</div><div class="line">          &quot;total&quot;: 2,</div><div class="line">          &quot;successful&quot;: 1,</div><div class="line">          &quot;failed&quot;: 0</div><div class="line">        &#125;,</div><div class="line">        &quot;created&quot;: true,</div><div class="line">        &quot;status&quot;: 201</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Elasticsearch的mapping映射管理"><a href="#Elasticsearch的mapping映射管理" class="headerlink" title="Elasticsearch的mapping映射管理"></a><strong>Elasticsearch的mapping映射管理</strong></h2><p>为了能够把日期字段处理成日期，把数字字段处理成数字，把字符串字段处理成全文本（Full-text）或精确的字符串值，Elasticsearch需要知道每个字段里面都包含了什么类型。这些类型和字段的信息存储（包含）在映射（mapping）中。</p>
<p>索引中每个文档都有一个<strong>类型(type)</strong>。 每个类型拥有自己的<strong>映射(mapping)</strong>或者<strong>模式定义(schema definition)</strong>。一个映射定义了字段类型，每个字段的数据类型，以及字段被Elasticsearch处理的方式。映射还用于设置关联到类型上的元数据。</p>
<p>传送门：<a href="https://es.xiaoleilu.com/052_Mapping_Analysis/45_Mapping.html" target="_blank" rel="external">映射</a></p>
<p>测试：</p>
<p>创建映射：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># 创建索引</div><div class="line">PUT lagou</div><div class="line">&#123;</div><div class="line">  &quot;mappings&quot;: &#123;</div><div class="line">    &quot;job&quot;: &#123;</div><div class="line">      &quot;properties&quot;: &#123;</div><div class="line">        &quot;title&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;text&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;salary_min&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;integer&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;city&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;keyword&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;company&quot;: &#123;</div><div class="line">          &quot;properties&quot;: &#123;</div><div class="line">            &quot;name&quot;: &#123;</div><div class="line">              &quot;type&quot;: &quot;text&quot;</div><div class="line">            &#125;,</div><div class="line">            &quot;company_addr&quot;: &#123;</div><div class="line">              &quot;type&quot;: &quot;text&quot;</div><div class="line">            &#125;,</div><div class="line">            &quot;employee_count&quot;: &#123;</div><div class="line">              &quot;type&quot;: &quot;integer&quot;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        &quot;publish_date&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;date&quot;,</div><div class="line">          &quot;format&quot;: &quot;yyyy-MM-dd&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;comments&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;integer&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>放入数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 放入数据</div><div class="line">PUT lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;python分布式爬虫开发&quot;,</div><div class="line">  &quot;salary_min&quot;: 15000,</div><div class="line">  &quot;city&quot;: &quot;北京&quot;,</div><div class="line">  &quot;company&quot;: &#123;</div><div class="line">    &quot;name&quot;: &quot;百度&quot;,</div><div class="line">    &quot;company_addr&quot;: &quot;北京市软件园&quot;,</div><div class="line">    &quot;employee_count&quot;: 50</div><div class="line">  &#125;,</div><div class="line">  &quot;publish_date&quot;: &quot;2017-4-18&quot;,</div><div class="line">  &quot;comments&quot;: 15</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以在elasticsearch-head中查看结果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fh8zznx62dj30x80vagpy.jpg" alt=""></p>
<p>如果我们对放入的数据稍做修改，将<code>&quot;salary_min&quot;:15000</code>改为<code>&quot;salary_min&quot;:&quot;15000&quot;</code>，操作还是可以完成的，这是因为mappings会对其进行类型转换得到我们所要的<code>integer</code>类型。</p>
<p>如果将<code>&quot;salary_min&quot;:15000</code>改为<code>&quot;salary_min&quot;:&quot;abc&quot;</code>，那就会出错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;error&quot;: &#123;</div><div class="line">    &quot;root_cause&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;type&quot;: &quot;mapper_parsing_exception&quot;,</div><div class="line">        &quot;reason&quot;: &quot;failed to parse [salary_min]&quot;</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    &quot;type&quot;: &quot;mapper_parsing_exception&quot;,</div><div class="line">    &quot;reason&quot;: &quot;failed to parse [salary_min]&quot;,</div><div class="line">    &quot;caused_by&quot;: &#123;</div><div class="line">      &quot;type&quot;: &quot;number_format_exception&quot;,</div><div class="line">      &quot;reason&quot;: &quot;For input string: \&quot;abc\&quot;&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;status&quot;: 400</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取mapping：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET lagou/_mapping</div><div class="line">GET lagou/mapping/job</div><div class="line">GET _all/_mapping</div><div class="line">GET _all/_mapping/job</div></pre></td></tr></table></figure>
<h2 id="Elasticsearch的简单查询"><a href="#Elasticsearch的简单查询" class="headerlink" title="Elasticsearch的简单查询"></a>Elasticsearch的简单查询</h2><p>查询分类：</p>
<ul>
<li>基本查询：使用Elasticsearch内置查询条件进行查询</li>
<li>组合查询：把多个查询组合在一起进行复合查询</li>
<li>过滤：查询同时，通过filter条件下在不影响打分的情况下筛选数据</li>
</ul>
<p>测试，首先添加映射：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># 添加映射</div><div class="line">PUT lagou</div><div class="line">&#123;</div><div class="line">  &quot;mappings&quot;: &#123;</div><div class="line">    &quot;job&quot;: &#123;</div><div class="line">      &quot;properties&quot;: &#123;</div><div class="line">        &quot;title&quot;: &#123;</div><div class="line">          &quot;store&quot;: true,</div><div class="line">          &quot;type&quot;: &quot;text&quot;,</div><div class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;company_name&quot;: &#123;</div><div class="line">          &quot;store&quot;: true,</div><div class="line">          &quot;type&quot;: &quot;keyword&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;desc&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;text&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;comments&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;integer&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;add_time&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;date&quot;,</div><div class="line">          &quot;format&quot;: &quot;yyyy-MM-dd&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：”ik_max_word”是分析器类型的一种，会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合。</p>
<p>传送门：<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">elasticsearch-analysis-ik</a></p>
<p>然后添加我们准备好的数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># 添加数据</div><div class="line">POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;python django 开发工程师&quot;,</div><div class="line">  &quot;company_name&quot;: &quot;美团科技有限公司&quot;,</div><div class="line">  &quot;desc&quot;: &quot;对django的概念熟悉，熟悉python基础知识&quot;,</div><div class="line">  &quot;comments&quot;: 20,</div><div class="line">  &quot;add_time&quot;: &quot;2017-4-1&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;python scrapy redis分布式爬虫基本&quot;,</div><div class="line">  &quot;company_name&quot;: &quot;百度科技有限公司&quot;,</div><div class="line">  &quot;desc&quot;: &quot;对scrapy的概念熟悉，熟悉redis的基本操作&quot;,</div><div class="line">  &quot;comments&quot;: 5,</div><div class="line">  &quot;add_time&quot;: &quot;2017-4-15&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;elasticsearch打造搜索引擎&quot;,</div><div class="line">  &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">  &quot;desc&quot;: &quot;熟悉数据结构算法，熟悉python的基本开发&quot;,</div><div class="line">  &quot;comments&quot;: 15,</div><div class="line">  &quot;add_time&quot;: &quot;2017-6-20&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;python打造推荐引擎系统&quot;,</div><div class="line">  &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">  &quot;desc&quot;: &quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,</div><div class="line">  &quot;comments&quot;: 60,</div><div class="line">  &quot;add_time&quot;: &quot;2017-10-20&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"># POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;AV0RoWS6nOriGeBA_nYq&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;AV0RoWUJnOriGeBA_nYr&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就可以测试查询操作了。</p>
<ol>
<li><code>match</code>查询，</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># match查询</div><div class="line">GET lagou/job/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match&quot;: &#123;</div><div class="line">      &quot;title&quot;: &quot;Python&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 200,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;max_score&quot;: 0.25811607,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">        &quot;_score&quot;: 0.25811607,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python打造推荐引擎系统&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,</div><div class="line">          &quot;comments&quot;: 60,</div><div class="line">          &quot;add_time&quot;: &quot;2017-10-20&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">        &quot;_score&quot;: 0.19944568,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python django 开发工程师&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;美团科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对django的概念熟悉，熟悉python基础知识&quot;,</div><div class="line">          &quot;comments&quot;: 20,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-1&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWS6nOriGeBA_nYq&quot;,</div><div class="line">        &quot;_score&quot;: 0.1383129,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python scrapy redis分布式爬虫基本&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;百度科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对scrapy的概念熟悉，熟悉redis的基本操作&quot;,</div><div class="line">          &quot;comments&quot;: 5,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-15&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果把<code>&quot;title&quot;:&quot;python&quot;</code>改为<code>&quot;title&quot;:&quot;Python&quot;</code>，依然能得到和上面一样的搜索结果，因为ik的分词器为自动地进行大小写转换。</p>
<ol>
<li><code>term</code>查询：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># term查询</div><div class="line">GET lagou/job/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;term&quot;: &#123;</div><div class="line">      &quot;title&quot;: &quot;python&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现查询的结果和match查询是一样的，但两者是有区别的，match查询经过ik分词，而term查询是把整个词拿去匹配的，就好像type是keyword一样，不对查询词做任何处理。</p>
<ol>
<li><code>terms</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># terms查询</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;terms&quot;: &#123;</div><div class="line">      &quot;title&quot;: [&quot;工程师&quot;, &quot;django&quot;, &quot;系统&quot;]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 11,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;max_score&quot;: 1.5164987,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">        &quot;_score&quot;: 1.5164987,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python django 开发工程师&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;美团科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对django的概念熟悉，熟悉python基础知识&quot;,</div><div class="line">          &quot;comments&quot;: 20,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-1&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">        &quot;_score&quot;: 0.25811607,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python打造推荐引擎系统&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,</div><div class="line">          &quot;comments&quot;: 60,</div><div class="line">          &quot;add_time&quot;: &quot;2017-10-20&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>terms查询的特点是可以在查询时传入一个列表。</p>
<ol>
<li>控制查询的返回数量</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 控制查询的返回数量</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match&quot;: &#123;</div><div class="line">      &quot;title&quot;: &quot;python&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;from&quot;: 1,</div><div class="line">  &quot;size&quot;: 2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过from和size来控制结果的返回数量。</p>
<ol>
<li><code>match_all</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># match_all查询</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match_all&quot;: &#123;&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>match_all查询会返回所有结果。</p>
<ol>
<li><code>match_phrase</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># match_phrase短语查询</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match_phrase&quot;: &#123;</div><div class="line">      &quot;title&quot;: &#123;</div><div class="line">        &quot;query&quot;: &quot;python系统&quot;,</div><div class="line">        &quot;slop&quot;: 6</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 82,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 1,</div><div class="line">    &quot;max_score&quot;: 0.1133824,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">        &quot;_score&quot;: 0.1133824,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python打造推荐引擎系统&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,</div><div class="line">          &quot;comments&quot;: 60,</div><div class="line">          &quot;add_time&quot;: &quot;2017-10-20&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>slop</code>值表示两个词之间的最小距离。</p>
<ol>
<li><code>multi_match</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># multi_match查询</div><div class="line"># 比如可以指定多个字段</div><div class="line"># 比如查询title和desc这两个字段里面包含python的关键词文档</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;multi_match&quot;: &#123;</div><div class="line">      &quot;query&quot;: &quot;python&quot;,</div><div class="line">      &quot;fields&quot;: [&quot;title^3&quot;,&quot;desc&quot;]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>&quot;title^3&quot;</code>的意思是为title设置较高的权重，对最后结果的排序有影响。</p>
<ol>
<li>指定返回字段</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;stored_fields&quot;: [&quot;title&quot;,&quot;company_name&quot;],</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match&quot;: &#123;</div><div class="line">      &quot;title&quot;: &quot;python&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 13,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;max_score&quot;: 0.25811607,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">        &quot;_score&quot;: 0.25811607,</div><div class="line">        &quot;fields&quot;: &#123;</div><div class="line">          &quot;title&quot;: [</div><div class="line">            &quot;python打造推荐引擎系统&quot;</div><div class="line">          ],</div><div class="line">          &quot;company_name&quot;: [</div><div class="line">            &quot;阿里巴巴科技有限公司&quot;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">        &quot;_score&quot;: 0.19944568,</div><div class="line">        &quot;fields&quot;: &#123;</div><div class="line">          &quot;title&quot;: [</div><div class="line">            &quot;python django 开发工程师&quot;</div><div class="line">          ],</div><div class="line">          &quot;company_name&quot;: [</div><div class="line">            &quot;美团科技有限公司&quot;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWS6nOriGeBA_nYq&quot;,</div><div class="line">        &quot;_score&quot;: 0.1383129,</div><div class="line">        &quot;fields&quot;: &#123;</div><div class="line">          &quot;title&quot;: [</div><div class="line">            &quot;python scrapy redis分布式爬虫基本&quot;</div><div class="line">          ],</div><div class="line">          &quot;company_name&quot;: [</div><div class="line">            &quot;百度科技有限公司&quot;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>通过sort把结果排序</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 通过sort把结果排序</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match_all&quot;: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;sort&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;comments&quot;: &#123;</div><div class="line">        &quot;order&quot;: &quot;desc&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 21,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 4,</div><div class="line">    &quot;max_score&quot;: null,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">        &quot;_score&quot;: null,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python打造推荐引擎系统&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,</div><div class="line">          &quot;comments&quot;: 60,</div><div class="line">          &quot;add_time&quot;: &quot;2017-10-20&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;sort&quot;: [</div><div class="line">          60</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">        &quot;_score&quot;: null,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python django 开发工程师&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;美团科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对django的概念熟悉，熟悉python基础知识&quot;,</div><div class="line">          &quot;comments&quot;: 20,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-1&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;sort&quot;: [</div><div class="line">          20</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWUJnOriGeBA_nYr&quot;,</div><div class="line">        &quot;_score&quot;: null,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;elasticsearch打造搜索引擎&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉数据结构算法，熟悉python的基本开发&quot;,</div><div class="line">          &quot;comments&quot;: 15,</div><div class="line">          &quot;add_time&quot;: &quot;2017-6-20&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;sort&quot;: [</div><div class="line">          15</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWS6nOriGeBA_nYq&quot;,</div><div class="line">        &quot;_score&quot;: null,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python scrapy redis分布式爬虫基本&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;百度科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对scrapy的概念熟悉，熟悉redis的基本操作&quot;,</div><div class="line">          &quot;comments&quot;: 5,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-15&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;sort&quot;: [</div><div class="line">          5</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>range</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 查询范围</div><div class="line"># range查询</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;range&quot;: &#123;</div><div class="line">      &quot;comments&quot;: &#123;</div><div class="line">        &quot;gte&quot;: 10,</div><div class="line">        &quot;lte&quot;: 20,</div><div class="line">        &quot;boost&quot;: 2.0</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查询10&lt;=comments&lt;=20的结果。</p>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 37,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;max_score&quot;: 2,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">        &quot;_score&quot;: 2,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python django 开发工程师&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;美团科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对django的概念熟悉，熟悉python基础知识&quot;,</div><div class="line">          &quot;comments&quot;: 20,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-1&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWUJnOriGeBA_nYr&quot;,</div><div class="line">        &quot;_score&quot;: 2,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;elasticsearch打造搜索引擎&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉数据结构算法，熟悉python的基本开发&quot;,</div><div class="line">          &quot;comments&quot;: 15,</div><div class="line">          &quot;add_time&quot;: &quot;2017-6-20&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以对时间进行range查询：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;range&quot;: &#123;</div><div class="line">      &quot;add_time&quot;: &#123;</div><div class="line">        &quot;gte&quot;: &quot;2017-04-01&quot;,</div><div class="line">        &quot;lte&quot;: &quot;now&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>wildcard</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># wildcard查询</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;wildcard&quot;: &#123;</div><div class="line">      &quot;title&quot;: &#123;</div><div class="line">        &quot;value&quot;: &quot;pyth*n&quot;,</div><div class="line">        &quot;boost&quot;: 2.0</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>wildcard查询支持通配符。</p>
<h2 id="Elasticsearch的bool组合查询"><a href="#Elasticsearch的bool组合查询" class="headerlink" title="Elasticsearch的bool组合查询"></a><strong>Elasticsearch的bool组合查询</strong></h2><p>首先使用bulk操作建立测试数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># bool查询</div><div class="line"># 老版本的filtered已经被bool替换</div><div class="line"># 用bool包括must should must_not filter来完成，格式如下：</div><div class="line"># bool:&#123;</div><div class="line">#	&quot;filter&quot;:[],</div><div class="line">#	&quot;must&quot;:[],</div><div class="line">#	&quot;should&quot;:[],</div><div class="line">#	&quot;must_not&quot;:&#123;&#125;,</div><div class="line"># &#125;</div><div class="line"></div><div class="line"># 建立测试数据</div><div class="line">POST lagou/testjob/_bulk</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:1&#125;&#125;</div><div class="line">&#123;&quot;salary&quot;:10, &quot;title&quot;:&quot;Python&quot;&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:2&#125;&#125;</div><div class="line">&#123;&quot;salary&quot;:20, &quot;title&quot;:&quot;Scrapy&quot;&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:3&#125;&#125;</div><div class="line">&#123;&quot;salary&quot;:30, &quot;title&quot;:&quot;Django&quot;&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:4&#125;&#125;</div><div class="line">&#123;&quot;salary&quot;:30, &quot;title&quot;:&quot;Elasticsearch&quot;&#125;</div></pre></td></tr></table></figure>
<p>接下来介绍简单的过滤查询：</p>
<ol>
<li>最简单的<code>filter</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 薪资为20k的工作</div><div class="line"># select * from testjob where salary=20</div><div class="line">GET lagou/testjob/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;must&quot;:&#123;</div><div class="line">        &quot;match_all&quot;:&#123;&#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;filter&quot;: &#123;</div><div class="line">        &quot;term&quot;: &#123;</div><div class="line">          &quot;salary&quot;: &quot;20&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 43,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 1,</div><div class="line">    &quot;max_score&quot;: 1,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;2&quot;,</div><div class="line">        &quot;_score&quot;: 1,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 20,</div><div class="line">          &quot;title&quot;: &quot;Scrapy&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>也可以指定多个值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 也可以指定多个值</div><div class="line">GET lagou/testjob/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;must&quot;:&#123;</div><div class="line">        &quot;match_all&quot;:&#123;&#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;filter&quot;: &#123;</div><div class="line">        &quot;terms&quot;: &#123;</div><div class="line">          &quot;salary&quot;:[10,20]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 39,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;max_score&quot;: 1,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;2&quot;,</div><div class="line">        &quot;_score&quot;: 1,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 20,</div><div class="line">          &quot;title&quot;: &quot;Scrapy&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;1&quot;,</div><div class="line">        &quot;_score&quot;: 1,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 10,</div><div class="line">          &quot;title&quot;: &quot;Python&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>职位查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># select * from testjob where title=&quot;Python&quot;</div><div class="line">GET lagou/testjob/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;must&quot;:&#123;</div><div class="line">        &quot;match_all&quot;:&#123;&#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;filter&quot;: &#123;</div><div class="line">        &quot;match&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;Python&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者把<code>&quot;Python&quot;</code>变为小写<code>&quot;python&quot;</code>那么也可以用<code>term</code>。</p>
<ol>
<li>查看分析器解析的结果</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET _analyze</div><div class="line">&#123;</div><div class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,</div><div class="line">  &quot;text&quot;: &quot;Python网络开发工程师&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;python&quot;,</div><div class="line">      &quot;start_offset&quot;: 0,</div><div class="line">      &quot;end_offset&quot;: 6,</div><div class="line">      &quot;type&quot;: &quot;ENGLISH&quot;,</div><div class="line">      &quot;position&quot;: 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;网络&quot;,</div><div class="line">      &quot;start_offset&quot;: 6,</div><div class="line">      &quot;end_offset&quot;: 8,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;络&quot;,</div><div class="line">      &quot;start_offset&quot;: 7,</div><div class="line">      &quot;end_offset&quot;: 8,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;开发&quot;,</div><div class="line">      &quot;start_offset&quot;: 8,</div><div class="line">      &quot;end_offset&quot;: 10,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;发&quot;,</div><div class="line">      &quot;start_offset&quot;: 9,</div><div class="line">      &quot;end_offset&quot;: 10,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;工程师&quot;,</div><div class="line">      &quot;start_offset&quot;: 10,</div><div class="line">      &quot;end_offset&quot;: 13,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;工程&quot;,</div><div class="line">      &quot;start_offset&quot;: 10,</div><div class="line">      &quot;end_offset&quot;: 12,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 6</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;师&quot;,</div><div class="line">      &quot;start_offset&quot;: 12,</div><div class="line">      &quot;end_offset&quot;: 13,</div><div class="line">      &quot;type&quot;: &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot;: 7</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果用<code>ik_smart</code>会怎样呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;python&quot;,</div><div class="line">      &quot;start_offset&quot;: 0,</div><div class="line">      &quot;end_offset&quot;: 6,</div><div class="line">      &quot;type&quot;: &quot;ENGLISH&quot;,</div><div class="line">      &quot;position&quot;: 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;网络&quot;,</div><div class="line">      &quot;start_offset&quot;: 6,</div><div class="line">      &quot;end_offset&quot;: 8,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;开发&quot;,</div><div class="line">      &quot;start_offset&quot;: 8,</div><div class="line">      &quot;end_offset&quot;: 10,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;工程师&quot;,</div><div class="line">      &quot;start_offset&quot;: 10,</div><div class="line">      &quot;end_offset&quot;: 13,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 3</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>bool过滤查询，可以做组合过滤查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># select * from testjob where (salary=20 or title=Python) AND (salary != 30)</div><div class="line"># 查询薪资等于20k或者工作为python的工作，排除价格为30k的</div><div class="line">GET lagou/testjob/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;should&quot;: [</div><div class="line">        &#123;&quot;term&quot;:&#123;&quot;salary&quot;:20&#125;&#125;,</div><div class="line">        &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;python&quot;&#125;&#125;</div><div class="line">      ],</div><div class="line">      &quot;must_not&quot;: &#123;</div><div class="line">        &quot;term&quot;:&#123;&quot;price&quot;:30&#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 5,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;max_score&quot;: 1,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;2&quot;,</div><div class="line">        &quot;_score&quot;: 1,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 20,</div><div class="line">          &quot;title&quot;: &quot;Scrapy&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;1&quot;,</div><div class="line">        &quot;_score&quot;: 0.2876821,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 10,</div><div class="line">          &quot;title&quot;: &quot;Python&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>嵌套查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># select * from testjob where title=&quot;python&quot; or (title=&quot;elasticsearch&quot; AND salary=30)</div><div class="line">GET lagou/testjob/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;should&quot;: [</div><div class="line">        &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;python&quot;&#125;&#125;,</div><div class="line">        &#123;&quot;bool&quot;:&#123;</div><div class="line">          &quot;must&quot;: [</div><div class="line">            &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;elasticsearch&quot;&#125;&#125;,</div><div class="line">            &#123;&quot;term&quot;:&#123;&quot;salary&quot;:30&#125;&#125;</div><div class="line">          ]</div><div class="line">        &#125;&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 16,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;max_score&quot;: 1.6931472,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;4&quot;,</div><div class="line">        &quot;_score&quot;: 1.6931472,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 30,</div><div class="line">          &quot;title&quot;: &quot;Elasticsearch&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;1&quot;,</div><div class="line">        &quot;_score&quot;: 0.2876821,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 10,</div><div class="line">          &quot;title&quot;: &quot;Python&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面需要介绍过滤空和非空的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># 过滤空和非空</div><div class="line"># 建立测试数据</div><div class="line">POST lagou/testjob2/_bulk</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</div><div class="line">&#123;&quot;tags&quot;:[&quot;search&quot;]&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</div><div class="line">&#123;&quot;tags&quot;:[&quot;search&quot;,&quot;python&quot;]&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;3&quot;&#125;&#125;</div><div class="line">&#123;&quot;other_field&quot;:[&quot;some data&quot;]&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;4&quot;&#125;&#125;</div><div class="line">&#123;&quot;tags&quot;:null&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;5&quot;&#125;&#125;</div><div class="line">&#123;&quot;tags&quot;:[&quot;search&quot;, null]&#125;</div><div class="line"></div><div class="line"># 处理null空值的方法</div><div class="line"># select tags from testjob2 where tags is not NULL</div><div class="line">GET lagou/testjob2/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;filter&quot;: &#123;</div><div class="line">        &quot;exists&quot;: &#123;</div><div class="line">          &quot;field&quot;: &quot;tags&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 过滤非空值</div><div class="line">GET lagou/testjob2/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;must_not&quot;: &#123;</div><div class="line">        &quot;exists&quot;: &#123;</div><div class="line">          &quot;field&quot;: &quot;tags&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="scrapy写入数据到Elasticsearch中"><a href="#scrapy写入数据到Elasticsearch中" class="headerlink" title="scrapy写入数据到Elasticsearch中"></a>scrapy写入数据到Elasticsearch中</h2><p>我们在scrapy中依靠pipeline来将数据写入到Elasticsearch中，这里需要介绍一个es的python接口<strong>elasticsearch-dsl-py</strong>。</p>
<p>传送门：<a href="https://github.com/elastic/elasticsearch-dsl-py" target="_blank" rel="external"><strong>elasticsearch-dsl-py</strong></a></p>
<p>安装：<code>pip install elasticsearch-dsl</code></p>
<p>在根目录下新建一个models包，在包内建立<code>es_types.py</code>文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> elasticsearch_dsl <span class="keyword">import</span> DocType, Date, Nested, Boolean, \</div><div class="line">    analyzer, InnerObjectWrapper, Completion, Keyword, Text, Integer</div><div class="line"><span class="keyword">from</span> elasticsearch_dsl.connections <span class="keyword">import</span> connections</div><div class="line"></div><div class="line"><span class="comment"># 连接本机es</span></div><div class="line">connections.create_connection(hosts=[<span class="string">"localhost"</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleType</span><span class="params">(DocType)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    伯乐在线文章类型</div><div class="line">    """</div><div class="line">    title = Text(analyzer=<span class="string">"ik_max_word"</span>)</div><div class="line">    create_date = Date()</div><div class="line">    url = Keyword()</div><div class="line">    url_object_id = Keyword()</div><div class="line">    front_image_url = Keyword()</div><div class="line">    front_image_path = Keyword()</div><div class="line">    praise_nums = Integer()</div><div class="line">    comment_nums = Integer()</div><div class="line">    fav_nums = Integer()</div><div class="line">    tags = Text(analyzer=<span class="string">"ik_max_word"</span>)</div><div class="line">    content = Text(analyzer=<span class="string">"ik_max_word"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        index = <span class="string">"jobbole"</span></div><div class="line">        doc_type = <span class="string">"article"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    ArticleType.init()</div></pre></td></tr></table></figure>
<p>这样就可以很方便地在es中建立我们所需要的mappings，和Django中的models十分相似。</p>
<p>运行后我们可以再es-head中查看：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fhe1yg1rqrj30x60v4dk5.jpg" alt=""></p>
<p><code>pipelines.py</code>中代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> models.es_types <span class="keyword">import</span> ArticleType</div><div class="line"><span class="keyword">from</span> w3lib.html <span class="keyword">import</span> remove_tags</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    将数据写入es中</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="comment"># 将item转换为es的数据</span></div><div class="line">        article = ArticleType()</div><div class="line">        article.title = item[<span class="string">"title"</span>]</div><div class="line">        article.create_date = item[<span class="string">"create_date"</span>]</div><div class="line">        article.content = remove_tags(item[<span class="string">"content"</span>])</div><div class="line">        article.front_image_url = item[<span class="string">"front_image_url"</span>]</div><div class="line">        <span class="keyword">if</span> <span class="string">"front_image_path"</span> <span class="keyword">in</span> item:</div><div class="line">            article.front_image_path = item[<span class="string">"front_image_path"</span>]</div><div class="line">        article.praise_nums = item[<span class="string">"praise_nums"</span>]</div><div class="line">        article.fav_nums = item[<span class="string">"fav_nums"</span>]</div><div class="line">        article.comment_nums = item[<span class="string">"comment_nums"</span>]</div><div class="line">        article.url = item[<span class="string">"url"</span>]</div><div class="line">        article.tags = item[<span class="string">"tags"</span>]</div><div class="line">        article.meta.id = item[<span class="string">"url_object_id"</span>]</div><div class="line"></div><div class="line">        article.save()</div><div class="line"></div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p>调试之后发现数据顺利地进入到了es中：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhe2aueglhj30xg0v8dtn.jpg" alt=""></p>
<p>为了进行对所有数据进行统一处理，我们可以把数据转换的逻辑拿到<code>items.py</code>中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_es</span><span class="params">(self)</span>:</span></div><div class="line">    article = ArticleType()</div><div class="line">    article.title = self[<span class="string">"title"</span>]</div><div class="line">    article.create_date = self[<span class="string">"create_date"</span>]</div><div class="line">    article.content = remove_tags(self[<span class="string">"content"</span>])</div><div class="line">    article.front_image_url = self[<span class="string">"front_image_url"</span>]</div><div class="line">    <span class="keyword">if</span> <span class="string">"front_image_path"</span> <span class="keyword">in</span> self:</div><div class="line">        article.front_image_path = self[<span class="string">"front_image_path"</span>]</div><div class="line">    article.praise_nums = self[<span class="string">"praise_nums"</span>]</div><div class="line">    article.fav_nums = self[<span class="string">"fav_nums"</span>]</div><div class="line">    article.comment_nums = self[<span class="string">"comment_nums"</span>]</div><div class="line">    article.url = self[<span class="string">"url"</span>]</div><div class="line">    article.tags = self[<span class="string">"tags"</span>]</div><div class="line">    article.meta.id = self[<span class="string">"url_object_id"</span>]</div><div class="line"></div><div class="line">    article.save()</div><div class="line">    <span class="keyword">return</span></div></pre></td></tr></table></figure>
<p><code>pipelines.py</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    将数据写入es中</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="comment"># 将item转换为es的数据</span></div><div class="line">        item.save_to_es()</div><div class="line"></div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p>其他的知乎拉勾的爬虫数据转换也基本类似。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Elasticsearch介绍&quot;&gt;&lt;a href=&quot;#Elasticsearch介绍&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;Elasticsearch介绍&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&lt;/p&gt;
&lt;p&gt;我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望我们的搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题以及可能出现的更多其它问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python, Elasticsearch" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython-Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——scrapy-redis分布式爬虫</title>
    <link href="http://yoursite.com/2017/07/01/scrapy-redis/"/>
    <id>http://yoursite.com/2017/07/01/scrapy-redis/</id>
    <published>2017-07-01T12:18:54.000Z</published>
    <updated>2017-07-03T07:07:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式爬虫要点"><a href="#分布式爬虫要点" class="headerlink" title="分布式爬虫要点"></a><strong>分布式爬虫要点</strong></h2><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fh4hbyf2moj30h50byq4t.jpg" alt=""></p>
<h3 id="分布式爬虫的优点"><a href="#分布式爬虫的优点" class="headerlink" title="分布式爬虫的优点"></a><strong>分布式爬虫的优点</strong></h3><ul>
<li>充分利用多机器的宽带加速爬取</li>
<li>充分利用多机的IP加速爬取速度</li>
</ul>
<p>问题：<strong>为什么scrapy不支持分布式？</strong></p>
<p>答：在scrapy中scheduler是运行在队列中的，而队列是在单机内存中的，服务器上爬虫是无法利用内存的队列做任何处理，所以scrapy不支持分布式。</p>
<h3 id="分布式爬虫需要解决的问题"><a href="#分布式爬虫需要解决的问题" class="headerlink" title="分布式爬虫需要解决的问题"></a><strong>分布式爬虫需要解决的问题</strong></h3><ul>
<li>requests队列集中管理</li>
<li>去重集中管理</li>
</ul>
<p>综上，我们需要使用Redis来解决这些问题。</p>
<a id="more"></a>
<h2 id="Redis基础知识"><a href="#Redis基础知识" class="headerlink" title="Redis基础知识"></a><strong>Redis基础知识</strong></h2><p>Redis的基础知识在我早前的文章中已经学习过了，在这里就不介绍了，直接看之前的文章就行。</p>
<p>传送门：<a href="http://lawtech0902.com/categories/Redis/" target="_blank" rel="external">Redis学习笔记</a></p>
<h2 id="scrapy-redis编写分布式爬虫代码"><a href="#scrapy-redis编写分布式爬虫代码" class="headerlink" title="scrapy-redis编写分布式爬虫代码"></a><strong>scrapy-redis编写分布式爬虫代码</strong></h2><p>传送门：1.<a href="https://github.com/rmax/scrapy-redis" target="_blank" rel="external">scapy-redis Github</a>  2.<a href="http://scrapy-redis.readthedocs.io/en/stable/" target="_blank" rel="external">scrapy-redis 文档</a></p>
<p>其实大部分的逻辑是一样的，只需要在spider中加入<code>redis_key = &#39;spidername:start_urls&#39;</code>，以及修改一些settings.py中配置即可。</p>
<h2 id="scrapy-redis源码解析"><a href="#scrapy-redis源码解析" class="headerlink" title="scrapy-redis源码解析"></a><strong>scrapy-redis源码解析</strong></h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fh5szm7gkpj30920bo0tq.jpg" alt=""></p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a><strong>项目结构</strong></h3><p><strong>connection.py</strong></p>
<p>负责根据setting中配置实例化redis连接。被dupefilter和scheduler调用，总之涉及到redis存取的都要使用到这个模块。</p>
<p><strong>dupefilter.py</strong></p>
<p>负责执行requst的去重，实现的很有技巧性，使用redis的set数据结构。但是注意scheduler并不使用其中用于在这个模块中实现的dupefilter键做request的调度，而是使用queue.py模块中实现的queue。</p>
<p>当request不重复时，将其存入到queue中，调度时将其弹出。</p>
<p><strong>queue.py</strong></p>
<p>其作用如II所述，但是这里实现了三种方式的queue：</p>
<p>FIFO的SpiderQueue，SpiderPriorityQueue，以及LIFI的SpiderStack。默认使用的是第二中，这也就是出现之前文章中所分析情况的原因（链接：）。</p>
<p><strong>pipelines.py</strong></p>
<p>这是是用来实现分布式处理的作用。它将Item存储在redis中以实现分布式处理。</p>
<p>另外可以发现，同样是编写pipelines，在这里的编码实现不同于文章（链接：）中所分析的情况，由于在这里需要读取配置，所以就用到了from_crawler()函数。</p>
<p><strong>scheduler.py</strong></p>
<p>此扩展是对scrapy中自带的scheduler的替代（在settings的SCHEDULER变量中指出），正是利用此扩展实现crawler的分布式调度。其利用的数据结构来自于queue中实现的数据结构。</p>
<p>scrapy-redis所实现的两种分布式：爬虫分布式以及item处理分布式就是由模块scheduler和模块pipelines实现。上述其它模块作为为二者辅助的功能模块。</p>
<p><strong>spider.py</strong></p>
<p>设计的这个spider从redis中读取要爬的url,然后执行爬取，若爬取过程中返回更多的url，那么继续进行直至所有的request完成。之后继续从redis中读取url，循环这个过程。</p>
<p>分析：在这个spider中通过connect signals.spider_idle信号实现对crawler状态的监视。当idle时，返回新的make_requests_from_url(url)给引擎，进而交给调度器调度。</p>
<h3 id="架构解析"><a href="#架构解析" class="headerlink" title="架构解析"></a><strong>架构解析</strong></h3><p>Scrapy架构：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fh5vaf92i0j30jk0ba0un.jpg" alt=""></p>
<p>scrapy-redis架构：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fh5v9jlr53j30j50b240g.jpg" alt=""></p>
<p>如上图所示，scrapy-redis在scrapy的架构上增加了redis，基于redis的特性拓展了如下组件：</p>
<ul>
<li>调度器（Scheduler）：scrapy-redis调度器通过redis的set不重复的特性，巧妙的实现了Duplication Filter去重（DupeFilter set存放爬取过的request）。Spider新生成的request，将request的指纹到redis的DupeFilter set检查是否重复，并将不重复的request push写入redis的request队列。调度器每次从redis的request队列里根据优先级pop出一个request, 将此request发给spider处理。</li>
<li>Item Pipeline：将Spider爬取到的Item给scrapy-redis的Item Pipeline，将爬取到的Item存入redis的items队列。可以很方便的从items队列中提取item，从而实现items processes 集群</li>
</ul>
<h2 id="集成bloomfilter到scrapy-redis中"><a href="#集成bloomfilter到scrapy-redis中" class="headerlink" title="集成bloomfilter到scrapy-redis中"></a><strong>集成bloomfilter到scrapy-redis中</strong></h2><p>传送门：<a href="http://www.it610.com/article/4376832.htm" target="_blank" rel="external">bloomfilter算法详解及实例</a></p>
<p>算法实现：<a href="https://github.com/liyaopinner/BloomFilter_imooc" target="_blank" rel="external">bloomfilter_imooc</a></p>
<p><code>dupefilter.py</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy.dupefilters <span class="keyword">import</span> BaseDupeFilter</div><div class="line"><span class="keyword">from</span> scrapy.utils.request <span class="keyword">import</span> request_fingerprint</div><div class="line"></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> defaults</div><div class="line"><span class="keyword">from</span> .connection <span class="keyword">import</span> get_redis_from_settings</div><div class="line"><span class="keyword">from</span> ScrapyRedisTest.utils.bloomfilter <span class="keyword">import</span> PyBloomFilter, conn</div><div class="line"></div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># <span class="doctag">TODO:</span> Rename class to RedisDupeFilter.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RFPDupeFilter</span><span class="params">(BaseDupeFilter)</span>:</span></div><div class="line">    <span class="string">"""Redis-based request duplicates filter.</span></div><div class="line"></div><div class="line">    This class can also be used with default Scrapy's scheduler.</div><div class="line"></div><div class="line">    """</div><div class="line"></div><div class="line">    logger = logger</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server, key, debug=False)</span>:</span></div><div class="line">        <span class="string">"""Initialize the duplicates filter.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        server : redis.StrictRedis</div><div class="line">            The redis server instance.</div><div class="line">        key : str</div><div class="line">            Redis key Where to store fingerprints.</div><div class="line">        debug : bool, optional</div><div class="line">            Whether to log filtered requests.</div><div class="line"></div><div class="line">        """</div><div class="line">        self.server = server</div><div class="line">        self.key = key</div><div class="line">        self.debug = debug</div><div class="line">        self.logdupes = <span class="keyword">True</span></div><div class="line"></div><div class="line">        self.bf = PyBloomFilter(conn=conn, key=key)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_settings</span><span class="params">(cls, settings)</span>:</span></div><div class="line">        <span class="string">"""Returns an instance from given settings.</span></div><div class="line"></div><div class="line">        This uses by default the key ``dupefilter:&lt;timestamp&gt;``. When using the</div><div class="line">        ``scrapy_redis.scheduler.Scheduler`` class, this method is not used as</div><div class="line">        it needs to pass the spider name in the key.</div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        settings : scrapy.settings.Settings</div><div class="line"></div><div class="line">        Returns</div><div class="line">        -------</div><div class="line">        RFPDupeFilter</div><div class="line">            A RFPDupeFilter instance.</div><div class="line"></div><div class="line"></div><div class="line">        """</div><div class="line">        server = get_redis_from_settings(settings)</div><div class="line">        <span class="comment"># <span class="doctag">XXX:</span> This creates one-time key. needed to support to use this</span></div><div class="line">        <span class="comment"># class as standalone dupefilter with scrapy's default scheduler</span></div><div class="line">        <span class="comment"># if scrapy passes spider on open() method this wouldn't be needed</span></div><div class="line">        <span class="comment"># <span class="doctag">TODO:</span> Use SCRAPY_JOB env as default and fallback to timestamp.</span></div><div class="line">        key = defaults.DUPEFILTER_KEY % &#123;<span class="string">'timestamp'</span>: int(time.time())&#125;</div><div class="line">        debug = settings.getbool(<span class="string">'DUPEFILTER_DEBUG'</span>)</div><div class="line">        <span class="keyword">return</span> cls(server, key=key, debug=debug)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        <span class="string">"""Returns instance from crawler.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        crawler : scrapy.crawler.Crawler</div><div class="line"></div><div class="line">        Returns</div><div class="line">        -------</div><div class="line">        RFPDupeFilter</div><div class="line">            Instance of RFPDupeFilter.</div><div class="line"></div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> cls.from_settings(crawler.settings)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_seen</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="string">"""Returns True if request was already seen.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        request : scrapy.http.Request</div><div class="line"></div><div class="line">        Returns</div><div class="line">        -------</div><div class="line">        bool</div><div class="line"></div><div class="line">        """</div><div class="line">        fp = self.request_fingerprint(request)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.bf.is_exist(fp):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.bf.add(fp)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="comment"># This returns the number of values added, zero if already exists.</span></div><div class="line">        <span class="comment"># added = self.server.sadd(self.key, fp)</span></div><div class="line">        <span class="comment"># return added == 0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_fingerprint</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="string">"""Returns a fingerprint for a given request.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        request : scrapy.http.Request</div><div class="line"></div><div class="line">        Returns</div><div class="line">        -------</div><div class="line">        str</div><div class="line"></div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> request_fingerprint(request)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self, reason=<span class="string">''</span>)</span>:</span></div><div class="line">        <span class="string">"""Delete data on close. Called by Scrapy's scheduler.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        reason : str, optional</div><div class="line"></div><div class="line">        """</div><div class="line">        self.clear()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Clears fingerprints data."""</span></div><div class="line">        self.server.delete(self.key)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        <span class="string">"""Logs given request.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        request : scrapy.http.Request</div><div class="line">        spider : scrapy.spiders.Spider</div><div class="line"></div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> self.debug:</div><div class="line">            msg = <span class="string">"Filtered duplicate request: %(request)s"</span></div><div class="line">            self.logger.debug(msg, &#123;<span class="string">'request'</span>: request&#125;, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</div><div class="line">        <span class="keyword">elif</span> self.logdupes:</div><div class="line">            msg = (<span class="string">"Filtered duplicate request %(request)s"</span></div><div class="line">                   <span class="string">" - no more duplicates will be shown"</span></div><div class="line">                   <span class="string">" (see DUPEFILTER_DEBUG to show all duplicates)"</span>)</div><div class="line">            self.logger.debug(msg, &#123;<span class="string">'request'</span>: request&#125;, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</div><div class="line">            self.logdupes = <span class="keyword">False</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分布式爬虫要点&quot;&gt;&lt;a href=&quot;#分布式爬虫要点&quot; class=&quot;headerlink&quot; title=&quot;分布式爬虫要点&quot;&gt;&lt;/a&gt;&lt;strong&gt;分布式爬虫要点&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fh4hbyf2moj30h50byq4t.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;分布式爬虫的优点&quot;&gt;&lt;a href=&quot;#分布式爬虫的优点&quot; class=&quot;headerlink&quot; title=&quot;分布式爬虫的优点&quot;&gt;&lt;/a&gt;&lt;strong&gt;分布式爬虫的优点&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;充分利用多机器的宽带加速爬取&lt;/li&gt;
&lt;li&gt;充分利用多机的IP加速爬取速度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题：&lt;strong&gt;为什么scrapy不支持分布式？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：在scrapy中scheduler是运行在队列中的，而队列是在单机内存中的，服务器上爬虫是无法利用内存的队列做任何处理，所以scrapy不支持分布式。&lt;/p&gt;
&lt;h3 id=&quot;分布式爬虫需要解决的问题&quot;&gt;&lt;a href=&quot;#分布式爬虫需要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;分布式爬虫需要解决的问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;分布式爬虫需要解决的问题&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;requests队列集中管理&lt;/li&gt;
&lt;li&gt;去重集中管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，我们需要使用Redis来解决这些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python，Redis" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython%EF%BC%8CRedis/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Scrapy 进阶开发</title>
    <link href="http://yoursite.com/2017/06/29/scrapy-advanced-dev/"/>
    <id>http://yoursite.com/2017/06/29/scrapy-advanced-dev/</id>
    <published>2017-06-29T06:18:54.000Z</published>
    <updated>2017-07-04T06:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要介绍selenium的使用、其余的一些动态网页获取技术以及scrapy的一些进阶知识。</p>
<a id="more"></a>
<h2 id="Selenium的使用"><a href="#Selenium的使用" class="headerlink" title="Selenium的使用"></a><strong>Selenium的使用</strong></h2><h3 id="Selenium介绍"><a href="#Selenium介绍" class="headerlink" title="Selenium介绍"></a><strong>Selenium介绍</strong></h3><p><a href="http://selenium-python-zh.readthedocs.io/en/latest/index.html" target="_blank" rel="external">Selenium</a>是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。</p>
<h3 id="Selenium安装"><a href="#Selenium安装" class="headerlink" title="Selenium安装"></a><strong>Selenium安装</strong></h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fgu3vu4nj3j31kw054abx.jpg" alt=""></p>
<p>Selenium安装完成之后，还需要下载浏览器对应的webdriver才能开始使用，我们这里选择Chrome的<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">ChromeDriver</a>。</p>
<h3 id="Selenium动态网页请求"><a href="#Selenium动态网页请求" class="headerlink" title="Selenium动态网页请求"></a><strong>Selenium动态网页请求</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line"></div><div class="line">browser.get(<span class="string">"https://detail.tmall.com/item.htm?spm=a230r.1.14.13.bgHDMS&amp;id=539418030842&amp;cm_id=140105335569ed55e27b&amp;abbucket=5"</span>)</div><div class="line"></div><div class="line">t_selector = Selector(text=browser.page_source)</div><div class="line"></div><div class="line">print(t_selector.css(<span class="string">".tm-promo-price .tm-price::text"</span>).extract())</div><div class="line"></div><div class="line">browser.quit()</div></pre></td></tr></table></figure>
<p>我们用Selenium请求一个天猫商品的动态网页，并用Scrapy Selector来获取对应的商品价格信息。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fgu40xqud2j31d403et98.jpg" alt=""></p>
<h3 id="Selenium模拟登录知乎"><a href="#Selenium模拟登录知乎" class="headerlink" title="Selenium模拟登录知乎"></a><strong>Selenium模拟登录知乎</strong></h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fgu4vmkm5hj314o0dyn2r.jpg" alt=""></p>
<p>调试观察之后，采用Selenium自带的选择器方法来模拟输入账号密码并且点击登录。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">browser.get(<span class="string">"https://www.zhihu.com/#signin"</span>)</div><div class="line"></div><div class="line">browser.find_element_by_css_selector(<span class="string">".view-signin input[name='account']"</span>).send_keys(<span class="string">"your_username"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".view-signin input[name='password']"</span>).send_keys(<span class="string">"your_password"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".view_signin button.sign-button"</span>).click()</div></pre></td></tr></table></figure>
<h3 id="Selenium模拟登录微博"><a href="#Selenium模拟登录微博" class="headerlink" title="Selenium模拟登录微博"></a><strong>Selenium模拟登录微博</strong></h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fgu8zpu487j30xu05wjtd.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fgu8zttkrzj30xy060ac1.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fgu8zzmjavj30y405uq4o.jpg" alt=""></p>
<p>首先调试观察微博登录页面</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">browser.get(<span class="string">"https://www.weibo.com"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">"#loginname"</span>).send_keys(<span class="string">"your_username"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".info_list.password input[node-type='password']"</span>).send_keys(<span class="string">"your_password"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".info_list.login_btn a[node-type='submitBtn']"</span>).click()</div></pre></td></tr></table></figure>
<p>发现如下错误</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fgu91pgp2uj31kw0ezgrc.jpg" alt=""></p>
<p>原因：我们在页面还没有请求完成时就进行了下一步操作，导致元素获取不到。</p>
<p>在请求发出之后，休眠一段时间等待页面加载完成即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">browser.get(<span class="string">"https://www.weibo.com"</span>)</div><div class="line">time.sleep(<span class="number">15</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">"#loginname"</span>).send_keys(<span class="string">"584563542@qq.com"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".info_list.password input[node-type='password']"</span>).send_keys(<span class="string">"tracy584563542"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".info_list.login_btn a[node-type='submitBtn']"</span>).click()</div></pre></td></tr></table></figure>
<h3 id="Selenium模拟鼠标下拉"><a href="#Selenium模拟鼠标下拉" class="headerlink" title="Selenium模拟鼠标下拉"></a><strong>Selenium模拟鼠标下拉</strong></h3><p>这样的操作是通过JS脚本来进行的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">browser.get(<span class="string">"https://www.oschina.net/blog"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    browser.execute_script(<span class="string">"window.scrollTo(0, document.body.scrollHeight); var lenOfPage=document.body.scrollHeight; return lenOfPage;"</span>)</div><div class="line">    time.sleep(<span class="number">3</span>)</div></pre></td></tr></table></figure>
<h3 id="设置ChromeDriver不加载图片"><a href="#设置ChromeDriver不加载图片" class="headerlink" title="设置ChromeDriver不加载图片"></a><strong>设置ChromeDriver不加载图片</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置ChromeDriver不加载图片</span></div><div class="line">chrome_opt = webdriver.ChromeOptions()</div><div class="line">prefs = &#123;<span class="string">"profile.managed_default_content_settings.images"</span>: <span class="number">2</span>&#125;</div><div class="line">chrome_opt.add_experimental_option(<span class="string">"prefs"</span>, prefs)</div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>, chrome_options=chrome_opt)</div><div class="line">browser.get(<span class="string">"https://www.taobao.com"</span>)</div></pre></td></tr></table></figure>
<h3 id="PhantomJS获取动态网页"><a href="#PhantomJS获取动态网页" class="headerlink" title="PhantomJS获取动态网页"></a><strong>PhantomJS获取动态网页</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># phantomjs, 无界面的浏览器， 多进程情况下phantomjs性能会下降很严重</span></div><div class="line">browser = webdriver.PhantomJS(executable_path=<span class="string">"/Users/lawtech/TempSpace/phantomjs-2.1.1-macosx/bin/phantomjs"</span>)</div><div class="line">browser.get(<span class="string">"https://detail.tmall.com/item.htm?spm=a230r.1.14.13.bgHDMS&amp;id=539418030842&amp;cm_id=140105335569ed55e27b&amp;abbucket=5"</span>)</div><div class="line">t_selector = Selector(text=browser.page_source)</div><div class="line">print(t_selector.css(<span class="string">".tm-promo-price .tm-price::text"</span>).extract())</div><div class="line">browser.quit()</div></pre></td></tr></table></figure>
<h3 id="Selenium集成到Scrapy中"><a href="#Selenium集成到Scrapy中" class="headerlink" title="Selenium集成到Scrapy中"></a><strong>Selenium集成到Scrapy中</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSPageMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    通过Chrome动态请求网页</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">        super(JSPageMiddleware, self).__init__()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> spider.name == <span class="string">"jobbole"</span>:</div><div class="line">            self.browser.get(request.url)</div><div class="line">            <span class="keyword">import</span> time</div><div class="line">            time.sleep(<span class="number">3</span>)</div><div class="line">            print(<span class="string">"访问&#123;0&#125;"</span>.format(request.url))</div><div class="line"></div><div class="line">            <span class="keyword">return</span> HtmlResponse(url=self.browser.current_url, body=self.browser.page_source, encoding=<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<p>在<code>middlewares.py</code>中添加如上代码之后，别忘了在<code>settings.py</code>中将其配置好：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">    <span class="string">'ArticleSpider.middlewares.RandomUserAgentMiddleware'</span>: <span class="number">543</span>,</div><div class="line">    <span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class="keyword">None</span>,</div><div class="line">    <span class="string">'ArticleSpider.middlewares.JSPageMiddleware'</span>: <span class="number">1</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实我们可以把Chrome放到Spider中，此时就引入了信号量的问题：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.xlib.pydispatch <span class="keyword">import</span> dispatcher</div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobboleSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"jobbole"</span></div><div class="line">    allowed_domains = [<span class="string">"blog.jobbole.com"</span>]</div><div class="line">    start_urls = [<span class="string">'http://blog.jobbole.com/all-posts/'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">        super(JobboleSpider, self).__init__()</div><div class="line">        dispatcher.connect(self.spider_closed, signals.spider_closed)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_closed</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        当爬虫退出的时候关闭Chrome</div><div class="line">        :param spider:</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        print(<span class="string">"spider closed"</span>)</div><div class="line">        self.browser.quit()</div></pre></td></tr></table></figure>
<h2 id="其余动态网页获取技术"><a href="#其余动态网页获取技术" class="headerlink" title="其余动态网页获取技术"></a><strong>其余动态网页获取技术</strong></h2><h3 id="Chrome无界面运行"><a href="#Chrome无界面运行" class="headerlink" title="Chrome无界面运行"></a><strong>Chrome无界面运行</strong></h3><p>首先安装<code>pyvirtualdisplay</code>：<code>pip install pyvirtualdisplay -i https://pypi.douban.com/simple/</code></p>
<p>主要代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</div><div class="line">display = Display(visible=<span class="number">0</span>, size=(<span class="number">800</span>, <span class="number">600</span>))</div><div class="line">display.start()</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">browser.get(<span class="string">"https://detail.tmall.com/item.htm?spm=a230r.1.14.13.bgHDMS&amp;id=539418030842&amp;cm_id=140105335569ed55e27b&amp;abbucket=5"</span>)</div><div class="line">browser.quit()</div></pre></td></tr></table></figure>
<h3 id="scrapy-splash"><a href="#scrapy-splash" class="headerlink" title="scrapy-splash"></a><strong>scrapy-splash</strong></h3><p><a href="https://github.com/scrapy-plugins/scrapy-splash" target="_blank" rel="external">https://github.com/scrapy-plugins/scrapy-splash</a></p>
<p>稳定性没有Chrome高</p>
<h3 id="selenium-grid"><a href="#selenium-grid" class="headerlink" title="selenium-grid"></a><strong>selenium-grid</strong></h3><p><a href="https://github.com/SeleniumHQ/selenium/wiki/Grid2" target="_blank" rel="external">https://github.com/SeleniumHQ/selenium/wiki/Grid2</a></p>
<h3 id="splinter"><a href="#splinter" class="headerlink" title="splinter"></a><strong>splinter</strong></h3><p><a href="https://github.com/cobrateam/splinter" target="_blank" rel="external">https://github.com/cobrateam/splinter</a></p>
<h2 id="Scrapy的暂停与重启"><a href="#Scrapy的暂停与重启" class="headerlink" title="Scrapy的暂停与重启"></a><strong>Scrapy的暂停与重启</strong></h2><p><code>scrapy crawl lagou -s JOBDIR=jobinfo/001</code></p>
<p>上面这条命令即可完成lagouspider的暂停与重启，中途可以你可以使用ctrl+c终止采集程序的运行，恢复时，还是运行上面这条命令即可，连按两次ctrl+c就可以完全终止。</p>
<p>其中jobinfo/001 是一个保存采集列表状态的目录，千万不要同时开多个爬虫程序使用同一个目录，会导致混乱。</p>
<p>还有更简单的方法，就是在settings.py文件里加入下面的代码：</p>
<p><code>JOBDIR=&#39;jobinfo/001&#39;</code></p>
<p>使用命令<code>scrapy crawl lagou</code>，就会自动生成一个jobinfo/001的目录，然后将工作列表放到这个文件夹里。</p>
<h2 id="Scrapy-url去重原理"><a href="#Scrapy-url去重原理" class="headerlink" title="Scrapy url去重原理"></a><strong>Scrapy url去重原理</strong></h2><p>对url进行hash运算映射到某个地址，将该url和hash值当做键值对存放到hash表中，当需要检测新的url的时候，只需要对该url进行hash映射，如果得到的地址在hash表中已经存在，则说明已经被爬取过，则放弃爬取，否则，进行爬取并记录键值对。这样只需要维护一个hash表即可，需要考虑的问题是hash碰撞的问题，互联网上数据如瀚海般，如果hash函数设计不当，碰撞还是很容易发生的。scrapy框架下可以在pipeline中写一个Duplicates filter,背后采用的是hash值存储。</p>
<p>相关代码都在<code>dupefilter.py</code>中，其实就是做了一个哈希摘要，放在set中，去查新的url是否在set中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RFPDupeFilter</span><span class="params">(BaseDupeFilter)</span>:</span></div><div class="line">    <span class="string">"""Request Fingerprint duplicates filter"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path=None, debug=False)</span>:</span></div><div class="line">        self.file = <span class="keyword">None</span></div><div class="line">        self.fingerprints = set()</div><div class="line">        self.logdupes = <span class="keyword">True</span></div><div class="line">        self.debug = debug</div><div class="line">        self.logger = logging.getLogger(__name__)</div><div class="line">        <span class="keyword">if</span> path:</div><div class="line">            self.file = open(os.path.join(path, <span class="string">'requests.seen'</span>), <span class="string">'a+'</span>)</div><div class="line">            self.file.seek(<span class="number">0</span>)</div><div class="line">            self.fingerprints.update(x.rstrip() <span class="keyword">for</span> x <span class="keyword">in</span> self.file)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_settings</span><span class="params">(cls, settings)</span>:</span></div><div class="line">        debug = settings.getbool(<span class="string">'DUPEFILTER_DEBUG'</span>)</div><div class="line">        <span class="keyword">return</span> cls(job_dir(settings), debug)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_seen</span><span class="params">(self, request)</span>:</span></div><div class="line">        fp = self.request_fingerprint(request)</div><div class="line">        <span class="keyword">if</span> fp <span class="keyword">in</span> self.fingerprints:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        self.fingerprints.add(fp)</div><div class="line">        <span class="keyword">if</span> self.file:</div><div class="line">            self.file.write(fp + os.linesep)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_fingerprint</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="keyword">return</span> request_fingerprint(request)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self, reason)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.file:</div><div class="line">            self.file.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.debug:</div><div class="line">            msg = <span class="string">"Filtered duplicate request: %(request)s"</span></div><div class="line">            self.logger.debug(msg, &#123;<span class="string">'request'</span>: request&#125;, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</div><div class="line">        <span class="keyword">elif</span> self.logdupes:</div><div class="line">            msg = (<span class="string">"Filtered duplicate request: %(request)s"</span></div><div class="line">                   <span class="string">" - no more duplicates will be shown"</span></div><div class="line">                   <span class="string">" (see DUPEFILTER_DEBUG to show all duplicates)"</span>)</div><div class="line">            self.logger.debug(msg, &#123;<span class="string">'request'</span>: request&#125;, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</div><div class="line">            self.logdupes = <span class="keyword">False</span></div><div class="line"></div><div class="line">        spider.crawler.stats.inc_value(<span class="string">'dupefilter/filtered'</span>, spider=spider)</div></pre></td></tr></table></figure>
<h2 id="Scrapy-telnet服务"><a href="#Scrapy-telnet服务" class="headerlink" title="Scrapy telnet服务"></a><strong>Scrapy telnet服务</strong></h2><p>Scrapy提供了内置的telnet终端，以供检查，控制Scrapy运行的进程。 telnet仅仅是一个运行在Scrapy进程中的普通python终端。</p>
<p>telnet终端监听设置中定义的 <a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/telnetconsole.html#std:setting-TELNETCONSOLE_PORT" target="_blank" rel="external"><code>TELNETCONSOLE_PORT</code></a> ，默认为 <code>6023</code> 。 访问telnet请输入:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">telnet localhost 6023</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>Scrapy官方文档对<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/telnetconsole.html" target="_blank" rel="external">telnet</a>做了更详尽的介绍。</p>
<h2 id="Spider-middleware-详解"><a href="#Spider-middleware-详解" class="headerlink" title="Spider middleware 详解"></a><strong>Spider middleware 详解</strong></h2><p>传送门：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/spider-middleware.html" target="_blank" rel="external">Spider Middleware</a></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fh4fmabuzjj30a00763z1.jpg" alt=""></p>
<p>上图为Scrapy源码中spidermiddlewares的结构</p>
<p>depth.py:爬取深度的设置</p>
<p>httperror.py：状态的设置，比如是不是要把404的也抓取下来，等等。</p>
<h2 id="Scrapy的数据收集"><a href="#Scrapy的数据收集" class="headerlink" title="Scrapy的数据收集"></a><strong>Scrapy的数据收集</strong></h2><p>传送门：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/stats.html" target="_blank" rel="external">数据收集</a></p>
<h2 id="Scrapy信号详解"><a href="#Scrapy信号详解" class="headerlink" title="Scrapy信号详解"></a><strong>Scrapy信号详解</strong></h2><p>传送门：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/signals.html" target="_blank" rel="external">信号</a></p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 收集伯乐在线所有404的url以及404页面数</span></div><div class="line">handle_httpstatus_list = [<span class="number">404</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    self.fail_urls = []</div><div class="line">    super(JobboleSpider, self).__init__()</div><div class="line">    dispatcher.connect(self.handle_spider_closed, signals.spider_closed)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_spider_closed</span><span class="params">(self, spider, reason)</span>:</span></div><div class="line">    self.crawler.stats.set_value(<span class="string">"failed_urls"</span>, <span class="string">","</span>.join(self.fail_urls))</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    1. 获取文章列表页中的文章url并交给解析函数进行具体字段的解析</div><div class="line">    2. 获取下一页的url并交给scrapy进行下载</div><div class="line">    :param response: </div><div class="line">    :return: </div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> response.status == <span class="number">404</span>:</div><div class="line">        self.fail_urls.append(response.url)</div><div class="line">        self.crawler.stats.inc_value(<span class="string">"failed_url"</span>)</div></pre></td></tr></table></figure>
<p>调试结果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fh4h054xnxj30se0gwjv6.jpg" alt=""></p>
<h2 id="Scrapy扩展开发"><a href="#Scrapy扩展开发" class="headerlink" title="Scrapy扩展开发"></a><strong>Scrapy扩展开发</strong></h2><p>传送门：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/extensions.html" target="_blank" rel="external">扩展</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要介绍selenium的使用、其余的一些动态网页获取技术以及scrapy的一些进阶知识。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——cookie禁用、自动限速、自定义Spider的settings</title>
    <link href="http://yoursite.com/2017/06/12/scrapy-cookies-settings/"/>
    <id>http://yoursite.com/2017/06/12/scrapy-cookies-settings/</id>
    <published>2017-06-12T06:18:54.000Z</published>
    <updated>2017-06-22T08:29:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>像cookie禁用、自动限速这样的设置都在<code>settings.py</code>文件中，下面我们就来简单介绍一下。</p>
<a id="more"></a>
<h2 id="cookie禁用"><a href="#cookie禁用" class="headerlink" title="cookie禁用"></a><strong>cookie禁用</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Disable cookies (enabled by default)</span></div><div class="line">COOKIES_ENABLED = <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>默认设置为False。</p>
<h2 id="自动限速"><a href="#自动限速" class="headerlink" title="自动限速"></a><strong>自动限速</strong></h2><p>自动限速是通过自动限速(AutoThrottle)扩展来实现的，该扩展能根据Scrapy服务器及您爬取的网站的负载自动限制爬取速度。</p>
<h3 id="限速算法"><a href="#限速算法" class="headerlink" title="限速算法"></a><strong>限速算法</strong></h3><p>算法根据以下规则调整下载延迟及并发数:</p>
<ol>
<li>spider永远以1并发请求数及 <code>AUTOTHROTTLE_START_DELAY</code> 中指定的下载延迟启动。</li>
<li>当接收到回复时，下载延迟会调整到该回复的延迟与之前下载延迟之间的平均值。</li>
</ol>
<p><code>AutoThrottle</code> 扩展尊重标准Scrapy设置中的并发数及延迟。这意味着其永远不会设置一个比<code>DOWNLOAD_DELAY</code> 更低的下载延迟或者比 <code>CONCURRENT_REQUESTS_PER_DOMAIN</code> 更高的并发数 (或 <code>CONCURRENT_REQUESTS_PER_IP</code> ，取决于您使用哪一个)。</p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>下面是控制 <code>AutoThrottle</code> 扩展的设置:</p>
<ul>
<li><code>AUTOTHROTTLE_ENABLED</code></li>
<li><code>AUTOTHROTTLE_START_DELAY</code></li>
<li><code>AUTOTHROTTLE_MAX_DELAY</code></li>
<li><code>AUTOTHROTTLE_DEBUG</code></li>
<li><code>CONCURRENT_REQUESTS_PER_DOMAIN</code></li>
<li><code>CONCURRENT_REQUESTS_PER_IP</code></li>
<li><code>DOWNLOAD_DELAY</code></li>
</ul>
<h3 id="AUTOTHROTTLE-ENABLED"><a href="#AUTOTHROTTLE-ENABLED" class="headerlink" title="AUTOTHROTTLE_ENABLED"></a>AUTOTHROTTLE_ENABLED</h3><p>默认: <code>False</code></p>
<p>启用AutoThrottle扩展。</p>
<h3 id="AUTOTHROTTLE-START-DELAY"><a href="#AUTOTHROTTLE-START-DELAY" class="headerlink" title="AUTOTHROTTLE_START_DELAY"></a>AUTOTHROTTLE_START_DELAY</h3><p>默认: <code>5.0</code></p>
<p>初始下载延迟(单位:秒)。</p>
<h3 id="AUTOTHROTTLE-MAX-DELAY"><a href="#AUTOTHROTTLE-MAX-DELAY" class="headerlink" title="AUTOTHROTTLE_MAX_DELAY"></a>AUTOTHROTTLE_MAX_DELAY</h3><p>默认: <code>60.0</code></p>
<p>在高延迟情况下最大的下载延迟(单位秒)。</p>
<h3 id="AUTOTHROTTLE-DEBUG"><a href="#AUTOTHROTTLE-DEBUG" class="headerlink" title="AUTOTHROTTLE_DEBUG"></a>AUTOTHROTTLE_DEBUG</h3><p>默认: <code>False</code></p>
<p>起用AutoThrottle调试(debug)模式，展示每个接收到的response。 您可以通过此来查看限速参数是如何实时被调整的。</p>
<h2 id="自定义Spider的settings"><a href="#自定义Spider的settings" class="headerlink" title="自定义Spider的settings"></a><strong>自定义Spider的settings</strong></h2><p>每个Spider可以定义自己的设置，这些设置将优先覆盖项目目录中的设置，可以通过设置 <code>custom_settings</code> 属性来实现。</p>
<p>例如，我们的项目中，<code>zhihu.py</code> 中需要设置开启cookie，那么只需要在该文件中如下设置即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">custom_settings = &#123;</div><div class="line">    <span class="string">"COOKIES_ENABLED"</span>: <span class="keyword">True</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="settings-py详解"><a href="#settings-py详解" class="headerlink" title="settings.py详解"></a><strong>settings.py详解</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># Scrapy settings for ArticleSpider project</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># For simplicity, this file contains only settings considered important or</span></div><div class="line"><span class="comment"># commonly used. You can find more settings consulting the documentation:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#     http://doc.scrapy.org/en/latest/topics/settings.html</span></div><div class="line"><span class="comment">#     http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></div><div class="line"><span class="comment">#     http://scrapy.readthedocs.org/en/latest/topics/spider-middleware.html</span></div><div class="line"></div><div class="line">BOT_NAME = <span class="string">'ArticleSpider'</span>  <span class="comment">#Scrapy项目的名字这将用来构造默认User-Agent，同时也用来log，当您使用startproject命令创建项目时其也被自动赋值。</span></div><div class="line"></div><div class="line">SPIDER_MODULES = [<span class="string">'ArticleSpider.spiders'</span>]  <span class="comment">#Scrapy搜索spider的模块列表 默认: [xxx.spiders]</span></div><div class="line">NEWSPIDER_MODULE = <span class="string">'ArticleSpider.spiders'</span>  <span class="comment">#使用genspider命令创建新spider的模块 默认: 'xxx.spiders'</span></div><div class="line"></div><div class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></div><div class="line"><span class="comment"># USER_AGENT = 'ArticleSpider (+http://www.yourdomain.com)'  #爬取的默认User-Agent，除非被覆盖</span></div><div class="line"></div><div class="line"><span class="comment"># Obey robots.txt rules</span></div><div class="line">ROBOTSTXT_OBEY = <span class="keyword">False</span>  <span class="comment">#如果启用,Scrapy将会采用robots.txt策略 </span></div><div class="line"></div><div class="line"><span class="comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></div><div class="line"><span class="comment">#Scrapy downloader并发请求(concurrent requests)的最大值，默认: 16</span></div><div class="line"><span class="comment"># CONCURRENT_REQUESTS = 32</span></div><div class="line"></div><div class="line"><span class="comment"># Configure a delay for requests for the same website (default: 0)</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/settings.html#download-delay</span></div><div class="line"><span class="comment"># See also autothrottle settings and docs</span></div><div class="line"><span class="comment">#为同一网站的请求配置延迟（默认值：0）下载器在下载同一个网站下一个页面前需要等待的时间,该选项可以用来限制爬取速度,减轻服务器压力。同时也支持小数:0.25 以秒为单位  </span></div><div class="line">DOWNLOAD_DELAY = <span class="number">10</span></div><div class="line"><span class="comment"># The download delay setting will honor only one of:</span></div><div class="line"><span class="comment">#下载延迟设置只有一个有效</span></div><div class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_DOMAIN = 16  对单个网站进行并发请求的最大值。</span></div><div class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_IP = 16  对单个IP进行并发请求的最大值。如果非0,则忽略 CONCURRENT_REQUESTS_PER_DOMAIN 设定,使用该设定。 也就是说,并发限制将针对IP,而不是网站。该设定也影响 DOWNLOAD_DELAY: 如果 CONCURRENT_REQUESTS_PER_IP 非0,下载延迟应用在IP而不是网站上。  </span></div><div class="line"></div><div class="line"><span class="comment"># Disable cookies (enabled by default)</span></div><div class="line"><span class="comment">#禁用Cookie（默认情况下启用）</span></div><div class="line">COOKIES_ENABLED = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># Disable Telnet Console (enabled by default)</span></div><div class="line"><span class="comment">#禁用Telnet控制台（默认启用）</span></div><div class="line"><span class="comment"># TELNETCONSOLE_ENABLED = False</span></div><div class="line"></div><div class="line"><span class="comment"># Override the default request headers:</span></div><div class="line"><span class="comment">#覆盖默认请求头：</span></div><div class="line"><span class="comment"># DEFAULT_REQUEST_HEADERS = &#123;</span></div><div class="line"><span class="comment">#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span></div><div class="line"><span class="comment">#   'Accept-Language': 'en',</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"></div><div class="line"><span class="comment"># Enable or disable spider middlewares</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/spider-middleware.html</span></div><div class="line"><span class="comment">#启用或禁用爬虫中间件</span></div><div class="line"><span class="comment"># SPIDER_MIDDLEWARES = &#123;</span></div><div class="line"><span class="comment">#    'ArticleSpider.middlewares.ArticlespiderSpiderMiddleware': 543,</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"></div><div class="line"><span class="comment"># Enable or disable downloader middlewares</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></div><div class="line"><span class="comment">#启用或禁用下载器中间件</span></div><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">    <span class="string">'ArticleSpider.middlewares.RandomUserAgentMiddleware'</span>: <span class="number">543</span>,</div><div class="line">    <span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class="keyword">None</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># Enable or disable extensions</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/extensions.html</span></div><div class="line"><span class="comment">#启用或禁用扩展程序</span></div><div class="line"><span class="comment"># EXTENSIONS = &#123;</span></div><div class="line"><span class="comment">#    'scrapy.extensions.telnet.TelnetConsole': None,</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"></div><div class="line"><span class="comment"># Configure item pipelines</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/item-pipeline.html</span></div><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">    <span class="comment"># 'ArticleSpider.pipelines.JsonExporterPipeline': 2,</span></div><div class="line">    <span class="comment"># # 'scrapy.pipelines.images.ImagesPipeline': 1,</span></div><div class="line">    <span class="comment"># 'ArticleSpider.pipelines.ArticleImagePipeline': 1,</span></div><div class="line">    <span class="string">'ArticleSpider.pipelines.MysqlTwistedPipeline'</span>: <span class="number">1</span>,</div><div class="line">&#125;</div><div class="line">IMAGES_URLS_FIELD = <span class="string">"front_image_url"</span></div><div class="line">project_dir = os.path.abspath(os.path.dirname(__file__))</div><div class="line">IMAGES_STORE = os.path.join(project_dir, <span class="string">'images'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 设置搜索路径</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">BASE_DIR = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))</div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'ArticleSpider'</span>))</div><div class="line"></div><div class="line">USER_AGENT = <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4"</span></div><div class="line"></div><div class="line">RANDOM_UA_TYPE = <span class="string">'random'</span></div><div class="line"></div><div class="line"><span class="comment"># IMAGES_MIN_HEIGHT = 100</span></div><div class="line"><span class="comment"># IMAGES_MIN_WIDTH = 100</span></div><div class="line"></div><div class="line"><span class="comment"># Enable and configure the AutoThrottle extension (disabled by default)</span></div><div class="line"><span class="comment"># See http://doc.scrapy.org/en/latest/topics/autothrottle.html</span></div><div class="line"><span class="comment">#启用和配置AutoThrottle扩展（默认情况下禁用）</span></div><div class="line">AUTOTHROTTLE_ENABLED = <span class="keyword">True</span></div><div class="line"><span class="comment"># The initial download delay</span></div><div class="line"><span class="comment"># AUTOTHROTTLE_START_DELAY = 5</span></div><div class="line"><span class="comment"># The maximum download delay to be set in case of high latencies</span></div><div class="line"><span class="comment"># AUTOTHROTTLE_MAX_DELAY = 60</span></div><div class="line"><span class="comment"># The average number of requests Scrapy should be sending in parallel to</span></div><div class="line"><span class="comment"># each remote server</span></div><div class="line"><span class="comment"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></div><div class="line"><span class="comment"># Enable showing throttling stats for every response received:</span></div><div class="line"><span class="comment"># AUTOTHROTTLE_DEBUG = False</span></div><div class="line"></div><div class="line"><span class="comment"># Enable and configure HTTP caching (disabled by default)</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></div><div class="line"><span class="comment">#启用和配置HTTP缓存（默认情况下禁用）</span></div><div class="line"><span class="comment"># HTTPCACHE_ENABLED = True</span></div><div class="line"><span class="comment"># HTTPCACHE_EXPIRATION_SECS = 0</span></div><div class="line"><span class="comment"># HTTPCACHE_DIR = 'httpcache'</span></div><div class="line"><span class="comment"># HTTPCACHE_IGNORE_HTTP_CODES = []</span></div><div class="line"><span class="comment"># HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span></div><div class="line"></div><div class="line">MYSQL_HOST = <span class="string">"127.0.0.1"</span></div><div class="line">MYSQL_DBNAME = <span class="string">"article_spider"</span></div><div class="line">MYSQL_USER = <span class="string">"root"</span></div><div class="line">MYSQL_PASSWORD = <span class="string">"123"</span></div><div class="line"></div><div class="line">SQL_DATETIME_FORMAT = <span class="string">"%Y-%m-%d %H:%M:%S"</span></div><div class="line">SQL_DATE_FORMAT = <span class="string">"%Y-%m-%d"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;像cookie禁用、自动限速这样的设置都在&lt;code&gt;settings.py&lt;/code&gt;文件中，下面我们就来简单介绍一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——云打码实现验证码识别</title>
    <link href="http://yoursite.com/2017/06/12/scrapy-yundama/"/>
    <id>http://yoursite.com/2017/06/12/scrapy-yundama/</id>
    <published>2017-06-12T06:18:54.000Z</published>
    <updated>2017-06-22T07:19:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>验证码识别大致有如下几种方式：</p>
<ul>
<li>编码实现（Tesseract-OCR）</li>
<li>在线打码</li>
<li>人工打码</li>
</ul>
<a id="more"></a>
<p>这里我们简单介绍一下在线打码，选择的打码平台为：<a href="http://www.yundama.com" target="_blank" rel="external">云打码</a></p>
<p>具体方式查看调用示例即可。</p>
<p>下面给出代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">YDMHttp</span><span class="params">(object)</span>:</span></div><div class="line">    apiurl = <span class="string">'http://api.yundama.com/api.php'</span></div><div class="line">    username = <span class="string">''</span></div><div class="line">    password = <span class="string">''</span></div><div class="line">    appid = <span class="string">''</span></div><div class="line">    appkey = <span class="string">''</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, appid, appkey)</span>:</span></div><div class="line">        self.username = username</div><div class="line">        self.password = password</div><div class="line">        self.appid = str(appid)</div><div class="line">        self.appkey = appkey</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self)</span>:</span></div><div class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'balance'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid,</div><div class="line">                <span class="string">'appkey'</span>: self.appkey&#125;</div><div class="line">        response_data = requests.post(self.apiurl, data=data)</div><div class="line">        ret_data = json.loads(response_data.text)</div><div class="line">        <span class="keyword">if</span> ret_data[<span class="string">"ret"</span>] == <span class="number">0</span>:</div><div class="line">            print(<span class="string">"获取剩余积分"</span>, ret_data[<span class="string">"balance"</span>])</div><div class="line">            <span class="keyword">return</span> ret_data[<span class="string">"balance"</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></div><div class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'login'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid,</div><div class="line">                <span class="string">'appkey'</span>: self.appkey&#125;</div><div class="line">        response_data = requests.post(self.apiurl, data=data)</div><div class="line">        ret_data = json.loads(response_data.text)</div><div class="line">        <span class="keyword">if</span> ret_data[<span class="string">"ret"</span>] == <span class="number">0</span>:</div><div class="line">            print(<span class="string">"登录成功"</span>, ret_data[<span class="string">"uid"</span>])</div><div class="line">            <span class="keyword">return</span> ret_data[<span class="string">"uid"</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self, filename, codetype, timeout)</span>:</span></div><div class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'upload'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid,</div><div class="line">                <span class="string">'appkey'</span>: self.appkey, <span class="string">'codetype'</span>: str(codetype), <span class="string">'timeout'</span>: str(timeout)&#125;</div><div class="line">        files = &#123;<span class="string">'file'</span>: open(filename, <span class="string">'rb'</span>)&#125;</div><div class="line">        response_data = requests.post(self.apiurl, files=files, data=data)</div><div class="line">        ret_data = json.loads(response_data.text)</div><div class="line">        <span class="keyword">if</span> ret_data[<span class="string">"ret"</span>] == <span class="number">0</span>:</div><div class="line">            print(<span class="string">"识别成功"</span>, ret_data[<span class="string">"text"</span>])</div><div class="line">            <span class="keyword">return</span> ret_data[<span class="string">"text"</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ydm</span><span class="params">(file_path)</span>:</span></div><div class="line">    username = <span class="string">'da_ge_da1'</span></div><div class="line">    <span class="comment"># 密码</span></div><div class="line">    password = <span class="string">'da_ge_da'</span></div><div class="line">    <span class="comment"># 软件ＩＤ，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></div><div class="line">    appid = <span class="number">3129</span></div><div class="line">    <span class="comment"># 软件密钥，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></div><div class="line">    appkey = <span class="string">'40d5ad41c047179fc797631e3b9c3025'</span></div><div class="line">    <span class="comment"># 图片文件</span></div><div class="line">    filename = <span class="string">'image/captcha.jpg'</span></div><div class="line">    <span class="comment"># 验证码类型，# 例：1004表示4位字母数字，不同类型收费不同。请准确填写，否则影响识别率。在此查询所有类型 http://www.yundama.com/price.html</span></div><div class="line">    codetype = <span class="number">5000</span></div><div class="line">    <span class="comment"># 超时时间，秒</span></div><div class="line">    timeout = <span class="number">60</span></div><div class="line">    <span class="comment"># 检查</span></div><div class="line"></div><div class="line">    yundama = YDMHttp(username, password, appid, appkey)</div><div class="line">    <span class="keyword">if</span> (username == <span class="string">'username'</span>):</div><div class="line">        print(<span class="string">'请设置好相关参数再测试'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span></div><div class="line">        <span class="keyword">return</span> yundama.decode(file_path, codetype, timeout);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment"># 用户名</span></div><div class="line">    username = <span class="string">'da_ge_da1'</span></div><div class="line">    <span class="comment"># 密码</span></div><div class="line">    password = <span class="string">'da_ge_da'</span></div><div class="line">    <span class="comment"># 软件ＩＤ，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></div><div class="line">    appid = <span class="number">3129</span></div><div class="line">    <span class="comment"># 软件密钥，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></div><div class="line">    appkey = <span class="string">'40d5ad41c047179fc797631e3b9c3025'</span></div><div class="line">    <span class="comment"># 图片文件</span></div><div class="line">    filename = <span class="string">'image/captcha.jpg'</span></div><div class="line">    <span class="comment"># 验证码类型，# 例：1004表示4位字母数字，不同类型收费不同。请准确填写，否则影响识别率。在此查询所有类型 http://www.yundama.com/price.html</span></div><div class="line">    codetype = <span class="number">5000</span></div><div class="line">    <span class="comment"># 超时时间，秒</span></div><div class="line">    timeout = <span class="number">60</span></div><div class="line">    <span class="comment"># 检查</span></div><div class="line">    <span class="keyword">if</span> (username == <span class="string">'username'</span>):</div><div class="line">        print(<span class="string">'请设置好相关参数再测试'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># 初始化</span></div><div class="line">        yundama = YDMHttp(username, password, appid, appkey)</div><div class="line"></div><div class="line">        <span class="comment"># 登陆云打码</span></div><div class="line">        uid = yundama.login()</div><div class="line">        print(<span class="string">'uid: %s'</span> % uid)</div><div class="line"></div><div class="line">        <span class="comment"># 登陆云打码</span></div><div class="line">        uid = yundama.login()</div><div class="line">        print(<span class="string">'uid: %s'</span> % uid)</div><div class="line"></div><div class="line">        <span class="comment"># 查询余额</span></div><div class="line">        balance = yundama.balance()</div><div class="line">        print(<span class="string">'balance: %s'</span> % balance)</div><div class="line"></div><div class="line">        <span class="comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span></div><div class="line">        text = yundama.decode(filename, codetype, timeout)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;验证码识别大致有如下几种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编码实现（Tesseract-OCR）&lt;/li&gt;
&lt;li&gt;在线打码&lt;/li&gt;
&lt;li&gt;人工打码&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython/"/>
    
  </entry>
  
</feed>
