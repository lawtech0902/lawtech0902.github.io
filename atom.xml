<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LawTech&#39;s Blog</title>
  <subtitle>不破不立</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-26T13:03:56.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LawTech.</name>
    <email>584563542@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis学习笔记(一)：初识Redis</title>
    <link href="http://yoursite.com/2017/03/25/Redis-1/"/>
    <id>http://yoursite.com/2017/03/25/Redis-1/</id>
    <published>2017-03-25T14:21:04.000Z</published>
    <updated>2017-03-26T13:03:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a><strong>Redis简介</strong></h2><p>Redis是一个速度极快的非关系数据库，也就是我们所说的NoSQL数据库(non-relational database)，它可以存储键(key)与5种不同类型的值(value)之间的映射(mapping)，可以将存储在内存的键值对数据持久化到硬盘，可以使用复制特性来扩展读性能，还可以使用客户端分片来扩展性能，并且它还提供了多种语言的API。</p>
<h2 id="Redis与memcached及其他类型数据库对比"><a href="#Redis与memcached及其他类型数据库对比" class="headerlink" title="Redis与memcached及其他类型数据库对比"></a><strong>Redis与memcached及其他类型数据库对比</strong></h2><p>Redis经常被拿来与memcached进行比较，两者都可用于存储键值映射，性能也相差无几，但是Redis能够自动以两种不同的方式将数据写入硬盘，而且Redis除了能存储普通的字符串键，还能存储其他4种数据结构，使得Redis可以用于解决更为广泛的问题，并且即可以作为主数据库使用，又可以作为其他存储系统的辅助数据库。</p>
<p>下表展示了Redis与memcached，MySQL以及MongoDB的特性与功能。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>数据存储选项</th>
<th>查询类型</th>
<th>附加功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Redis</td>
<td>使用内存存储的非关系数据库</td>
<td>字符串、列表、集合、散列表、有序集合</td>
<td>每种数据类型专属的命令，以及批量操作和不完全的事务支持</td>
<td>发布与订阅，主从复制，持久化，脚本</td>
</tr>
<tr>
<td>memcached</td>
<td>使用内存存储的键值缓存</td>
<td>键值之间的映射</td>
<td>创建、读取、删除、更新等命令</td>
<td>多线程服务器，用于提升性能</td>
</tr>
<tr>
<td>MySQL</td>
<td>关系数据库</td>
<td>每个数据库可以包含多个表，每个表可以包含多个行；可以处理多个表的视图；支持空间和第三方扩展</td>
<td>SELECT、INSERT、UPDATE、DELETE、函数、存储过程</td>
<td>支持ACID性质(需要使用InnoDB)，主从复制，主主复制</td>
</tr>
<tr>
<td>MongoDB</td>
<td>使用硬盘存储(on-disk)的非关系文档存储</td>
<td>每个数据库可以包含多个表，每个表可以包含多个无schema的BSON文档</td>
<td>创建、读取、更新、删除、条件查询等命令</td>
<td>支持map-reduce操作，主从复制，分片，空间索引</td>
</tr>
</tbody>
</table>
<h2 id="Redis安装-mac"><a href="#Redis安装-mac" class="headerlink" title="Redis安装(mac)"></a><strong>Redis安装(mac)</strong></h2><p>首先下载用于安装Rudix的引导脚本，并安装Rudix<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -O http://rudix.google.code.com/hg/Ports/rudix/rudix.Py</div><div class="line">$ sudo python rudix.py install rudix</div></pre></td></tr></table></figure></p>
<p>然后使用命令Rudix安装Redis，若能成功启动Redis服务器则安装成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo rudix install redis</div><div class="line">$ redis-server</div></pre></td></tr></table></figure></p>
<p>最后用pip为Python安装Redis客户端库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install redis</div></pre></td></tr></table></figure></p>
<h2 id="Redis数据结构简介"><a href="#Redis数据结构简介" class="headerlink" title="Redis数据结构简介"></a><strong>Redis数据结构简介</strong></h2><p>Redis可以存储键与5种不同数据结构类型之间的映射，分别是STRING(字符串)、LIST(列表)、SET(集合)、HASH(散列)、ZSET(有序集合)。有一部分命令对于这5种数据结构是通用的，如DEL、TYPE、RENAME等；但也有一部分命令只能对特定的一种或者两种结构使用。</p>
<p>下表从结构存储的值及读写能力对比了Redis的5种数据结构。</p>
<table>
<thead>
<tr>
<th>结构类型</th>
<th>结构存储的值</th>
<th>结构的读写能力</th>
</tr>
</thead>
<tbody>
<tr>
<td>STRING</td>
<td>字符串、整数或者浮点数</td>
<td>对整个字符串或者字符串的其中一部分执行操作；对整数和浮点数进行自增或自减操作</td>
</tr>
<tr>
<td>LIST</td>
<td>一个链表，链表上的每个节点都包含了一个字符串</td>
<td>从链表两端推入或弹出元素；根据偏移量对链表进行修剪(trim)；读取单个或多个元素；根据值查找或移除元素</td>
</tr>
<tr>
<td>SET</td>
<td>包含字符串的无序收集器，并且被包含的每个字符串互不相同</td>
<td>添加、获取、移除单个元素；检查一个元素是否存在于集合中；计算交集、并集、差集；从集合里面随机获取元素</td>
</tr>
<tr>
<td>HASH</td>
<td>包含键值对的无序散列表</td>
<td>添加、获取、移除单个键值对；获取所有键值对</td>
</tr>
<tr>
<td>ZSET</td>
<td>字符串成员(member)与浮点数分值(score)之间的有序映射，元素的排列顺序由分值的大小决定</td>
<td>添加、获取、删除单个元素；根据分值范围(range)或者成员来获取元素</td>
</tr>
</tbody>
</table>
<h3 id="Redis字符串"><a href="#Redis字符串" class="headerlink" title="Redis字符串"></a><strong>Redis字符串</strong></h3><p>下表展示了3中简单的字符串命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>行为</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>获取存储在给定键中的值</td>
</tr>
<tr>
<td>SET</td>
<td>设置存储在给定键中的值</td>
</tr>
<tr>
<td>DEL</td>
<td>删除存储在给定键中的值(该命令可用于所有类型)</td>
</tr>
</tbody>
</table>
<p>SET、GET、DEL的使用示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ redis-cli</div><div class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> hello world</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get hello</div><div class="line"><span class="string">"world"</span></div><div class="line">127.0.0.1:6379&gt; del hello</div><div class="line">(<span class="built_in">integer</span>) 1</div><div class="line">127.0.0.1:6379&gt; get hello</div><div class="line">(nil)</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis简介&quot;&gt;&lt;a href=&quot;#Redis简介&quot; class=&quot;headerlink&quot; title=&quot;Redis简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;Redis简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Redis是一个速度极快的非关系数据库，也就是我们所说的NoSQL
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Redis, Python" scheme="http://yoursite.com/tags/Redis-Python/"/>
    
  </entry>
  
</feed>
