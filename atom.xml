<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LawTech&#39;s Blog</title>
  <subtitle>不破不立</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-16T02:59:17.077Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LawTech.</name>
    <email>584563542@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue+Django REST Framework生鲜电商项目学习笔记——Vue的结构和restful api介绍</title>
    <link href="http://yoursite.com/2017/11/15/vue-django-4-1/"/>
    <id>http://yoursite.com/2017/11/15/vue-django-4-1/</id>
    <published>2017-11-15T05:18:54.000Z</published>
    <updated>2017-11-16T02:59:17.077Z</updated>
    
    <content type="html"><![CDATA[<p>分为以下几个环节：</p>
<ol>
<li>restful api介绍</li>
<li>vue的基本概念介绍</li>
<li>vue的源码结构介绍</li>
</ol>
<a id="more"></a>
<h2 id="restful-api介绍"><a href="#restful-api介绍" class="headerlink" title="restful api介绍"></a><strong>restful api介绍</strong></h2><h3 id="前后端分离优缺点"><a href="#前后端分离优缺点" class="headerlink" title="前后端分离优缺点"></a><strong>前后端分离优缺点</strong></h3><h4 id="为什么要前后端分离"><a href="#为什么要前后端分离" class="headerlink" title="为什么要前后端分离"></a><strong>为什么要前后端分离</strong></h4><ol>
<li>pc, app, pad多端适应</li>
<li>SPA开发模式开始流行</li>
<li>前后端开发职责不清</li>
<li>开发效率问题，前后端互相等待</li>
<li>前端一直配合着后端，能力受限</li>
<li>后台开发语言和模板高度耦合，导致开发语言依赖严重</li>
</ol>
<h4 id="前后端分离缺点"><a href="#前后端分离缺点" class="headerlink" title="前后端分离缺点"></a><strong>前后端分离缺点</strong></h4><ol>
<li>前后端学习门槛增加</li>
<li>数据依赖导致文档重要性增加</li>
<li>前端工作量加大</li>
<li>SEO的难度加大</li>
<li>后端开发模式迁移增加成本</li>
</ol>
<h3 id="restful-api"><a href="#restful-api" class="headerlink" title="restful api"></a><strong>restful api</strong></h3><p>restful api目前是前后端分离最佳实践：</p>
<ol>
<li>轻量，直接通过http，不需要额外的协议，post/get/put/delete操作</li>
<li>面向资源，一目了然，具有自解释性</li>
<li>数据描述简单，一般通过json或者xml做数据通信</li>
</ol>
<p>restful api 重要概念</p>
<ol>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">概念</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">restful实践</a></li>
</ol>
<h2 id="Vue的基本概念介绍"><a href="#Vue的基本概念介绍" class="headerlink" title="Vue的基本概念介绍"></a><strong>Vue的基本概念介绍</strong></h2><h3 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a><strong>几个概念</strong></h3><ol>
<li>前端工程化</li>
<li>数据双向绑定</li>
<li>组件化开发</li>
</ol>
<h3 id="vue开发的几个概念"><a href="#vue开发的几个概念" class="headerlink" title="vue开发的几个概念"></a><strong>vue开发的几个概念</strong></h3><ol>
<li>webpack</li>
<li>vue, vuex, vue-router, axios</li>
<li>ES6, babel</li>
</ol>
<h2 id="Vue项目源码结构介绍"><a href="#Vue项目源码结构介绍" class="headerlink" title="Vue项目源码结构介绍"></a><strong>Vue项目源码结构介绍</strong></h2><p>老老实实把Vue学一学吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分为以下几个环节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;restful api介绍&lt;/li&gt;
&lt;li&gt;vue的基本概念介绍&lt;/li&gt;
&lt;li&gt;vue的源码结构介绍&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Django，Vue" scheme="http://yoursite.com/categories/Django%EF%BC%8CVue/"/>
    
    
      <category term="Django，Vue，Rest" scheme="http://yoursite.com/tags/Django%EF%BC%8CVue%EF%BC%8CRest/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django REST Framework生鲜电商项目学习笔记——model设计和资源导入</title>
    <link href="http://yoursite.com/2017/11/05/vue-django-3-1/"/>
    <id>http://yoursite.com/2017/11/05/vue-django-3-1/</id>
    <published>2017-11-05T05:18:54.000Z</published>
    <updated>2017-11-14T13:54:29.112Z</updated>
    
    <content type="html"><![CDATA[<p>分为以下几个环节：</p>
<ol>
<li>user用户的model设计</li>
<li>goods商品的model设计</li>
<li>trade交易的model设计</li>
<li>user_operation用户操作的model设计</li>
<li>migrations原理及表生成</li>
<li>xadmin后台管理系统的配置</li>
<li>导入商品和商品类别数据</li>
</ol>
<a id="more"></a>
<h3 id="user用户的model设计"><a href="#user用户的model设计" class="headerlink" title="user用户的model设计"></a><strong>user用户的model设计</strong></h3><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfile</span><span class="params">(AbstractUser)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户</div><div class="line">    """</div><div class="line">    name = models.CharField(max_length=<span class="number">30</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"姓名"</span>)</div><div class="line">    birthday = models.DateField(null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"出生年月"</span>)</div><div class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">"电话"</span>)</div><div class="line">    gender = models.CharField(max_length=<span class="number">6</span>, choices=((<span class="string">"male"</span>, <span class="string">"男"</span>), (<span class="string">"female"</span>, <span class="string">"女"</span>)), default=<span class="string">"female"</span>,</div><div class="line">                              verbose_name=<span class="string">"性别"</span>)</div><div class="line">    email = models.CharField(max_length=<span class="number">100</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"邮箱"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"用户"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerifyCode</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    短信验证码</div><div class="line">    """</div><div class="line">    code = models.CharField(max_length=<span class="number">10</span>, verbose_name=<span class="string">"验证码"</span>)</div><div class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">"电话"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"短信验证码"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.code</div></pre></td></tr></table></figure>
<p>然后在settings文件中添加下面这行代码以替换django本身的用户。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AUTH_USER_MODEL = <span class="string">'users.UserProfile'</span></div></pre></td></tr></table></figure>
<h3 id="goods商品的model设计"><a href="#goods商品的model设计" class="headerlink" title="goods商品的model设计"></a><strong>goods商品的model设计</strong></h3><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> DjangoUeditor.models <span class="keyword">import</span> UEditorField</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCategory</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品类别</div><div class="line">    """</div><div class="line"></div><div class="line">    CATEGORY_TYPE = (</div><div class="line">        (<span class="number">1</span>, <span class="string">"一级类目"</span>),</div><div class="line">        (<span class="number">2</span>, <span class="string">"二级类目"</span>),</div><div class="line">        (<span class="number">3</span>, <span class="string">"三级类目"</span>),</div><div class="line">    )</div><div class="line">    name = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"类别名"</span>, help_text=<span class="string">"类别名"</span>)</div><div class="line">    code = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"类别code"</span>, help_text=<span class="string">"类别code"</span>)</div><div class="line">    desc = models.TextField(default=<span class="string">""</span>, verbose_name=<span class="string">"类别描述"</span>, help_text=<span class="string">"类别描述"</span>)</div><div class="line">    category_type = models.IntegerField(choices=CATEGORY_TYPE, verbose_name=<span class="string">"类目级别"</span>, help_text=<span class="string">"类目级别"</span>)</div><div class="line">    parent_category = models.ForeignKey(<span class="string">"self"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"父类目级别"</span>, help_text=<span class="string">"父目录"</span>,</div><div class="line">                                        related_name=<span class="string">"sub_cat"</span>)</div><div class="line">    is_tab = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否导航"</span>, help_text=<span class="string">"是否导航"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"商品类别"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCategoryBrand</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    品牌</div><div class="line">    """</div><div class="line">    category = models.ForeignKey(GoodsCategory, related_name=<span class="string">'brands'</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"商品类目"</span>)</div><div class="line">    name = models.CharField(default=<span class="string">""</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"品牌名"</span>, help_text=<span class="string">"品牌名"</span>)</div><div class="line">    desc = models.TextField(default=<span class="string">""</span>, max_length=<span class="number">200</span>, verbose_name=<span class="string">"品牌描述"</span>, help_text=<span class="string">"品牌描述"</span>)</div><div class="line">    image = models.ImageField(max_length=<span class="number">200</span>, upload_to=<span class="string">"brand/"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"品牌"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品</div><div class="line">    """</div><div class="line">    category = models.ForeignKey(GoodsCategory, verbose_name=<span class="string">"商品类目"</span>)</div><div class="line">    goods_sn = models.CharField(max_length=<span class="number">50</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"商品唯一货号"</span>)</div><div class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">"商品名"</span>)</div><div class="line">    click_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"点击数"</span>)</div><div class="line">    sold_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"商品销售量"</span>)</div><div class="line">    fav_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"收藏数"</span>)</div><div class="line">    goods_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"库存数"</span>)</div><div class="line">    market_price = models.FloatField(default=<span class="number">0</span>, verbose_name=<span class="string">"市场价格"</span>)</div><div class="line">    shop_price = models.FloatField(default=<span class="number">0</span>, verbose_name=<span class="string">"本店价格"</span>)</div><div class="line">    goods_brief = models.TextField(max_length=<span class="number">500</span>, verbose_name=<span class="string">"商品简短描述"</span>)</div><div class="line">    goods_desc = UEditorField(verbose_name=<span class="string">"内容"</span>, imagePath=<span class="string">"goods/images/"</span>, width=<span class="number">1000</span>, height=<span class="number">300</span>,</div><div class="line">                              filePath=<span class="string">"goods/files/"</span>, default=<span class="string">''</span>)</div><div class="line">    ship_free = models.BooleanField(default=<span class="keyword">True</span>, verbose_name=<span class="string">"是否承担运费"</span>)</div><div class="line">    goods_front_image = models.ImageField(upload_to=<span class="string">"goods/images/"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"封面图"</span>)</div><div class="line">    is_new = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否新品"</span>)</div><div class="line">    is_hot = models.BooleanField(default=<span class="keyword">False</span>, verbose_name=<span class="string">"是否热销"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">'商品'</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsImage</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    商品轮播图</div><div class="line">    """</div><div class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>, related_name=<span class="string">"images"</span>)</div><div class="line">    image = models.ImageField(upload_to=<span class="string">""</span>, verbose_name=<span class="string">"图片"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"商品轮播图"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.goods.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banner</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    轮播的商品</div><div class="line">    """</div><div class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>)</div><div class="line">    image = models.ImageField(upload_to=<span class="string">'banner'</span>, verbose_name=<span class="string">"轮播图片"</span>)</div><div class="line">    index = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"轮播顺序"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"轮播商品"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.goods.name</div></pre></td></tr></table></figure>
<p>其中需要使用<a href="https://pan.baidu.com/s/1jI7qYH4" target="_blank" rel="external">DjangoUeditor</a>，直接解压放到extra_apps目录下即可，记得在settings.py文件中注册我们的app：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">    <span class="string">'apps.users.apps.UsersConfig'</span>,</div><div class="line">    <span class="string">'DjangoUeditor'</span>,</div><div class="line">    <span class="string">'users'</span>,</div><div class="line">    <span class="string">'goods'</span>,</div><div class="line">    <span class="string">'trade'</span>,</div><div class="line">    <span class="string">'user_operation'</span></div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="trade交易的model设计"><a href="#trade交易的model设计" class="headerlink" title="trade交易的model设计"></a><strong>trade交易的model设计</strong></h3><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model()</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line">User = get_user_model()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    购物车</div><div class="line">    """</div><div class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</div><div class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>)</div><div class="line">    goods_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"购买数量"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"购物车"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"%s(%d)"</span>.format(self.goods.name, self.goods_num)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderInfo</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    订单</div><div class="line">    """</div><div class="line">    ORDER_STATUS = (</div><div class="line">        (<span class="string">"success"</span>, <span class="string">"成功"</span>),</div><div class="line">        (<span class="string">"cancel"</span>, <span class="string">"取消"</span>),</div><div class="line">        (<span class="string">"cancel"</span>, <span class="string">"待支付"</span>),</div><div class="line">    )</div><div class="line"></div><div class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</div><div class="line">    order_sn = models.CharField(max_length=<span class="number">30</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, unique=<span class="keyword">True</span>, verbose_name=<span class="string">"订单号"</span>)</div><div class="line">    trade_no = models.CharField(max_length=<span class="number">100</span>, unique=<span class="keyword">True</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">u"交易号"</span>)</div><div class="line">    pay_status = models.CharField(choices=ORDER_STATUS, default=<span class="string">"paying"</span>, max_length=<span class="number">30</span>, verbose_name=<span class="string">"订单状态"</span>)</div><div class="line">    post_script = models.CharField(max_length=<span class="number">200</span>, verbose_name=<span class="string">"订单留言"</span>)</div><div class="line">    order_mount = models.FloatField(default=<span class="number">0.0</span>, verbose_name=<span class="string">"订单金额"</span>)</div><div class="line">    pay_time = models.DateTimeField(null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>, verbose_name=<span class="string">"支付时间"</span>)</div><div class="line">    address = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"收货地址"</span>)</div><div class="line">    signer_name = models.CharField(max_length=<span class="number">20</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"签收人"</span>)</div><div class="line">    singer_mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">"联系电话"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"订单"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> str(self.order_sn)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderGoods</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    订单商品详情</div><div class="line">    """</div><div class="line">    order = models.ForeignKey(OrderInfo, verbose_name=<span class="string">"订单信息"</span>, related_name=<span class="string">"goods"</span>)</div><div class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>)</div><div class="line">    goods_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">"商品数量"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"订单商品"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> str(self.order.order_sn)</div></pre></td></tr></table></figure>
<p>注：Django 1.5之后y用户可以自定义User Model，可以通过以下两种方式来获取User Model。</p>
<ol>
<li>使用django.contrib.auth.get_user_model()</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 使用默认User model时</div><div class="line">&gt;&gt;&gt; from django.contrib.auth import get_user_model</div><div class="line">&gt;&gt;&gt; get_user_model()</div><div class="line">&lt;class 'django.contrib.auth.models.User'&gt;</div><div class="line"></div><div class="line"># 使用自定义User model时</div><div class="line">&gt;&gt;&gt; from django.contrib.auth import get_user_model</div><div class="line">&gt;&gt;&gt; get_user_model()</div><div class="line">&lt;class 'xxx.models.UserProfile'&gt;</div></pre></td></tr></table></figure>
<ol>
<li>使用settings.AUTH_USER_MODEL</li>
</ol>
<p>应该使用django.contrib.auth.get_user_model()来引用用户模型，而不要直接引用User。 这个方法将返回当前正在使用的用户模型 —— 指定的自定义用户模型或者User。当定义一个外键或者到用户模型的多对多关系时，你应该使用 settings.AUTH_USER_MODEL设置来指定自定义的模型。一般来说，在导入时候执行的代码中，应该使用settings.AUTH_USER_MODEL，get_user_model() 只在Django 已经导入所有的模型后才工作。</p>
<h3 id="user-operation用户操作的model设计"><a href="#user-operation用户操作的model设计" class="headerlink" title="user_operation用户操作的model设计"></a><strong>user_operation用户操作的model设计</strong></h3><p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods</div><div class="line"></div><div class="line"><span class="comment"># Create your models here.</span></div><div class="line">User = get_user_model()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFav</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户收藏</div><div class="line">    """</div><div class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</div><div class="line">    goods = models.ForeignKey(Goods, verbose_name=<span class="string">"商品"</span>, help_text=<span class="string">"商品id"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"用户收藏"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.user.name</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserLeavingMessage</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户留言</div><div class="line">    """</div><div class="line">    MESSAGE_CHOICES = (</div><div class="line">        (<span class="number">1</span>, <span class="string">"留言"</span>),</div><div class="line">        (<span class="number">2</span>, <span class="string">"投诉"</span>),</div><div class="line">        (<span class="number">3</span>, <span class="string">"询问"</span>),</div><div class="line">        (<span class="number">4</span>, <span class="string">"售后"</span>),</div><div class="line">        (<span class="number">5</span>, <span class="string">"求购"</span>)</div><div class="line">    )</div><div class="line"></div><div class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</div><div class="line">    message_type = models.IntegerField(default=<span class="number">1</span>, choices=MESSAGE_CHOICES, verbose_name=<span class="string">"留言类型"</span>,</div><div class="line">                                       help_text=<span class="string">u"留言类型: 1(留言),2(投诉),3(询问),4(售后),5(求购)"</span>)</div><div class="line">    subject = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"主题"</span>)</div><div class="line">    message = models.TextField(default=<span class="string">""</span>, verbose_name=<span class="string">"留言内容"</span>, help_text=<span class="string">"留言内容"</span>)</div><div class="line">    file = models.FileField(upload_to=<span class="string">"message/images/"</span>, verbose_name=<span class="string">"上传的文件"</span>, help_text=<span class="string">"上传的文件"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"用户留言"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.subject</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span><span class="params">(models.Model)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    用户收货地址</div><div class="line">    """</div><div class="line">    user = models.ForeignKey(User, verbose_name=<span class="string">"用户"</span>)</div><div class="line">    province = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"省份"</span>)</div><div class="line">    city = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"城市"</span>)</div><div class="line">    district = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"区域"</span>)</div><div class="line">    address = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"详细地址"</span>)</div><div class="line">    signer_name = models.CharField(max_length=<span class="number">100</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"签收人"</span>)</div><div class="line">    signer_mobile = models.CharField(max_length=<span class="number">11</span>, default=<span class="string">""</span>, verbose_name=<span class="string">"电话"</span>)</div><div class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=<span class="string">"添加时间"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        verbose_name = <span class="string">"收货地址"</span></div><div class="line">        verbose_name_plural = verbose_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.address</div></pre></td></tr></table></figure>
<h3 id="migrations原理及表生成"><a href="#migrations原理及表生成" class="headerlink" title="migrations原理及表生成"></a><strong>migrations原理及表生成</strong></h3><p>直接Run manage.py Task然后makemigrations</p>
<p><a href="http://python.usyiyi.cn/translate/django_182/topics/migrations.html" target="_blank" rel="external">原理</a>略过，官方文档讲的很详细。</p>
<h3 id="xadmin后台管理系统的配置"><a href="#xadmin后台管理系统的配置" class="headerlink" title="xadmin后台管理系统的配置"></a><strong>xadmin后台管理系统的配置</strong></h3><p>将<a href="https://pan.baidu.com/s/1i5owpE1" target="_blank" rel="external">xadmin</a>中的xadmin文件夹复制到extra_apps目录下，将其中每个app目录下的adminx.py文件复制到项目对应app目录下。</p>
<p>安装xadmin依赖包：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django-crispy-forms django-reversion django-formtools future httplib2 six xlwt xlswriter -i https://pypi.douban.com/simple/</div></pre></td></tr></table></figure>
<p>在settings.py文件中添加配置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    <span class="string">'django.contrib.auth'</span>,</div><div class="line">    <span class="string">'django.contrib.contenttypes'</span>,</div><div class="line">    <span class="string">'django.contrib.sessions'</span>,</div><div class="line">    <span class="string">'django.contrib.messages'</span>,</div><div class="line">    <span class="string">'django.contrib.staticfiles'</span>,</div><div class="line">  	<span class="string">'django_filters'</span>,</div><div class="line">    <span class="string">'DjangoUeditor'</span>,</div><div class="line">    <span class="string">'apps.users.apps.UsersConfig'</span>,</div><div class="line">    <span class="string">'goods.apps.GoodsConfig'</span>,</div><div class="line">    <span class="string">'trade.apps.TradeConfig'</span>,</div><div class="line">    <span class="string">'user_operation.apps.UserOperationConfig'</span>,</div><div class="line">    <span class="string">'crispy_forms'</span>,</div><div class="line">    <span class="string">'xadmin'</span>,</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment"># 设置时区</span></div><div class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span>  <span class="comment"># 中文支持，django1.8以后支持；1.8以前是zh-cn</span></div><div class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></div><div class="line">USE_I18N = <span class="keyword">True</span></div><div class="line">USE_L10N = <span class="keyword">True</span></div><div class="line">USE_TZ = <span class="keyword">False</span>  <span class="comment"># 默认是Ture，时间是utc时间，由于我们要用本地时间，所用手动修改为false！！！！</span></div></pre></td></tr></table></figure>
<p>再执行makemigrations和migrate</p>
<p>修改Mxshop/urls.py文件:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">import</span> xadmin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^xadmin/'</span>, xadmin.site.urls),</div><div class="line">]</div></pre></td></tr></table></figure>
<p>创建超级用户</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flhe8itum3j31kw0cjdj5.jpg" alt=""></p>
<p>Debug运行，打开<a href="http://127.0.0.1:8000/xadmin/" target="_blank" rel="external">http://127.0.0.1:8000/xadmin/</a></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flhenvlrxwj31kw13jjwu.jpg" alt=""></p>
<p>发现app名称仍是英文，下面进入对应app下的apps.py文件进行修改，例如goods:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsConfig</span><span class="params">(AppConfig)</span>:</span></div><div class="line">    name = <span class="string">'goods'</span></div><div class="line">    verbose_name = <span class="string">"商品"</span></div></pre></td></tr></table></figure>
<p>OK，大功告成！</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1flhex3e9iuj31kw175wn8.jpg" alt=""></p>
<h3 id="导入商品和商品类别数据"><a href="#导入商品和商品类别数据" class="headerlink" title="导入商品和商品类别数据"></a><strong>导入商品和商品类别数据</strong></h3><p>将<a href="https://pan.baidu.com/s/1hsoyp6k" target="_blank" rel="external">data</a>中的goods和brands文件夹复制到项目的media文件夹中，并在db_tools文件夹下新建data文件夹，拖入category_data.py和product_data.py文件。</p>
<p>在db_tools文件夹下新建import_category_data.py：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 独立使用django的model</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 获取当前文件的目录</span></div><div class="line">pwd = os.path.dirname(os.path.realpath(__file__))</div><div class="line"><span class="comment"># 获取项目名的目录(因为我的当前文件是在项目名下的文件夹下的文件.所以是../)</span></div><div class="line">sys.path.append(pwd + <span class="string">"../"</span>)</div><div class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"MxShop.settings"</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> django</div><div class="line"></div><div class="line">django.setup()</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> GoodsCategory</div><div class="line"></div><div class="line"><span class="keyword">from</span> db_tools.data.category_data <span class="keyword">import</span> row_data</div><div class="line"></div><div class="line"><span class="keyword">for</span> lev1_cat <span class="keyword">in</span> row_data:</div><div class="line">    lev1_instance = GoodsCategory()</div><div class="line">    lev1_instance.code = lev1_cat[<span class="string">"code"</span>]</div><div class="line">    lev1_instance.name = lev1_cat[<span class="string">"name"</span>]</div><div class="line">    lev1_instance.category_type = <span class="number">1</span></div><div class="line">    lev1_instance.save()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> lev2_cat <span class="keyword">in</span> lev1_cat[<span class="string">"sub_categorys"</span>]:</div><div class="line">        lev2_instance = GoodsCategory()</div><div class="line">        lev2_instance.code = lev2_cat[<span class="string">"code"</span>]</div><div class="line">        lev2_instance.name = lev2_cat[<span class="string">"name"</span>]</div><div class="line">        lev2_instance.category_type = <span class="number">2</span></div><div class="line">        lev2_instance.parent_category = lev1_instance</div><div class="line">        lev2_instance.save()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> lev3_cat <span class="keyword">in</span> lev2_cat[<span class="string">"sub_categorys"</span>]:</div><div class="line">            lev3_instance = GoodsCategory()</div><div class="line">            lev3_instance.code = lev3_cat[<span class="string">"code"</span>]</div><div class="line">            lev3_instance.name = lev3_cat[<span class="string">"name"</span>]</div><div class="line">            lev3_instance.category_type = <span class="number">3</span></div><div class="line">            lev3_instance.parent_category = lev2_instance</div><div class="line">            lev3_instance.save()</div></pre></td></tr></table></figure>
<p>运行之后即可导入商品类别数据，可以再navicat或者后台管理系统中查看：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1flhoawg0xlj31kw175atl.jpg" alt=""></p>
<p>接下来导入商品数据，观察商品数据结构之后，在db_tools文件夹下新建import_goods_data.py：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 获取当前文件的目录</span></div><div class="line">pwd = os.path.dirname(os.path.realpath(__file__))</div><div class="line"><span class="comment"># 获取项目名的目录(因为我的当前文件是在项目名下的文件夹下的文件.所以是../)</span></div><div class="line">sys.path.append(pwd + <span class="string">"../"</span>)</div><div class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"MxShop.settings"</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> django</div><div class="line"></div><div class="line">django.setup()</div><div class="line"></div><div class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods, GoodsCategory, GoodsImage</div><div class="line"></div><div class="line"><span class="keyword">from</span> db_tools.data.product_data <span class="keyword">import</span> row_data</div><div class="line"></div><div class="line"><span class="keyword">for</span> goods_detail <span class="keyword">in</span> row_data:</div><div class="line">    goods = Goods()</div><div class="line">    goods.name = goods_detail[<span class="string">"name"</span>]</div><div class="line">    goods.market_price = float(int(goods_detail[<span class="string">"market_price"</span>].replace(<span class="string">"￥"</span>, <span class="string">""</span>).replace(<span class="string">"元"</span>, <span class="string">""</span>)))</div><div class="line">    goods.shop_price = float(int(goods_detail[<span class="string">"sale_price"</span>].replace(<span class="string">"￥"</span>, <span class="string">""</span>).replace(<span class="string">"元"</span>, <span class="string">""</span>)))</div><div class="line">    goods.goods_brief = goods_detail[<span class="string">"desc"</span>] <span class="keyword">if</span> goods_detail[<span class="string">"desc"</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="string">""</span></div><div class="line">    goods.goods_desc = goods_detail[<span class="string">"goods_desc"</span>] <span class="keyword">if</span> goods_detail[<span class="string">"goods_desc"</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> <span class="string">""</span></div><div class="line">    goods.goods_front_image = goods_detail[<span class="string">"images"</span>][<span class="number">0</span>] <span class="keyword">if</span> goods_detail[<span class="string">"images"</span>] <span class="keyword">else</span> <span class="string">""</span></div><div class="line"></div><div class="line">    category_name = goods_detail[<span class="string">"categorys"</span>][<span class="number">-1</span>]</div><div class="line">    category = GoodsCategory.objects.filter(name=category_name)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> category:</div><div class="line">        goods.category = category[<span class="number">0</span>]</div><div class="line">    goods.save()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> goods_image <span class="keyword">in</span> goods_detail[<span class="string">"images"</span>]:</div><div class="line">        goods_image_instance = GoodsImage()</div><div class="line">        goods_image_instance.image = goods_image</div><div class="line">        goods_image_instance.goods = goods</div><div class="line">        goods_image_instance.save()</div></pre></td></tr></table></figure>
<p>运行即可。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1flhq8ni6jkj31kw175tt8.jpg" alt=""></p>
<p>但是发现其中的图片无法显示，需要我们进行配置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># settings.py文件中添加</span></div><div class="line">MEDIA_URL = <span class="string">"/media/"</span></div><div class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">"media"</span>)</div><div class="line"></div><div class="line"><span class="comment"># MxShop/urls.py文件中修改</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">import</span> xadmin</div><div class="line"><span class="keyword">from</span> MxShop.settings <span class="keyword">import</span> MEDIA_ROOT</div><div class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^xadmin/'</span>, xadmin.site.urls),</div><div class="line">    url(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT&#125;),</div><div class="line">]</div></pre></td></tr></table></figure>
<p>附<a href="http://blog.csdn.net/wwaiym/article/details/5820689" target="_blank" rel="external">Django settings.py的media路径设置</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分为以下几个环节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;user用户的model设计&lt;/li&gt;
&lt;li&gt;goods商品的model设计&lt;/li&gt;
&lt;li&gt;trade交易的model设计&lt;/li&gt;
&lt;li&gt;user_operation用户操作的model设计&lt;/li&gt;
&lt;li&gt;migrations原理及表生成&lt;/li&gt;
&lt;li&gt;xadmin后台管理系统的配置&lt;/li&gt;
&lt;li&gt;导入商品和商品类别数据&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Django，Vue" scheme="http://yoursite.com/categories/Django%EF%BC%8CVue/"/>
    
    
      <category term="Django，Vue，Rest" scheme="http://yoursite.com/tags/Django%EF%BC%8CVue%EF%BC%8CRest/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django REST Framework生鲜电商项目学习笔记——项目初始化</title>
    <link href="http://yoursite.com/2017/11/04/vue-django-2-1/"/>
    <id>http://yoursite.com/2017/11/04/vue-django-2-1/</id>
    <published>2017-11-04T05:18:54.000Z</published>
    <updated>2017-11-14T06:17:10.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="虚拟环境配置"><a href="#虚拟环境配置" class="headerlink" title="虚拟环境配置"></a><strong>虚拟环境配置</strong></h3><ol>
<li>配置virtualenv和virtualenvwrapper(略)</li>
<li>新建虚拟环境VueShop:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install djangorestframework</div><div class="line">pip install markdown django-filter</div><div class="line">pip install django</div><div class="line">pip install mysqlclient</div></pre></td></tr></table></figure>
<p>最好在pip后面加上<code>-i https://pypi.doban.com/simple</code>豆瓣源加快安装速度，否则太慢了，或者直接在配置文件中进行换源，不用每次都加。</p>
<a id="more"></a>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a><strong>新建项目</strong></h3><ol>
<li>创建</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1flbkc8lekej31760qs0wu.jpg" alt=""></p>
<ol>
<li>修改目录和配置</li>
</ol>
<p>新建apps和extra_apps两个Python Package，media和db_tools两个Directory，将users拖入apps中，并将apps和extra_apps右键mark为sources root，初步的项目结构如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1flblin1jgoj30fc0gs0u9.jpg" alt=""></p>
<p>修改settings.py中的配置，添加或修改为如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></div><div class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</div><div class="line">sys.path.insert(<span class="number">0</span>, BASE_DIR)</div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'apps'</span>))</div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'extra_apps'</span>))</div><div class="line"></div><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">"mxshop"</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">"root"</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">"12"</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">        <span class="string">'OPTIONS'</span>: &#123;<span class="string">'init_command'</span>: <span class="string">'SET storage_default_engine=INNODB;'</span>&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在更换数据库配置之后，需要在Navicat中创建相应的数据库。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;虚拟环境配置&quot;&gt;&lt;a href=&quot;#虚拟环境配置&quot; class=&quot;headerlink&quot; title=&quot;虚拟环境配置&quot;&gt;&lt;/a&gt;&lt;strong&gt;虚拟环境配置&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;配置virtualenv和virtualenvwrapper(略)&lt;/li&gt;
&lt;li&gt;新建虚拟环境VueShop:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install djangorestframework&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install markdown django-filter&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install django&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install mysqlclient&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最好在pip后面加上&lt;code&gt;-i https://pypi.doban.com/simple&lt;/code&gt;豆瓣源加快安装速度，否则太慢了，或者直接在配置文件中进行换源，不用每次都加。&lt;/p&gt;
    
    </summary>
    
      <category term="Django，Vue" scheme="http://yoursite.com/categories/Django%EF%BC%8CVue/"/>
    
    
      <category term="Django，Vue，Rest" scheme="http://yoursite.com/tags/Django%EF%BC%8CVue%EF%BC%8CRest/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Django REST Framework生鲜电商项目学习笔记——概览</title>
    <link href="http://yoursite.com/2017/11/03/vue-django-1-1/"/>
    <id>http://yoursite.com/2017/11/03/vue-django-1-1/</id>
    <published>2017-11-03T05:18:54.000Z</published>
    <updated>2017-11-08T09:49:49.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a><strong>技术要点</strong></h2><ol>
<li>Vue + Django REST Framework前后端分离技术</li>
<li>restful api开发流程</li>
<li>Django REST Framework的功能实现和核心源码分析</li>
<li>Sentry完成线上系统的错误日志的监控和告警</li>
<li>第三方登录和支付宝支付的集成</li>
</ol>
<a id="more"></a>
<h2 id="Django-REST-Framework技能"><a href="#Django-REST-Framework技能" class="headerlink" title="Django REST Framework技能"></a><strong>Django REST Framework技能</strong></h2><h3 id="通过view实现rest-api接口"><a href="#通过view实现rest-api接口" class="headerlink" title="通过view实现rest api接口"></a><strong>通过view实现rest api接口</strong></h3><ol>
<li>ApiView方式实现api接口</li>
<li>GenericView方式实现api接口</li>
<li>Viewset和router方式实现api接口和url配置</li>
<li>django_filter、SearchFilter、OrderFilter、分页</li>
<li>通用mixins</li>
</ol>
<h3 id="权限和认证"><a href="#权限和认证" class="headerlink" title="权限和认证"></a><strong>权限和认证</strong></h3><ol>
<li>Authentication用户认证设置</li>
<li>动态设置permission、Authentication</li>
<li>Validators实现字段验证</li>
</ol>
<h3 id="序列化和表单验证"><a href="#序列化和表单验证" class="headerlink" title="序列化和表单验证"></a><strong>序列化和表单验证</strong></h3><ol>
<li>Serializer</li>
<li>ModelSerializer</li>
<li>动态设置Serializer</li>
</ol>
<h3 id="支付、登录和注册"><a href="#支付、登录和注册" class="headerlink" title="支付、登录和注册"></a><strong>支付、登录和注册</strong></h3><ol>
<li>json web token实现登录</li>
<li>手机注册</li>
<li>支付宝支付</li>
<li>第三方登录</li>
</ol>
<h3 id="进阶开发"><a href="#进阶开发" class="headerlink" title="进阶开发"></a><strong>进阶开发</strong></h3><ol>
<li>django rest framework部分核心源码解读</li>
<li>文档自动化管理</li>
<li>django rest framework的缓存</li>
<li>Throttling对用户和ip进行限速</li>
</ol>
<h3 id="开发中常见的问题"><a href="#开发中常见的问题" class="headerlink" title="开发中常见的问题"></a><strong>开发中常见的问题</strong></h3><ol>
<li>本地系统不能重现的bug</li>
<li>api接口出错不能及时的发现或难找到错误栈</li>
<li>api文档管理问题</li>
<li>大量的url配置造成url配置越来越多难以维护</li>
<li>接口不及时更新文档，对方不知道如何去测试接口，但写文档会话费大量的时间去维护</li>
<li>为了防止爬虫，我们需要针对api的访问频率进行限制，比如一分钟、一小时或者一天用户的访问频率限制问题</li>
<li>某些页面将数据放入缓存，加速某些api的访问速度</li>
</ol>
<h3 id="开发中常见的问题解决方案"><a href="#开发中常见的问题解决方案" class="headerlink" title="开发中常见的问题解决方案"></a><strong>开发中常见的问题解决方案</strong></h3><ol>
<li>通过介绍pycharm的远程服务器代码调试技巧让大家不仅可以调试支付、第三方登录还可以调试远程服务器的代码来重现服务器上的bug</li>
<li>通过docker搭建sentry来体验错误日志监控系统，让我们不仅可以得到线上的错误栈还能及时在发生系统错误时受到邮件通知。</li>
<li>django rest framework的文档自动化管理以及url的注册管理功能会让我们省去写文档的时间</li>
<li>django rest framework的文档管理功能不仅可以让我们省去写文档的时间还能直接在文档里面测试接口、自动生成的js接口代码、shell测试代码和python测试代码</li>
<li>django rest framework提供的throttle来对api进行访问频率限制</li>
<li>引入第三方框架来设置某些api的缓存</li>
</ol>
<h3 id="Django进阶知识点"><a href="#Django进阶知识点" class="headerlink" title="Django进阶知识点"></a><strong>Django进阶知识点</strong></h3><ol>
<li>Django migrations原理</li>
<li>Django信号量</li>
<li>Django从请求到响应的完整过程</li>
<li>独立使用Django的Model</li>
</ol>
<h3 id="Vue知识点"><a href="#Vue知识点" class="headerlink" title="Vue知识点"></a><strong>Vue知识点</strong></h3><ol>
<li>Vue技术选型分析</li>
<li>API后端接口数据填充到Vue组件模板</li>
<li>Vue代码结构分析</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;技术要点&quot;&gt;&lt;a href=&quot;#技术要点&quot; class=&quot;headerlink&quot; title=&quot;技术要点&quot;&gt;&lt;/a&gt;&lt;strong&gt;技术要点&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Vue + Django REST Framework前后端分离技术&lt;/li&gt;
&lt;li&gt;restful api开发流程&lt;/li&gt;
&lt;li&gt;Django REST Framework的功能实现和核心源码分析&lt;/li&gt;
&lt;li&gt;Sentry完成线上系统的错误日志的监控和告警&lt;/li&gt;
&lt;li&gt;第三方登录和支付宝支付的集成&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Django，Vue" scheme="http://yoursite.com/categories/Django%EF%BC%8CVue/"/>
    
    
      <category term="Django，Vue，Rest" scheme="http://yoursite.com/tags/Django%EF%BC%8CVue%EF%BC%8CRest/"/>
    
  </entry>
  
  <entry>
    <title>Mac配置Privoxy设置go get代理</title>
    <link href="http://yoursite.com/2017/10/17/mac-privoxy/"/>
    <id>http://yoursite.com/2017/10/17/mac-privoxy/</id>
    <published>2017-10-17T05:18:54.000Z</published>
    <updated>2017-10-17T05:56:35.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Privoxy"><a href="#安装Privoxy" class="headerlink" title="安装Privoxy"></a><strong>安装Privoxy</strong></h2><p>地址：<a href="https://www.privoxy.org/sf-download-mirror/" target="_blank" rel="external">https://www.privoxy.org/sf-download-mirror/</a></p>
<a id="more"></a>
<h2 id="配置Privoxy"><a href="#配置Privoxy" class="headerlink" title="配置Privoxy"></a><strong>配置Privoxy</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /Applications/Privoxy</div><div class="line"><span class="comment"># 监听8118端口</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'listen-address 0.0.0.0:8118'</span> &gt;&gt; /usr/<span class="built_in">local</span>/etc/privoxy/config</div><div class="line"><span class="comment"># 设置转发socks5服务器</span></div><div class="line"><span class="built_in">echo</span> <span class="string">'forward-socks5 / localhost:1080 .'</span> &gt;&gt; /usr/<span class="built_in">local</span>/etc/privoxy/config</div></pre></td></tr></table></figure>
<p>发现提示错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-bash: /usr/<span class="built_in">local</span>/etc/privoxy/config: Permission denied</div></pre></td></tr></table></figure>
<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改/usr/local目录的所有者与组</span></div><div class="line">sudo chown -R <span class="string">"<span class="variable">$USER</span>"</span>:admin /usr/<span class="built_in">local</span></div></pre></td></tr></table></figure>
<h2 id="配置HTTP代理"><a href="#配置HTTP代理" class="headerlink" title="配置HTTP代理"></a><strong>配置HTTP代理</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果你使用bash</span></div><div class="line">vim ~/.bashrc</div><div class="line"><span class="comment"># 如果你使用zsh</span></div><div class="line">vim ~/.zshrc</div><div class="line"><span class="comment"># 加入</span></div><div class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118/</div><div class="line"><span class="comment"># 保存退出</span></div><div class="line"><span class="comment"># source 使其即刻生效</span></div><div class="line"><span class="built_in">source</span> ~/.bashrc</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="built_in">source</span> ~/.zshrc</div></pre></td></tr></table></figure>
<h2 id="测试Privoxy"><a href="#测试Privoxy" class="headerlink" title="测试Privoxy"></a><strong>测试Privoxy</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">lawtech@lawdeMacBook-Pro:/Applications/Privoxy$ curl www.google.com</div><div class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html;charset=utf-8"</span>&gt;</div><div class="line">&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</div><div class="line">&lt;H1&gt;302 Moved&lt;/H1&gt;</div><div class="line">The document has moved</div><div class="line">&lt;A HREF=<span class="string">"http://www.google.co.jp/?gfe_rd=cr&amp;amp;dcr=0&amp;amp;ei=G5flWZmXKa_o8Ae9j7PADw"</span>&gt;here&lt;/A&gt;.</div><div class="line">&lt;/BODY&gt;&lt;/HTML&gt;</div></pre></td></tr></table></figure>
<p>终于可以开心地go get了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Privoxy&quot;&gt;&lt;a href=&quot;#安装Privoxy&quot; class=&quot;headerlink&quot; title=&quot;安装Privoxy&quot;&gt;&lt;/a&gt;&lt;strong&gt;安装Privoxy&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;地址：&lt;a href=&quot;https://www.privoxy.org/sf-download-mirror/&quot;&gt;https://www.privoxy.org/sf-download-mirror/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go，Mac，Privoxy" scheme="http://yoursite.com/tags/Go%EF%BC%8CMac%EF%BC%8CPrivoxy/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——scrapyd部署scrapy爬虫</title>
    <link href="http://yoursite.com/2017/07/27/scrapyd/"/>
    <id>http://yoursite.com/2017/07/27/scrapyd/</id>
    <published>2017-07-27T12:18:54.000Z</published>
    <updated>2017-07-27T15:22:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>在完成scrapy项目之后，就要进入项目实际部署环节。</p>
<a id="more"></a>
<p>传送门：<a href="https://github.com/scrapy/scrapyd" target="_blank" rel="external">scrapyd</a></p>
<p>首先在我们之前爬虫项目的虚拟环境<code>article_spider</code>中安装scrapyd：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(article_spider) lawtech@lawdeMacBook-Pro-2:~$ pip install scrapyd lawtech@lawdeMacBook-Pro-2:~$ pip install scrapyd-client</div></pre></td></tr></table></figure>
<p><code>scrapyd-client</code>就没必要在虚拟环境中安装了。</p>
<p>在scrapy项目中，有一个文件<code>scrapy.cfg</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Automatically created by: scrapy startproject</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># For more information about the [deploy] section see:</span></div><div class="line"><span class="comment"># https://scrapyd.readthedocs.org/en/latest/deploy.html</span></div><div class="line"></div><div class="line">[settings]</div><div class="line">default = ArticleSpider.settings</div><div class="line"></div><div class="line">[deploy:lawtech]</div><div class="line">url = http://localhost:<span class="number">6800</span>/</div><div class="line">project = ArticleSpider</div></pre></td></tr></table></figure>
<p>其中的deploy就是为scrapyd服务的。</p>
<p>要部署项目，首先要启动scrapyd：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">lawtech@lawdeMacBook-Pro-2:~$ workon article_spider</div><div class="line">(article_spider) lawtech@lawdeMacBook-Pro-2:~$ scrapyd</div><div class="line">2017-07-27T23:14:51+0800 [-] Loading /Users/lawtech/myvirtualenvs/article_spider/lib/python3.5/site-packages/scrapyd/txapp.py...</div><div class="line">2017-07-27T23:14:52+0800 [-] Scrapyd web console available at http://127.0.0.1:6800/</div><div class="line">2017-07-27T23:14:52+0800 [-] Loaded.</div><div class="line">2017-07-27T23:14:52+0800 [twisted.scripts._twistd_unix.UnixAppLogger#info] twistd 17.1.0 (/Users/lawtech/myvirtualenvs/article_spider/bin/python3.5 3.5.2) starting up.</div><div class="line">2017-07-27T23:14:52+0800 [twisted.scripts._twistd_unix.UnixAppLogger#info] reactor class: twisted.internet.selectreactor.SelectReactor.</div><div class="line">2017-07-27T23:14:52+0800 [-] Site starting on 6800</div><div class="line">2017-07-27T23:14:52+0800 [twisted.web.server.Site#info] Starting factory &lt;twisted.web.server.Site object at 0x107a97198&gt;</div><div class="line">2017-07-27T23:14:52+0800 [Launcher] Scrapyd 1.2.0 started: max_proc=16, runner=&apos;scrapyd.runner&apos;</div></pre></td></tr></table></figure>
<p>部署项目：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(article_spider) lawtech@lawdeMacBook-Pro-2:~/PycharmProjects/ArticleSpider$ scrapyd-deploy lawtech -p ArticleSpider</div><div class="line">Packing version 1501168592</div><div class="line">Deploying to project &quot;ArticleSpider&quot; in http://localhost:6800/addversion.json</div><div class="line">Server response (200):</div><div class="line">&#123;&quot;status&quot;: &quot;ok&quot;, &quot;version&quot;: &quot;1501168592&quot;, &quot;spiders&quot;: 3, &quot;project&quot;: &quot;ArticleSpider&quot;, &quot;node_name&quot;: &quot;lawdeMacBook-Pro-2.local&quot;&#125;</div></pre></td></tr></table></figure>
<p>现在只是将项目部署到目标地址，但是没有调度爬虫，调度爬虫需要用到curl命令，在<a href="http://localhost:6800" target="_blank" rel="external">http://localhost:6800</a>有提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://localhost:6800/schedule.json -d project=default -d spider=somespider</div></pre></td></tr></table></figure>
<p>只需要改动一下即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lawtech@lawdeMacBook-Pro-2:~/PycharmProjects/ArticleSpider$ curl http://localhost:6800/schedule.json -d project=ArticleSpider -d spider=jobbole</div><div class="line">&#123;&quot;status&quot;: &quot;ok&quot;, &quot;jobid&quot;: &quot;2466c76872df11e7846da45e60ba3bb7&quot;, &quot;node_name&quot;: &quot;lawdeMacBook-Pro-2.local&quot;&#125;</div></pre></td></tr></table></figure>
<p>然后即可在<a href="http://127.0.0.1:6800/jobs" target="_blank" rel="external">http://127.0.0.1:6800/jobs</a>查看调度结果了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在完成scrapy项目之后，就要进入项目实际部署环节。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python，scrapyd" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython%EF%BC%8Cscrapyd/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——总结</title>
    <link href="http://yoursite.com/2017/07/27/scrapy-summary/"/>
    <id>http://yoursite.com/2017/07/27/scrapy-summary/</id>
    <published>2017-07-27T12:18:54.000Z</published>
    <updated>2017-07-27T15:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<ol>
<li>开发环境搭建</li>
<li>技术选型</li>
<li>伯乐在线爬取</li>
<li>知乎爬虫</li>
<li>拉勾网站整站爬虫</li>
<li>爬虫与反爬虫</li>
<li>scrapy进阶开发</li>
<li>scrapy-redis分布式开发</li>
<li>elasticsearch的基础知识</li>
<li>django搭建搜索网站</li>
<li>scrapyd部署scrapy项目</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;开发环境搭建&lt;/li&gt;
&lt;li&gt;技术选型&lt;/li&gt;
&lt;li&gt;伯乐在线爬取&lt;/li&gt;
&lt;li&gt;知乎爬虫&lt;/li&gt;
&lt;li&gt;拉勾网站整站爬虫&lt;/li&gt;
&lt;li&gt;爬虫与反爬虫&lt;/li&gt;
&lt;li&gt;scrapy进阶开发&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python，ElasticSearch" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython%EF%BC%8CElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Django搭建搜索网站</title>
    <link href="http://yoursite.com/2017/07/20/django-elasticsearch/"/>
    <id>http://yoursite.com/2017/07/20/django-elasticsearch/</id>
    <published>2017-07-20T12:18:54.000Z</published>
    <updated>2017-07-27T14:26:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在完成Scrapy和Elasticsearch的基本学习之后，下面就要利用Django开始搭建我们的搜索网站。</p>
<a id="more"></a>
<h2 id="es完成搜索建议-搜索建议字段保存"><a href="#es完成搜索建议-搜索建议字段保存" class="headerlink" title="es完成搜索建议-搜索建议字段保存"></a>es完成搜索建议-搜索建议字段保存</h2><p>传送门：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-completion.html" target="_blank" rel="external">Completion Suggester</a></p>
<p>为了完成搜索时自动补全的功能，我们在<code>es_types.py</code>中加入一个字段<code>suggest = Completion(analyzer=ik_analyzer)</code>，由于源码冲突问题，我们需要自定义一个analyzer：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> elasticsearch_dsl.analysis <span class="keyword">import</span> CustomAnalyzer <span class="keyword">as</span> _CustomAnalyzer</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomAnalyzer</span><span class="params">(_CustomAnalyzer)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    自定义Analyzer</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_analysis_definition</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> &#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">ik_analyzer = CustomAnalyzer(<span class="string">"ik_max_word"</span>, filter=[<span class="string">"lowercase"</span>])</div></pre></td></tr></table></figure>
<p>然后重新生成索引：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fhf7k4qfqxj30xe0v4n1s.jpg" alt=""></p>
<p>我们需要为article生成搜索建议词，所以在<code>save_to_es()</code>函数中加入<code>article.suggest = [{&quot;input&quot;:[], &quot;weight&quot;:2}]</code>，然后我们需要自己写一个方法通过之前的analyze接口生成搜索建议：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> elasticsearch_dsl.connections <span class="keyword">import</span> connections</div><div class="line"></div><div class="line"><span class="comment"># 生成es的实例</span></div><div class="line">es = connections.create_connection(ArticleType._doc_type.using)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_suggests</span><span class="params">(index, info_tuple)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    根据字符串生成搜索建议数组</div><div class="line">    """</div><div class="line">    used_words = set()</div><div class="line">    suggests = []</div><div class="line">    <span class="keyword">for</span> text, weight <span class="keyword">in</span> info_tuple:</div><div class="line">        <span class="keyword">if</span> text:</div><div class="line">            <span class="comment"># 调用es的analyze接口分析字符串</span></div><div class="line">            words = es.indices.analyze(index=index, analyzer=<span class="string">"ik_max_word"</span>, params=&#123;<span class="string">"filter"</span>: [<span class="string">"lowercase"</span>]&#125;, body=text)</div><div class="line">            analyzed_words = set(r[<span class="string">"token"</span>] <span class="keyword">for</span> r <span class="keyword">in</span> words[<span class="string">"tokens"</span>] <span class="keyword">if</span> len(r[<span class="string">"token"</span>]) &gt; <span class="number">1</span>)</div><div class="line">            new_words = analyzed_words - used_words</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            new_words = set()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> new_words:</div><div class="line">            suggests.append(&#123;<span class="string">"input"</span>: list(new_words), <span class="string">"weight"</span>: weight&#125;)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> suggests</div></pre></td></tr></table></figure>
<p>所以之前的代码就可以修改为</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_es</span><span class="params">(self)</span>:</span></div><div class="line">        article = ArticleType()</div><div class="line">        article.title = self[<span class="string">'title'</span>]</div><div class="line">        article.create_date = self[<span class="string">"create_date"</span>]</div><div class="line">        article.content = remove_tags(self[<span class="string">"content"</span>])</div><div class="line">        article.front_image_url = self[<span class="string">"front_image_url"</span>]</div><div class="line">        <span class="keyword">if</span> <span class="string">"front_image_path"</span> <span class="keyword">in</span> self:</div><div class="line">            article.front_image_path = self[<span class="string">"front_image_path"</span>]</div><div class="line">        article.praise_nums = self[<span class="string">"praise_nums"</span>]</div><div class="line">        article.fav_nums = self[<span class="string">"fav_nums"</span>]</div><div class="line">        article.comment_nums = self[<span class="string">"comment_nums"</span>]</div><div class="line">        article.url = self[<span class="string">"url"</span>]</div><div class="line">        article.tags = self[<span class="string">"tags"</span>]</div><div class="line">        article.meta.id = self[<span class="string">"url_object_id"</span>]</div><div class="line">        </div><div class="line">        article.suggest = gen_suggests(ArticleType._doc_type.index, ((article.title,<span class="number">10</span>),(article.tags, <span class="number">7</span>)))</div><div class="line">        article.save()</div><div class="line">        <span class="keyword">return</span></div></pre></td></tr></table></figure>
<p>这样我们就完成了suggest字段的准备。</p>
<h2 id="Django实现Elasticsearch的搜索建议"><a href="#Django实现Elasticsearch的搜索建议" class="headerlink" title="Django实现Elasticsearch的搜索建议"></a><strong>Django实现Elasticsearch的搜索建议</strong></h2><p>不想写了，没耐心了，巴拉巴拉~~</p>
<p>直接传送门走起：<a href="https://github.com/lawtech0902/LcvSearch" target="_blank" rel="external">LcvSearch</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在完成Scrapy和Elasticsearch的基本学习之后，下面就要利用Django开始搭建我们的搜索网站。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python，Django，Elasticsearch" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython%EF%BC%8CDjango%EF%BC%8CElasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Elasticsearch搜索引擎的使用</title>
    <link href="http://yoursite.com/2017/07/09/elasticsearch-usage/"/>
    <id>http://yoursite.com/2017/07/09/elasticsearch-usage/</id>
    <published>2017-07-09T12:18:54.000Z</published>
    <updated>2017-07-09T15:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch介绍"><a href="#Elasticsearch介绍" class="headerlink" title="Elasticsearch介绍"></a><strong>Elasticsearch介绍</strong></h2><p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>
<p>我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望我们的搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题以及可能出现的更多其它问题。</p>
<a id="more"></a>
<h2 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="Elasticsearch安装"></a><strong>Elasticsearch安装</strong></h2><ol>
<li>Elasticsearch-RTF安装</li>
</ol>
<p><strong>什么是Elasticsearch-RTF？</strong> RTF是Ready To Fly的缩写，在航模里面，表示无需自己组装零件即可直接上手即飞的航空模型，Elasticsearch-RTF是针对中文的一个发行版，即使用最新稳定的elasticsearch版本，并且帮你下载测试好对应的插件，如中文分词插件等，目的是让你可以下载下来就可以直接的使用（虽然es已经很简单了，但是很多新手还是需要去花时间去找配置，中间的过程其实很痛苦），当然等你对这些都熟悉了之后，你完全可以自己去diy了，跟linux的众多发行版是一个意思。</p>
<p>当前版本 Elasticsearch 5.1.1</p>
<p>传送门：<a href="https://github.com/medcl/elasticsearch-rtf" target="_blank" rel="external">Elasticsearch-RTF</a></p>
<ol>
<li>head插件和kibana的安装</li>
</ol>
<p>传送门：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="external">elasticsearch-head</a>，<a href="https://www.elastic.co/products/kibana" target="_blank" rel="external">kibana</a></p>
<p>安装方式在github地址中都有详细说明。</p>
<p>注意：在elsticsearch.yml中添加如下设置，使得elasticsearch-head能够连接到elasticsearch。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># security policy configuration, allowing third-party plugins connection.</span></div><div class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></div><div class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></div><div class="line"><span class="string">http.cors.allow-methods:</span> <span class="string">OPTIONS,</span> <span class="string">HEAD,</span> <span class="string">GET,</span> <span class="string">POST,</span> <span class="string">PUT,</span> <span class="string">DELETE</span></div><div class="line"><span class="string">http.cors.allow-headers:</span> <span class="string">"X-Requested-With, Content-Type, Content-Length, X-User"</span></div></pre></td></tr></table></figure>
<h2 id="Elasticsearch的基本概念"><a href="#Elasticsearch的基本概念" class="headerlink" title="Elasticsearch的基本概念"></a>Elasticsearch的基本概念</h2><p>传送门：<a href="https://endymecy.gitbooks.io/elasticsearch-guide-chinese/content/getting-started/basic-concepts.html" target="_blank" rel="external">基本概念</a></p>
<h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a><strong>倒排索引</strong></h2><p>倒排索引（英语：Inverted index），也常被称为反向索引、置入档案或反向档案，是一种索引方法，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。它是文档检索系统中最常用的数据结构。</p>
<p>有两种不同的反向索引形式：</p>
<ul>
<li>一条记录的水平反向索引（或者反向档案索引）包含每个引用单词的文档的列表。</li>
<li>一个单词的水平反向索引（或者完全反向索引）又包含每个单词在一个文档中的位置。</li>
</ul>
<p>后者的形式提供了更多的兼容性（比如短语搜索），但是需要更多的时间和空间来创建。</p>
<p>传送门：<a href="https://es.xiaoleilu.com/052_Mapping_Analysis/35_Inverted_index.html" target="_blank" rel="external">倒排索引</a></p>
<p>这个例子很好，所以搬来：</p>
<p>以英文为例，下面是要被索引的文本：</p>
<ul>
<li>T0=<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1ab3d9202f18a678affe9a339511bef0a7b8b110" alt="{\displaystyle T_{0}=}"><code>&quot;it is what it is&quot;</code></li>
<li>T1=<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/57ac5840245616f79874f4635b3bcb2e3da344dd" alt="{\displaystyle T_{1}=}"><code>&quot;what is it&quot;</code></li>
<li>T2=”it is a banana”</li>
</ul>
<p>我们就能得到下面的反向文件索引：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;a&quot;:      &#123;2&#125;</div><div class="line">&quot;banana&quot;: &#123;2&#125;</div><div class="line">&quot;is&quot;:     &#123;0, 1, 2&#125;</div><div class="line">&quot;it&quot;:     &#123;0, 1, 2&#125;</div><div class="line">&quot;what&quot;:   &#123;0, 1&#125;</div></pre></td></tr></table></figure>
<p>检索的条件”what”, “is” 和 “it” 将对应这个集合：{0,1}∩{0,1,2}∩{0,1,2}={0,1}。</p>
<p>对相同的文字，我们得到后面这些完全反向索引，有文档数量和当前查询的单词结果组成的的成对数据。 同样，文档数量和当前查询的单词结果都从零开始。所以，”banana”: {(2, 3)} 就是说 “banana”在第三个文档里 (T2)，而且在第三个文档的位置是第四个单词(地址为 3)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;a&quot;:      &#123;(2, 2)&#125;</div><div class="line">&quot;banana&quot;: &#123;(2, 3)&#125;</div><div class="line">&quot;is&quot;:     &#123;(0, 1), (0, 4), (1, 1), (2, 1)&#125;</div><div class="line">&quot;it&quot;:     &#123;(0, 0), (0, 3), (1, 2), (2, 0)&#125; </div><div class="line">&quot;what&quot;:   &#123;(0, 2), (1, 0)&#125;</div></pre></td></tr></table></figure>
<p>如果我们执行短语搜索”what is it” 我们得到这个短语的全部单词各自的结果所在文档为文档0和文档1。但是这个短语检索的连续的条件仅仅在文档1得到。</p>
<h2 id="Elasticsearch基本的索引和文档CRUD操作"><a href="#Elasticsearch基本的索引和文档CRUD操作" class="headerlink" title="Elasticsearch基本的索引和文档CRUD操作"></a>Elasticsearch基本的索引和文档CRUD操作</h2><p>我们在Kibana Dev Tools的Console中进行这些操作。</p>
<ol>
<li>创建索引</li>
</ol>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fh7v9fmdryj31kw0fc0x9.jpg" alt=""></p>
<p>添加索引完成后，elasticsearch-head中显示如下：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fh7va0tji6j31kw0cygpo.jpg" alt=""></p>
<p>实际上，在head中也可以添加索引：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fh7vb41pvbj30m806yq3c.jpg" alt=""></p>
<p>这两种方式是等效的，只是在Kibana中我们使用的是Rest API。</p>
<ol>
<li>获取settings</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 获取settings</div><div class="line">GET lagou/_settings</div><div class="line">GET _all/_settings</div><div class="line">GET .kibana,lagou/_settings</div><div class="line">GET _settings</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"># GET lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET _all/_settings</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;.kibana&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499073856161&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;1&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;g_cP7qZERXiVeKEwjbNE1g&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;.kibana&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET .kibana,lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;.kibana&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499073856161&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;1&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;g_cP7qZERXiVeKEwjbNE1g&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;.kibana&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET _settings</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;.kibana&quot;: &#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499073856161&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;1&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;g_cP7qZERXiVeKEwjbNE1g&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;.kibana&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>修改settings</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 修改settings</div><div class="line">PUT lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;number_of_replicas&quot;: 2</div><div class="line">&#125;</div><div class="line"></div><div class="line">PUT lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;number_of_shards&quot;: 2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># PUT lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;acknowledged&quot;: true</div><div class="line">&#125;</div><div class="line"></div><div class="line"># PUT lagou/_settings</div><div class="line">&#123;</div><div class="line">  &quot;error&quot;: &#123;</div><div class="line">    &quot;root_cause&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;type&quot;: &quot;illegal_argument_exception&quot;,</div><div class="line">        &quot;reason&quot;: &quot;can&apos;t change the number of shards for an index&quot;</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    &quot;type&quot;: &quot;illegal_argument_exception&quot;,</div><div class="line">    &quot;reason&quot;: &quot;can&apos;t change the number of shards for an index&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;status&quot;: 400</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于shards一旦设置就不能更改，所以第二个操作失败。</p>
<ol>
<li>获取索引信息</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 获取索引信息</div><div class="line">GET _all</div><div class="line">GET lagou</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"># GET _all</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;aliases&quot;: &#123;&#125;,</div><div class="line">    &quot;mappings&quot;: &#123;&#125;,</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;2&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;.kibana&quot;: &#123;</div><div class="line">    &quot;aliases&quot;: &#123;&#125;,</div><div class="line">    &quot;mappings&quot;: &#123;</div><div class="line">      &quot;index-pattern&quot;: &#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">          &quot;fieldFormatMap&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;fields&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;intervalName&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;notExpandable&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;boolean&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;sourceFilters&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timeFieldName&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;title&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;config&quot;: &#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">          &quot;buildNum&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;keyword&quot;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;timelion-sheet&quot;: &#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">          &quot;description&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;hits&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;integer&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;kibanaSavedObjectMeta&quot;: &#123;</div><div class="line">            &quot;properties&quot;: &#123;</div><div class="line">              &quot;searchSourceJSON&quot;: &#123;</div><div class="line">                &quot;type&quot;: &quot;text&quot;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_chart_height&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;integer&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_columns&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;integer&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_interval&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_other_interval&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_rows&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;integer&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;timelion_sheet&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;title&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;text&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;version&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;integer&quot;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;server&quot;: &#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">          &quot;uuid&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;keyword&quot;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499073856161&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;1&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;1&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;g_cP7qZERXiVeKEwjbNE1g&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;.kibana&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET lagou</div><div class="line">&#123;</div><div class="line">  &quot;lagou&quot;: &#123;</div><div class="line">    &quot;aliases&quot;: &#123;&#125;,</div><div class="line">    &quot;mappings&quot;: &#123;&#125;,</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;creation_date&quot;: &quot;1499158041414&quot;,</div><div class="line">        &quot;number_of_shards&quot;: &quot;5&quot;,</div><div class="line">        &quot;number_of_replicas&quot;: &quot;2&quot;,</div><div class="line">        &quot;uuid&quot;: &quot;BhByVdsdTx65H4xnL4TlWQ&quot;,</div><div class="line">        &quot;version&quot;: &#123;</div><div class="line">          &quot;created&quot;: &quot;5010199&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;provided_name&quot;: &quot;lagou&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>保存文档</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># 保存文档</div><div class="line">PUT lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;:&quot;python分布式爬虫开发&quot;,</div><div class="line">  &quot;salary_min&quot;:15000,</div><div class="line">  &quot;city&quot;:&quot;北京&quot;,</div><div class="line">  &quot;company&quot;:&#123;</div><div class="line">    &quot;name&quot;:&quot;百度&quot;,</div><div class="line">    &quot;company_addr&quot;:&quot;北京市软件园&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;publish_date&quot;:&quot;2017-4-16&quot;,</div><div class="line">  &quot;comments&quot;:15</div><div class="line">&#125;</div><div class="line"></div><div class="line">POST lagou/job/</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;:&quot;python django 开发工程师&quot;,</div><div class="line">  &quot;salary_min&quot;:30000,</div><div class="line">  &quot;city&quot;:&quot;上海&quot;,</div><div class="line">  &quot;company&quot;:&#123;</div><div class="line">    &quot;name&quot;:&quot;美团科技&quot;,</div><div class="line">    &quot;company_addr&quot;:&quot;北京市软件园A区&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;publish_date&quot;:&quot;2017-4-16&quot;,</div><div class="line">  &quot;comments&quot;:20</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># PUT lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST lagou/job/</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;AV0MzKkUnOriGeBA_nYi&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在elasticsearch-head中显示如下：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fh7x0a0953j30g00fuq50.jpg" alt=""><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fh7x0f4prhj30eu0fqdhn.jpg" alt=""></p>
<p>分别采用PUT和POST方法保存两个文档，采用POST方法时未指定id仍然保存成功，id为系统分配的uuid。</p>
<ol>
<li>获取文档</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 获取文档</div><div class="line">GET lagou/job/1</div><div class="line">GET lagou/job/1?_source=title</div><div class="line">GET lagou/job/1?_source=title,city</div><div class="line">GET lagou/job/1?_source</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"># GET lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;found&quot;: true,</div><div class="line">  &quot;_source&quot;: &#123;</div><div class="line">    &quot;title&quot;: &quot;python分布式爬虫开发&quot;,</div><div class="line">    &quot;salary_min&quot;: 15000,</div><div class="line">    &quot;city&quot;: &quot;北京&quot;,</div><div class="line">    &quot;company&quot;: &#123;</div><div class="line">      &quot;name&quot;: &quot;百度&quot;,</div><div class="line">      &quot;company_addr&quot;: &quot;北京市软件园&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;publish_date&quot;: &quot;2017-4-16&quot;,</div><div class="line">    &quot;comments&quot;: 15</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET lagou/job/1?_source=title</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;found&quot;: true,</div><div class="line">  &quot;_source&quot;: &#123;</div><div class="line">    &quot;title&quot;: &quot;python分布式爬虫开发&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET lagou/job/1?_source=title,city</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;found&quot;: true,</div><div class="line">  &quot;_source&quot;: &#123;</div><div class="line">    &quot;city&quot;: &quot;北京&quot;,</div><div class="line">    &quot;title&quot;: &quot;python分布式爬虫开发&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># GET lagou/job/1?_source</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;found&quot;: true,</div><div class="line">  &quot;_source&quot;: &#123;</div><div class="line">    &quot;title&quot;: &quot;python分布式爬虫开发&quot;,</div><div class="line">    &quot;salary_min&quot;: 15000,</div><div class="line">    &quot;city&quot;: &quot;北京&quot;,</div><div class="line">    &quot;company&quot;: &#123;</div><div class="line">      &quot;name&quot;: &quot;百度&quot;,</div><div class="line">      &quot;company_addr&quot;: &quot;北京市软件园&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;publish_date&quot;: &quot;2017-4-16&quot;,</div><div class="line">    &quot;comments&quot;: 15</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>修改文档</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 修改文档</div><div class="line">PUT lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;:&quot;python分布式爬虫开发&quot;,</div><div class="line">  &quot;salary_min&quot;:15000,</div><div class="line">  &quot;company&quot;:&#123;</div><div class="line">    &quot;name&quot;:&quot;百度&quot;,</div><div class="line">    &quot;company_addr&quot;:&quot;北京市软件园&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;publish_date&quot;:&quot;2017-4-16&quot;,</div><div class="line">  &quot;comments&quot;:15</div><div class="line">&#125;</div><div class="line"></div><div class="line">POST lagou/job/1/_update</div><div class="line">&#123;</div><div class="line">  &quot;doc&quot;:&#123;</div><div class="line">    &quot;comments&quot;:20</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># PUT lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 2,</div><div class="line">  &quot;result&quot;: &quot;updated&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: false</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST lagou/job/1/_update</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 3,</div><div class="line">  &quot;result&quot;: &quot;updated&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改文档有两种方式，一种是PUT覆盖更新方式，一种是POST增量更新方式。</p>
<ol>
<li>删除</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 删除</div><div class="line"></div><div class="line"># 删除文档</div><div class="line">DELETE lagou/job/1</div><div class="line"></div><div class="line"># 删除索引</div><div class="line">DELETE lagou/</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># DELETE lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;found&quot;: true,</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 4,</div><div class="line">  &quot;result&quot;: &quot;deleted&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># DELETE lagou/</div><div class="line">&#123;</div><div class="line">  &quot;acknowledged&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Elasticsearch的mget和bulk批量操作"><a href="#Elasticsearch的mget和bulk批量操作" class="headerlink" title="Elasticsearch的mget和bulk批量操作"></a>Elasticsearch的mget和bulk批量操作</h2><h3 id="mget"><a href="#mget" class="headerlink" title="mget"></a><strong>mget</strong></h3><p>像Elasticsearch一样，检索多个文档依旧非常快。合并多个请求可以避免每个请求单独的网络开销。如果你需要从Elasticsearch中检索多个文档，相对于一个一个的检索，更快的方式是在一个请求中使用multi-get或者mget API。</p>
<p><code>mget</code> API参数是一个<code>docs</code>数组，数组的每个节点定义一个文档的<code>_index</code>、<code>_type</code>、<code>_id</code>元数据。如果你只想检索一个或几个确定的字段，也可以定义一个<code>_source</code>参数。</p>
<p>为了演示mget操作，我们新建了一个索引testdb，其下文档如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fh7yk9bbz0j30k2076t9m.jpg" alt=""></p>
<p>第一种：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 查询job1 id为1的数据，job2 id为2的数据</div><div class="line">GET _mget</div><div class="line">&#123;</div><div class="line">  &quot;docs&quot;:[</div><div class="line">    &#123;</div><div class="line">      &quot;_index&quot;:&quot;testdb&quot;,</div><div class="line">      &quot;_type&quot;:&quot;job1&quot;,</div><div class="line">      &quot;_id&quot;:1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;_index&quot;:&quot;testdb&quot;,</div><div class="line">      &quot;_type&quot;:&quot;job2&quot;,</div><div class="line">      &quot;_id&quot;:2</div><div class="line">    &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;docs&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;_index&quot;: &quot;testdb&quot;,</div><div class="line">      &quot;_type&quot;: &quot;job1&quot;,</div><div class="line">      &quot;_id&quot;: &quot;1&quot;,</div><div class="line">      &quot;_version&quot;: 1,</div><div class="line">      &quot;found&quot;: true,</div><div class="line">      &quot;_source&quot;: &#123;</div><div class="line">        &quot;title&quot;: &quot;job1_1&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;_index&quot;: &quot;testdb&quot;,</div><div class="line">      &quot;_type&quot;: &quot;job2&quot;,</div><div class="line">      &quot;_id&quot;: &quot;2&quot;,</div><div class="line">      &quot;_version&quot;: 1,</div><div class="line">      &quot;found&quot;: true,</div><div class="line">      &quot;_source&quot;: &#123;</div><div class="line">        &quot;title&quot;: &quot;job2_2&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种方法，在url里传递索引名称：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 第二种方法，在url中传递索引名称</div><div class="line">GET testdb/_mget</div><div class="line">&#123;</div><div class="line">  &quot;docs&quot;:[</div><div class="line">    &#123;</div><div class="line">      &quot;_type&quot;:&quot;job1&quot;,</div><div class="line">      &quot;_id&quot;:1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;_type&quot;:&quot;job2&quot;,</div><div class="line">      &quot;_id&quot;:2</div><div class="line">    &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果都是一样的。</p>
<p>如果查询的数据index和type都相同，则可以将type也传入到url中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 查询的数据索引名称相同，type也相同</div><div class="line">GET testdb/job1/_mget</div><div class="line">&#123;</div><div class="line">  &quot;docs&quot;:[</div><div class="line">    &#123;</div><div class="line">      &quot;_id&quot;:1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;_id&quot;:2</div><div class="line">    &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外还有一种简写方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 只需要传递id即可</div><div class="line">GET testdb/job1/_mget</div><div class="line">&#123;</div><div class="line">  &quot;ids&quot;:[1,2]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>两者结果相同。</p>
<h3 id="bulk"><a href="#bulk" class="headerlink" title="bulk"></a><strong>bulk</strong></h3><p>就像<code>mget</code>允许我们一次性检索多个文档一样，<code>bulk</code> API允许我们使用单一请求来实现多个文档的<code>create</code>、<code>index</code>、<code>update</code>或<code>delete</code>。这对索引类似于日志活动这样的数据流非常有用，它们可以以成百上千的数据为一个批次按序进行索引。</p>
<p>传送门：<a href="https://es.xiaoleilu.com/030_Data/55_Bulk.html" target="_blank" rel="external">更新时的批量操作</a></p>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># bulk操作</div><div class="line">POST _bulk</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;lagou&quot;, &quot;_type&quot;:&quot;job&quot;, &quot;_id&quot;:1&#125;&#125;</div><div class="line">&#123;&quot;title&quot;:&quot;python分布式爬虫开发&quot;,&quot;salary_min&quot;:15000,&quot;city&quot;:&quot;北京&quot;,&quot;company&quot;:&#123;&quot;name&quot;:&quot;百度&quot;,&quot;company_addr&quot;:&quot;北京市软件园&quot;&#125;,&quot;publish_date&quot;:&quot;2017-4-16&quot;,&quot;comments&quot;:15&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;lagou&quot;, &quot;_type&quot;:&quot;job2&quot;, &quot;_id&quot;:2&#125;&#125;</div><div class="line">&#123;&quot;title&quot;:&quot;python django开发&quot;,&quot;salary_min&quot;:30000,&quot;city&quot;:&quot;成都&quot;,&quot;company&quot;:&#123;&quot;name&quot;:&quot;阿里巴巴&quot;,&quot;company_addr&quot;:&quot;北京市软件园B区&quot;&#125;,&quot;publish_date&quot;:&quot;2017-4-18&quot;,&quot;comments&quot;:50&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 462,</div><div class="line">  &quot;errors&quot;: false,</div><div class="line">  &quot;items&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;1&quot;,</div><div class="line">        &quot;_version&quot;: 1,</div><div class="line">        &quot;result&quot;: &quot;created&quot;,</div><div class="line">        &quot;_shards&quot;: &#123;</div><div class="line">          &quot;total&quot;: 2,</div><div class="line">          &quot;successful&quot;: 1,</div><div class="line">          &quot;failed&quot;: 0</div><div class="line">        &#125;,</div><div class="line">        &quot;created&quot;: true,</div><div class="line">        &quot;status&quot;: 201</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;index&quot;: &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job2&quot;,</div><div class="line">        &quot;_id&quot;: &quot;2&quot;,</div><div class="line">        &quot;_version&quot;: 1,</div><div class="line">        &quot;result&quot;: &quot;created&quot;,</div><div class="line">        &quot;_shards&quot;: &#123;</div><div class="line">          &quot;total&quot;: 2,</div><div class="line">          &quot;successful&quot;: 1,</div><div class="line">          &quot;failed&quot;: 0</div><div class="line">        &#125;,</div><div class="line">        &quot;created&quot;: true,</div><div class="line">        &quot;status&quot;: 201</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Elasticsearch的mapping映射管理"><a href="#Elasticsearch的mapping映射管理" class="headerlink" title="Elasticsearch的mapping映射管理"></a><strong>Elasticsearch的mapping映射管理</strong></h2><p>为了能够把日期字段处理成日期，把数字字段处理成数字，把字符串字段处理成全文本（Full-text）或精确的字符串值，Elasticsearch需要知道每个字段里面都包含了什么类型。这些类型和字段的信息存储（包含）在映射（mapping）中。</p>
<p>索引中每个文档都有一个<strong>类型(type)</strong>。 每个类型拥有自己的<strong>映射(mapping)</strong>或者<strong>模式定义(schema definition)</strong>。一个映射定义了字段类型，每个字段的数据类型，以及字段被Elasticsearch处理的方式。映射还用于设置关联到类型上的元数据。</p>
<p>传送门：<a href="https://es.xiaoleilu.com/052_Mapping_Analysis/45_Mapping.html" target="_blank" rel="external">映射</a></p>
<p>测试：</p>
<p>创建映射：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># 创建索引</div><div class="line">PUT lagou</div><div class="line">&#123;</div><div class="line">  &quot;mappings&quot;: &#123;</div><div class="line">    &quot;job&quot;: &#123;</div><div class="line">      &quot;properties&quot;: &#123;</div><div class="line">        &quot;title&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;text&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;salary_min&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;integer&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;city&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;keyword&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;company&quot;: &#123;</div><div class="line">          &quot;properties&quot;: &#123;</div><div class="line">            &quot;name&quot;: &#123;</div><div class="line">              &quot;type&quot;: &quot;text&quot;</div><div class="line">            &#125;,</div><div class="line">            &quot;company_addr&quot;: &#123;</div><div class="line">              &quot;type&quot;: &quot;text&quot;</div><div class="line">            &#125;,</div><div class="line">            &quot;employee_count&quot;: &#123;</div><div class="line">              &quot;type&quot;: &quot;integer&quot;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        &quot;publish_date&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;date&quot;,</div><div class="line">          &quot;format&quot;: &quot;yyyy-MM-dd&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;comments&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;integer&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>放入数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 放入数据</div><div class="line">PUT lagou/job/1</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;python分布式爬虫开发&quot;,</div><div class="line">  &quot;salary_min&quot;: 15000,</div><div class="line">  &quot;city&quot;: &quot;北京&quot;,</div><div class="line">  &quot;company&quot;: &#123;</div><div class="line">    &quot;name&quot;: &quot;百度&quot;,</div><div class="line">    &quot;company_addr&quot;: &quot;北京市软件园&quot;,</div><div class="line">    &quot;employee_count&quot;: 50</div><div class="line">  &#125;,</div><div class="line">  &quot;publish_date&quot;: &quot;2017-4-18&quot;,</div><div class="line">  &quot;comments&quot;: 15</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;1&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以在elasticsearch-head中查看结果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fh8zznx62dj30x80vagpy.jpg" alt=""></p>
<p>如果我们对放入的数据稍做修改，将<code>&quot;salary_min&quot;:15000</code>改为<code>&quot;salary_min&quot;:&quot;15000&quot;</code>，操作还是可以完成的，这是因为mappings会对其进行类型转换得到我们所要的<code>integer</code>类型。</p>
<p>如果将<code>&quot;salary_min&quot;:15000</code>改为<code>&quot;salary_min&quot;:&quot;abc&quot;</code>，那就会出错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;error&quot;: &#123;</div><div class="line">    &quot;root_cause&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;type&quot;: &quot;mapper_parsing_exception&quot;,</div><div class="line">        &quot;reason&quot;: &quot;failed to parse [salary_min]&quot;</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    &quot;type&quot;: &quot;mapper_parsing_exception&quot;,</div><div class="line">    &quot;reason&quot;: &quot;failed to parse [salary_min]&quot;,</div><div class="line">    &quot;caused_by&quot;: &#123;</div><div class="line">      &quot;type&quot;: &quot;number_format_exception&quot;,</div><div class="line">      &quot;reason&quot;: &quot;For input string: \&quot;abc\&quot;&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;status&quot;: 400</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取mapping：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET lagou/_mapping</div><div class="line">GET lagou/mapping/job</div><div class="line">GET _all/_mapping</div><div class="line">GET _all/_mapping/job</div></pre></td></tr></table></figure>
<h2 id="Elasticsearch的简单查询"><a href="#Elasticsearch的简单查询" class="headerlink" title="Elasticsearch的简单查询"></a>Elasticsearch的简单查询</h2><p>查询分类：</p>
<ul>
<li>基本查询：使用Elasticsearch内置查询条件进行查询</li>
<li>组合查询：把多个查询组合在一起进行复合查询</li>
<li>过滤：查询同时，通过filter条件下在不影响打分的情况下筛选数据</li>
</ul>
<p>测试，首先添加映射：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># 添加映射</div><div class="line">PUT lagou</div><div class="line">&#123;</div><div class="line">  &quot;mappings&quot;: &#123;</div><div class="line">    &quot;job&quot;: &#123;</div><div class="line">      &quot;properties&quot;: &#123;</div><div class="line">        &quot;title&quot;: &#123;</div><div class="line">          &quot;store&quot;: true,</div><div class="line">          &quot;type&quot;: &quot;text&quot;,</div><div class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;company_name&quot;: &#123;</div><div class="line">          &quot;store&quot;: true,</div><div class="line">          &quot;type&quot;: &quot;keyword&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;desc&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;text&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;comments&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;integer&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;add_time&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;date&quot;,</div><div class="line">          &quot;format&quot;: &quot;yyyy-MM-dd&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：”ik_max_word”是分析器类型的一种，会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合。</p>
<p>传送门：<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">elasticsearch-analysis-ik</a></p>
<p>然后添加我们准备好的数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># 添加数据</div><div class="line">POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;python django 开发工程师&quot;,</div><div class="line">  &quot;company_name&quot;: &quot;美团科技有限公司&quot;,</div><div class="line">  &quot;desc&quot;: &quot;对django的概念熟悉，熟悉python基础知识&quot;,</div><div class="line">  &quot;comments&quot;: 20,</div><div class="line">  &quot;add_time&quot;: &quot;2017-4-1&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;python scrapy redis分布式爬虫基本&quot;,</div><div class="line">  &quot;company_name&quot;: &quot;百度科技有限公司&quot;,</div><div class="line">  &quot;desc&quot;: &quot;对scrapy的概念熟悉，熟悉redis的基本操作&quot;,</div><div class="line">  &quot;comments&quot;: 5,</div><div class="line">  &quot;add_time&quot;: &quot;2017-4-15&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;elasticsearch打造搜索引擎&quot;,</div><div class="line">  &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">  &quot;desc&quot;: &quot;熟悉数据结构算法，熟悉python的基本开发&quot;,</div><div class="line">  &quot;comments&quot;: 15,</div><div class="line">  &quot;add_time&quot;: &quot;2017-6-20&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;python打造推荐引擎系统&quot;,</div><div class="line">  &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">  &quot;desc&quot;: &quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,</div><div class="line">  &quot;comments&quot;: 60,</div><div class="line">  &quot;add_time&quot;: &quot;2017-10-20&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"># POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;AV0RoWS6nOriGeBA_nYq&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;AV0RoWUJnOriGeBA_nYr&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST lagou/job</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">  &quot;_type&quot;: &quot;job&quot;,</div><div class="line">  &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">  &quot;_version&quot;: 1,</div><div class="line">  &quot;result&quot;: &quot;created&quot;,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;successful&quot;: 1,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;created&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就可以测试查询操作了。</p>
<ol>
<li><code>match</code>查询，</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># match查询</div><div class="line">GET lagou/job/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match&quot;: &#123;</div><div class="line">      &quot;title&quot;: &quot;Python&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 200,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;max_score&quot;: 0.25811607,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">        &quot;_score&quot;: 0.25811607,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python打造推荐引擎系统&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,</div><div class="line">          &quot;comments&quot;: 60,</div><div class="line">          &quot;add_time&quot;: &quot;2017-10-20&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">        &quot;_score&quot;: 0.19944568,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python django 开发工程师&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;美团科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对django的概念熟悉，熟悉python基础知识&quot;,</div><div class="line">          &quot;comments&quot;: 20,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-1&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWS6nOriGeBA_nYq&quot;,</div><div class="line">        &quot;_score&quot;: 0.1383129,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python scrapy redis分布式爬虫基本&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;百度科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对scrapy的概念熟悉，熟悉redis的基本操作&quot;,</div><div class="line">          &quot;comments&quot;: 5,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-15&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果把<code>&quot;title&quot;:&quot;python&quot;</code>改为<code>&quot;title&quot;:&quot;Python&quot;</code>，依然能得到和上面一样的搜索结果，因为ik的分词器为自动地进行大小写转换。</p>
<ol>
<li><code>term</code>查询：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># term查询</div><div class="line">GET lagou/job/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;term&quot;: &#123;</div><div class="line">      &quot;title&quot;: &quot;python&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现查询的结果和match查询是一样的，但两者是有区别的，match查询经过ik分词，而term查询是把整个词拿去匹配的，就好像type是keyword一样，不对查询词做任何处理。</p>
<ol>
<li><code>terms</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># terms查询</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;terms&quot;: &#123;</div><div class="line">      &quot;title&quot;: [&quot;工程师&quot;, &quot;django&quot;, &quot;系统&quot;]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 11,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;max_score&quot;: 1.5164987,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">        &quot;_score&quot;: 1.5164987,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python django 开发工程师&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;美团科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对django的概念熟悉，熟悉python基础知识&quot;,</div><div class="line">          &quot;comments&quot;: 20,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-1&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">        &quot;_score&quot;: 0.25811607,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python打造推荐引擎系统&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,</div><div class="line">          &quot;comments&quot;: 60,</div><div class="line">          &quot;add_time&quot;: &quot;2017-10-20&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>terms查询的特点是可以在查询时传入一个列表。</p>
<ol>
<li>控制查询的返回数量</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 控制查询的返回数量</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match&quot;: &#123;</div><div class="line">      &quot;title&quot;: &quot;python&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;from&quot;: 1,</div><div class="line">  &quot;size&quot;: 2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过from和size来控制结果的返回数量。</p>
<ol>
<li><code>match_all</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># match_all查询</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match_all&quot;: &#123;&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>match_all查询会返回所有结果。</p>
<ol>
<li><code>match_phrase</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># match_phrase短语查询</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match_phrase&quot;: &#123;</div><div class="line">      &quot;title&quot;: &#123;</div><div class="line">        &quot;query&quot;: &quot;python系统&quot;,</div><div class="line">        &quot;slop&quot;: 6</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 82,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 1,</div><div class="line">    &quot;max_score&quot;: 0.1133824,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">        &quot;_score&quot;: 0.1133824,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python打造推荐引擎系统&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,</div><div class="line">          &quot;comments&quot;: 60,</div><div class="line">          &quot;add_time&quot;: &quot;2017-10-20&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>slop</code>值表示两个词之间的最小距离。</p>
<ol>
<li><code>multi_match</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># multi_match查询</div><div class="line"># 比如可以指定多个字段</div><div class="line"># 比如查询title和desc这两个字段里面包含python的关键词文档</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;multi_match&quot;: &#123;</div><div class="line">      &quot;query&quot;: &quot;python&quot;,</div><div class="line">      &quot;fields&quot;: [&quot;title^3&quot;,&quot;desc&quot;]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>&quot;title^3&quot;</code>的意思是为title设置较高的权重，对最后结果的排序有影响。</p>
<ol>
<li>指定返回字段</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;stored_fields&quot;: [&quot;title&quot;,&quot;company_name&quot;],</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match&quot;: &#123;</div><div class="line">      &quot;title&quot;: &quot;python&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 13,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 3,</div><div class="line">    &quot;max_score&quot;: 0.25811607,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">        &quot;_score&quot;: 0.25811607,</div><div class="line">        &quot;fields&quot;: &#123;</div><div class="line">          &quot;title&quot;: [</div><div class="line">            &quot;python打造推荐引擎系统&quot;</div><div class="line">          ],</div><div class="line">          &quot;company_name&quot;: [</div><div class="line">            &quot;阿里巴巴科技有限公司&quot;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">        &quot;_score&quot;: 0.19944568,</div><div class="line">        &quot;fields&quot;: &#123;</div><div class="line">          &quot;title&quot;: [</div><div class="line">            &quot;python django 开发工程师&quot;</div><div class="line">          ],</div><div class="line">          &quot;company_name&quot;: [</div><div class="line">            &quot;美团科技有限公司&quot;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWS6nOriGeBA_nYq&quot;,</div><div class="line">        &quot;_score&quot;: 0.1383129,</div><div class="line">        &quot;fields&quot;: &#123;</div><div class="line">          &quot;title&quot;: [</div><div class="line">            &quot;python scrapy redis分布式爬虫基本&quot;</div><div class="line">          ],</div><div class="line">          &quot;company_name&quot;: [</div><div class="line">            &quot;百度科技有限公司&quot;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>通过sort把结果排序</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 通过sort把结果排序</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match_all&quot;: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;sort&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;comments&quot;: &#123;</div><div class="line">        &quot;order&quot;: &quot;desc&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 21,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 4,</div><div class="line">    &quot;max_score&quot;: null,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWVXnOriGeBA_nYs&quot;,</div><div class="line">        &quot;_score&quot;: null,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python打造推荐引擎系统&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉推荐引擎的原理以及算法，掌握C语言&quot;,</div><div class="line">          &quot;comments&quot;: 60,</div><div class="line">          &quot;add_time&quot;: &quot;2017-10-20&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;sort&quot;: [</div><div class="line">          60</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">        &quot;_score&quot;: null,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python django 开发工程师&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;美团科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对django的概念熟悉，熟悉python基础知识&quot;,</div><div class="line">          &quot;comments&quot;: 20,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-1&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;sort&quot;: [</div><div class="line">          20</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWUJnOriGeBA_nYr&quot;,</div><div class="line">        &quot;_score&quot;: null,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;elasticsearch打造搜索引擎&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉数据结构算法，熟悉python的基本开发&quot;,</div><div class="line">          &quot;comments&quot;: 15,</div><div class="line">          &quot;add_time&quot;: &quot;2017-6-20&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;sort&quot;: [</div><div class="line">          15</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWS6nOriGeBA_nYq&quot;,</div><div class="line">        &quot;_score&quot;: null,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python scrapy redis分布式爬虫基本&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;百度科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对scrapy的概念熟悉，熟悉redis的基本操作&quot;,</div><div class="line">          &quot;comments&quot;: 5,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-15&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;sort&quot;: [</div><div class="line">          5</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>range</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 查询范围</div><div class="line"># range查询</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;range&quot;: &#123;</div><div class="line">      &quot;comments&quot;: &#123;</div><div class="line">        &quot;gte&quot;: 10,</div><div class="line">        &quot;lte&quot;: 20,</div><div class="line">        &quot;boost&quot;: 2.0</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查询10&lt;=comments&lt;=20的结果。</p>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 37,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;max_score&quot;: 2,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWQ-nOriGeBA_nYp&quot;,</div><div class="line">        &quot;_score&quot;: 2,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;python django 开发工程师&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;美团科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;对django的概念熟悉，熟悉python基础知识&quot;,</div><div class="line">          &quot;comments&quot;: 20,</div><div class="line">          &quot;add_time&quot;: &quot;2017-4-1&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;job&quot;,</div><div class="line">        &quot;_id&quot;: &quot;AV0RoWUJnOriGeBA_nYr&quot;,</div><div class="line">        &quot;_score&quot;: 2,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;elasticsearch打造搜索引擎&quot;,</div><div class="line">          &quot;company_name&quot;: &quot;阿里巴巴科技有限公司&quot;,</div><div class="line">          &quot;desc&quot;: &quot;熟悉数据结构算法，熟悉python的基本开发&quot;,</div><div class="line">          &quot;comments&quot;: 15,</div><div class="line">          &quot;add_time&quot;: &quot;2017-6-20&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以对时间进行range查询：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;range&quot;: &#123;</div><div class="line">      &quot;add_time&quot;: &#123;</div><div class="line">        &quot;gte&quot;: &quot;2017-04-01&quot;,</div><div class="line">        &quot;lte&quot;: &quot;now&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>wildcard</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># wildcard查询</div><div class="line">GET lagou/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;wildcard&quot;: &#123;</div><div class="line">      &quot;title&quot;: &#123;</div><div class="line">        &quot;value&quot;: &quot;pyth*n&quot;,</div><div class="line">        &quot;boost&quot;: 2.0</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>wildcard查询支持通配符。</p>
<h2 id="Elasticsearch的bool组合查询"><a href="#Elasticsearch的bool组合查询" class="headerlink" title="Elasticsearch的bool组合查询"></a><strong>Elasticsearch的bool组合查询</strong></h2><p>首先使用bulk操作建立测试数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># bool查询</div><div class="line"># 老版本的filtered已经被bool替换</div><div class="line"># 用bool包括must should must_not filter来完成，格式如下：</div><div class="line"># bool:&#123;</div><div class="line">#	&quot;filter&quot;:[],</div><div class="line">#	&quot;must&quot;:[],</div><div class="line">#	&quot;should&quot;:[],</div><div class="line">#	&quot;must_not&quot;:&#123;&#125;,</div><div class="line"># &#125;</div><div class="line"></div><div class="line"># 建立测试数据</div><div class="line">POST lagou/testjob/_bulk</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:1&#125;&#125;</div><div class="line">&#123;&quot;salary&quot;:10, &quot;title&quot;:&quot;Python&quot;&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:2&#125;&#125;</div><div class="line">&#123;&quot;salary&quot;:20, &quot;title&quot;:&quot;Scrapy&quot;&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:3&#125;&#125;</div><div class="line">&#123;&quot;salary&quot;:30, &quot;title&quot;:&quot;Django&quot;&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:4&#125;&#125;</div><div class="line">&#123;&quot;salary&quot;:30, &quot;title&quot;:&quot;Elasticsearch&quot;&#125;</div></pre></td></tr></table></figure>
<p>接下来介绍简单的过滤查询：</p>
<ol>
<li>最简单的<code>filter</code>查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 薪资为20k的工作</div><div class="line"># select * from testjob where salary=20</div><div class="line">GET lagou/testjob/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;must&quot;:&#123;</div><div class="line">        &quot;match_all&quot;:&#123;&#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;filter&quot;: &#123;</div><div class="line">        &quot;term&quot;: &#123;</div><div class="line">          &quot;salary&quot;: &quot;20&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 43,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 1,</div><div class="line">    &quot;max_score&quot;: 1,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;2&quot;,</div><div class="line">        &quot;_score&quot;: 1,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 20,</div><div class="line">          &quot;title&quot;: &quot;Scrapy&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>也可以指定多个值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 也可以指定多个值</div><div class="line">GET lagou/testjob/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;must&quot;:&#123;</div><div class="line">        &quot;match_all&quot;:&#123;&#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;filter&quot;: &#123;</div><div class="line">        &quot;terms&quot;: &#123;</div><div class="line">          &quot;salary&quot;:[10,20]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 39,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;max_score&quot;: 1,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;2&quot;,</div><div class="line">        &quot;_score&quot;: 1,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 20,</div><div class="line">          &quot;title&quot;: &quot;Scrapy&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;1&quot;,</div><div class="line">        &quot;_score&quot;: 1,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 10,</div><div class="line">          &quot;title&quot;: &quot;Python&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>职位查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># select * from testjob where title=&quot;Python&quot;</div><div class="line">GET lagou/testjob/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;must&quot;:&#123;</div><div class="line">        &quot;match_all&quot;:&#123;&#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;filter&quot;: &#123;</div><div class="line">        &quot;match&quot;: &#123;</div><div class="line">          &quot;title&quot;: &quot;Python&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者把<code>&quot;Python&quot;</code>变为小写<code>&quot;python&quot;</code>那么也可以用<code>term</code>。</p>
<ol>
<li>查看分析器解析的结果</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET _analyze</div><div class="line">&#123;</div><div class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,</div><div class="line">  &quot;text&quot;: &quot;Python网络开发工程师&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;python&quot;,</div><div class="line">      &quot;start_offset&quot;: 0,</div><div class="line">      &quot;end_offset&quot;: 6,</div><div class="line">      &quot;type&quot;: &quot;ENGLISH&quot;,</div><div class="line">      &quot;position&quot;: 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;网络&quot;,</div><div class="line">      &quot;start_offset&quot;: 6,</div><div class="line">      &quot;end_offset&quot;: 8,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;络&quot;,</div><div class="line">      &quot;start_offset&quot;: 7,</div><div class="line">      &quot;end_offset&quot;: 8,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;开发&quot;,</div><div class="line">      &quot;start_offset&quot;: 8,</div><div class="line">      &quot;end_offset&quot;: 10,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;发&quot;,</div><div class="line">      &quot;start_offset&quot;: 9,</div><div class="line">      &quot;end_offset&quot;: 10,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;工程师&quot;,</div><div class="line">      &quot;start_offset&quot;: 10,</div><div class="line">      &quot;end_offset&quot;: 13,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;工程&quot;,</div><div class="line">      &quot;start_offset&quot;: 10,</div><div class="line">      &quot;end_offset&quot;: 12,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 6</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;师&quot;,</div><div class="line">      &quot;start_offset&quot;: 12,</div><div class="line">      &quot;end_offset&quot;: 13,</div><div class="line">      &quot;type&quot;: &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot;: 7</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果用<code>ik_smart</code>会怎样呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;python&quot;,</div><div class="line">      &quot;start_offset&quot;: 0,</div><div class="line">      &quot;end_offset&quot;: 6,</div><div class="line">      &quot;type&quot;: &quot;ENGLISH&quot;,</div><div class="line">      &quot;position&quot;: 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;网络&quot;,</div><div class="line">      &quot;start_offset&quot;: 6,</div><div class="line">      &quot;end_offset&quot;: 8,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;开发&quot;,</div><div class="line">      &quot;start_offset&quot;: 8,</div><div class="line">      &quot;end_offset&quot;: 10,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot;: &quot;工程师&quot;,</div><div class="line">      &quot;start_offset&quot;: 10,</div><div class="line">      &quot;end_offset&quot;: 13,</div><div class="line">      &quot;type&quot;: &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot;: 3</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>bool过滤查询，可以做组合过滤查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># select * from testjob where (salary=20 or title=Python) AND (salary != 30)</div><div class="line"># 查询薪资等于20k或者工作为python的工作，排除价格为30k的</div><div class="line">GET lagou/testjob/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;should&quot;: [</div><div class="line">        &#123;&quot;term&quot;:&#123;&quot;salary&quot;:20&#125;&#125;,</div><div class="line">        &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;python&quot;&#125;&#125;</div><div class="line">      ],</div><div class="line">      &quot;must_not&quot;: &#123;</div><div class="line">        &quot;term&quot;:&#123;&quot;price&quot;:30&#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 5,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;max_score&quot;: 1,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;2&quot;,</div><div class="line">        &quot;_score&quot;: 1,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 20,</div><div class="line">          &quot;title&quot;: &quot;Scrapy&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;1&quot;,</div><div class="line">        &quot;_score&quot;: 0.2876821,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 10,</div><div class="line">          &quot;title&quot;: &quot;Python&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>嵌套查询</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># select * from testjob where title=&quot;python&quot; or (title=&quot;elasticsearch&quot; AND salary=30)</div><div class="line">GET lagou/testjob/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;should&quot;: [</div><div class="line">        &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;python&quot;&#125;&#125;,</div><div class="line">        &#123;&quot;bool&quot;:&#123;</div><div class="line">          &quot;must&quot;: [</div><div class="line">            &#123;&quot;term&quot;:&#123;&quot;title&quot;:&quot;elasticsearch&quot;&#125;&#125;,</div><div class="line">            &#123;&quot;term&quot;:&#123;&quot;salary&quot;:30&#125;&#125;</div><div class="line">          ]</div><div class="line">        &#125;&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot;: 16,</div><div class="line">  &quot;timed_out&quot;: false,</div><div class="line">  &quot;_shards&quot;: &#123;</div><div class="line">    &quot;total&quot;: 5,</div><div class="line">    &quot;successful&quot;: 5,</div><div class="line">    &quot;failed&quot;: 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot;: &#123;</div><div class="line">    &quot;total&quot;: 2,</div><div class="line">    &quot;max_score&quot;: 1.6931472,</div><div class="line">    &quot;hits&quot;: [</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;4&quot;,</div><div class="line">        &quot;_score&quot;: 1.6931472,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 30,</div><div class="line">          &quot;title&quot;: &quot;Elasticsearch&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        &quot;_index&quot;: &quot;lagou&quot;,</div><div class="line">        &quot;_type&quot;: &quot;testjob&quot;,</div><div class="line">        &quot;_id&quot;: &quot;1&quot;,</div><div class="line">        &quot;_score&quot;: 0.2876821,</div><div class="line">        &quot;_source&quot;: &#123;</div><div class="line">          &quot;salary&quot;: 10,</div><div class="line">          &quot;title&quot;: &quot;Python&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面需要介绍过滤空和非空的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># 过滤空和非空</div><div class="line"># 建立测试数据</div><div class="line">POST lagou/testjob2/_bulk</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</div><div class="line">&#123;&quot;tags&quot;:[&quot;search&quot;]&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</div><div class="line">&#123;&quot;tags&quot;:[&quot;search&quot;,&quot;python&quot;]&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;3&quot;&#125;&#125;</div><div class="line">&#123;&quot;other_field&quot;:[&quot;some data&quot;]&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;4&quot;&#125;&#125;</div><div class="line">&#123;&quot;tags&quot;:null&#125;</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;5&quot;&#125;&#125;</div><div class="line">&#123;&quot;tags&quot;:[&quot;search&quot;, null]&#125;</div><div class="line"></div><div class="line"># 处理null空值的方法</div><div class="line"># select tags from testjob2 where tags is not NULL</div><div class="line">GET lagou/testjob2/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;filter&quot;: &#123;</div><div class="line">        &quot;exists&quot;: &#123;</div><div class="line">          &quot;field&quot;: &quot;tags&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 过滤非空值</div><div class="line">GET lagou/testjob2/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;bool&quot;: &#123;</div><div class="line">      &quot;must_not&quot;: &#123;</div><div class="line">        &quot;exists&quot;: &#123;</div><div class="line">          &quot;field&quot;: &quot;tags&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="scrapy写入数据到Elasticsearch中"><a href="#scrapy写入数据到Elasticsearch中" class="headerlink" title="scrapy写入数据到Elasticsearch中"></a>scrapy写入数据到Elasticsearch中</h2><p>我们在scrapy中依靠pipeline来将数据写入到Elasticsearch中，这里需要介绍一个es的python接口<strong>elasticsearch-dsl-py</strong>。</p>
<p>传送门：<a href="https://github.com/elastic/elasticsearch-dsl-py" target="_blank" rel="external"><strong>elasticsearch-dsl-py</strong></a></p>
<p>安装：<code>pip install elasticsearch-dsl</code></p>
<p>在根目录下新建一个models包，在包内建立<code>es_types.py</code>文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> elasticsearch_dsl <span class="keyword">import</span> DocType, Date, Nested, Boolean, \</div><div class="line">    analyzer, InnerObjectWrapper, Completion, Keyword, Text, Integer</div><div class="line"><span class="keyword">from</span> elasticsearch_dsl.connections <span class="keyword">import</span> connections</div><div class="line"></div><div class="line"><span class="comment"># 连接本机es</span></div><div class="line">connections.create_connection(hosts=[<span class="string">"localhost"</span>])</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleType</span><span class="params">(DocType)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    伯乐在线文章类型</div><div class="line">    """</div><div class="line">    title = Text(analyzer=<span class="string">"ik_max_word"</span>)</div><div class="line">    create_date = Date()</div><div class="line">    url = Keyword()</div><div class="line">    url_object_id = Keyword()</div><div class="line">    front_image_url = Keyword()</div><div class="line">    front_image_path = Keyword()</div><div class="line">    praise_nums = Integer()</div><div class="line">    comment_nums = Integer()</div><div class="line">    fav_nums = Integer()</div><div class="line">    tags = Text(analyzer=<span class="string">"ik_max_word"</span>)</div><div class="line">    content = Text(analyzer=<span class="string">"ik_max_word"</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        index = <span class="string">"jobbole"</span></div><div class="line">        doc_type = <span class="string">"article"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    ArticleType.init()</div></pre></td></tr></table></figure>
<p>这样就可以很方便地在es中建立我们所需要的mappings，和Django中的models十分相似。</p>
<p>运行后我们可以再es-head中查看：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fhe1yg1rqrj30x60v4dk5.jpg" alt=""></p>
<p><code>pipelines.py</code>中代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> models.es_types <span class="keyword">import</span> ArticleType</div><div class="line"><span class="keyword">from</span> w3lib.html <span class="keyword">import</span> remove_tags</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    将数据写入es中</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="comment"># 将item转换为es的数据</span></div><div class="line">        article = ArticleType()</div><div class="line">        article.title = item[<span class="string">"title"</span>]</div><div class="line">        article.create_date = item[<span class="string">"create_date"</span>]</div><div class="line">        article.content = remove_tags(item[<span class="string">"content"</span>])</div><div class="line">        article.front_image_url = item[<span class="string">"front_image_url"</span>]</div><div class="line">        <span class="keyword">if</span> <span class="string">"front_image_path"</span> <span class="keyword">in</span> item:</div><div class="line">            article.front_image_path = item[<span class="string">"front_image_path"</span>]</div><div class="line">        article.praise_nums = item[<span class="string">"praise_nums"</span>]</div><div class="line">        article.fav_nums = item[<span class="string">"fav_nums"</span>]</div><div class="line">        article.comment_nums = item[<span class="string">"comment_nums"</span>]</div><div class="line">        article.url = item[<span class="string">"url"</span>]</div><div class="line">        article.tags = item[<span class="string">"tags"</span>]</div><div class="line">        article.meta.id = item[<span class="string">"url_object_id"</span>]</div><div class="line"></div><div class="line">        article.save()</div><div class="line"></div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p>调试之后发现数据顺利地进入到了es中：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhe2aueglhj30xg0v8dtn.jpg" alt=""></p>
<p>为了进行对所有数据进行统一处理，我们可以把数据转换的逻辑拿到<code>items.py</code>中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_es</span><span class="params">(self)</span>:</span></div><div class="line">    article = ArticleType()</div><div class="line">    article.title = self[<span class="string">"title"</span>]</div><div class="line">    article.create_date = self[<span class="string">"create_date"</span>]</div><div class="line">    article.content = remove_tags(self[<span class="string">"content"</span>])</div><div class="line">    article.front_image_url = self[<span class="string">"front_image_url"</span>]</div><div class="line">    <span class="keyword">if</span> <span class="string">"front_image_path"</span> <span class="keyword">in</span> self:</div><div class="line">        article.front_image_path = self[<span class="string">"front_image_path"</span>]</div><div class="line">    article.praise_nums = self[<span class="string">"praise_nums"</span>]</div><div class="line">    article.fav_nums = self[<span class="string">"fav_nums"</span>]</div><div class="line">    article.comment_nums = self[<span class="string">"comment_nums"</span>]</div><div class="line">    article.url = self[<span class="string">"url"</span>]</div><div class="line">    article.tags = self[<span class="string">"tags"</span>]</div><div class="line">    article.meta.id = self[<span class="string">"url_object_id"</span>]</div><div class="line"></div><div class="line">    article.save()</div><div class="line">    <span class="keyword">return</span></div></pre></td></tr></table></figure>
<p><code>pipelines.py</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    将数据写入es中</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="comment"># 将item转换为es的数据</span></div><div class="line">        item.save_to_es()</div><div class="line"></div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p>其他的知乎拉勾的爬虫数据转换也基本类似。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Elasticsearch介绍&quot;&gt;&lt;a href=&quot;#Elasticsearch介绍&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;Elasticsearch介绍&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&lt;/p&gt;
&lt;p&gt;我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望我们的搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题以及可能出现的更多其它问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python, Elasticsearch" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython-Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——scrapy-redis分布式爬虫</title>
    <link href="http://yoursite.com/2017/07/01/scrapy-redis/"/>
    <id>http://yoursite.com/2017/07/01/scrapy-redis/</id>
    <published>2017-07-01T12:18:54.000Z</published>
    <updated>2017-07-03T07:07:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式爬虫要点"><a href="#分布式爬虫要点" class="headerlink" title="分布式爬虫要点"></a><strong>分布式爬虫要点</strong></h2><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fh4hbyf2moj30h50byq4t.jpg" alt=""></p>
<h3 id="分布式爬虫的优点"><a href="#分布式爬虫的优点" class="headerlink" title="分布式爬虫的优点"></a><strong>分布式爬虫的优点</strong></h3><ul>
<li>充分利用多机器的宽带加速爬取</li>
<li>充分利用多机的IP加速爬取速度</li>
</ul>
<p>问题：<strong>为什么scrapy不支持分布式？</strong></p>
<p>答：在scrapy中scheduler是运行在队列中的，而队列是在单机内存中的，服务器上爬虫是无法利用内存的队列做任何处理，所以scrapy不支持分布式。</p>
<h3 id="分布式爬虫需要解决的问题"><a href="#分布式爬虫需要解决的问题" class="headerlink" title="分布式爬虫需要解决的问题"></a><strong>分布式爬虫需要解决的问题</strong></h3><ul>
<li>requests队列集中管理</li>
<li>去重集中管理</li>
</ul>
<p>综上，我们需要使用Redis来解决这些问题。</p>
<a id="more"></a>
<h2 id="Redis基础知识"><a href="#Redis基础知识" class="headerlink" title="Redis基础知识"></a><strong>Redis基础知识</strong></h2><p>Redis的基础知识在我早前的文章中已经学习过了，在这里就不介绍了，直接看之前的文章就行。</p>
<p>传送门：<a href="http://lawtech0902.com/categories/Redis/" target="_blank" rel="external">Redis学习笔记</a></p>
<h2 id="scrapy-redis编写分布式爬虫代码"><a href="#scrapy-redis编写分布式爬虫代码" class="headerlink" title="scrapy-redis编写分布式爬虫代码"></a><strong>scrapy-redis编写分布式爬虫代码</strong></h2><p>传送门：1.<a href="https://github.com/rmax/scrapy-redis" target="_blank" rel="external">scapy-redis Github</a>  2.<a href="http://scrapy-redis.readthedocs.io/en/stable/" target="_blank" rel="external">scrapy-redis 文档</a></p>
<p>其实大部分的逻辑是一样的，只需要在spider中加入<code>redis_key = &#39;spidername:start_urls&#39;</code>，以及修改一些settings.py中配置即可。</p>
<h2 id="scrapy-redis源码解析"><a href="#scrapy-redis源码解析" class="headerlink" title="scrapy-redis源码解析"></a><strong>scrapy-redis源码解析</strong></h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fh5szm7gkpj30920bo0tq.jpg" alt=""></p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a><strong>项目结构</strong></h3><p><strong>connection.py</strong></p>
<p>负责根据setting中配置实例化redis连接。被dupefilter和scheduler调用，总之涉及到redis存取的都要使用到这个模块。</p>
<p><strong>dupefilter.py</strong></p>
<p>负责执行requst的去重，实现的很有技巧性，使用redis的set数据结构。但是注意scheduler并不使用其中用于在这个模块中实现的dupefilter键做request的调度，而是使用queue.py模块中实现的queue。</p>
<p>当request不重复时，将其存入到queue中，调度时将其弹出。</p>
<p><strong>queue.py</strong></p>
<p>其作用如II所述，但是这里实现了三种方式的queue：</p>
<p>FIFO的SpiderQueue，SpiderPriorityQueue，以及LIFI的SpiderStack。默认使用的是第二中，这也就是出现之前文章中所分析情况的原因（链接：）。</p>
<p><strong>pipelines.py</strong></p>
<p>这是是用来实现分布式处理的作用。它将Item存储在redis中以实现分布式处理。</p>
<p>另外可以发现，同样是编写pipelines，在这里的编码实现不同于文章（链接：）中所分析的情况，由于在这里需要读取配置，所以就用到了from_crawler()函数。</p>
<p><strong>scheduler.py</strong></p>
<p>此扩展是对scrapy中自带的scheduler的替代（在settings的SCHEDULER变量中指出），正是利用此扩展实现crawler的分布式调度。其利用的数据结构来自于queue中实现的数据结构。</p>
<p>scrapy-redis所实现的两种分布式：爬虫分布式以及item处理分布式就是由模块scheduler和模块pipelines实现。上述其它模块作为为二者辅助的功能模块。</p>
<p><strong>spider.py</strong></p>
<p>设计的这个spider从redis中读取要爬的url,然后执行爬取，若爬取过程中返回更多的url，那么继续进行直至所有的request完成。之后继续从redis中读取url，循环这个过程。</p>
<p>分析：在这个spider中通过connect signals.spider_idle信号实现对crawler状态的监视。当idle时，返回新的make_requests_from_url(url)给引擎，进而交给调度器调度。</p>
<h3 id="架构解析"><a href="#架构解析" class="headerlink" title="架构解析"></a><strong>架构解析</strong></h3><p>Scrapy架构：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fh5vaf92i0j30jk0ba0un.jpg" alt=""></p>
<p>scrapy-redis架构：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fh5v9jlr53j30j50b240g.jpg" alt=""></p>
<p>如上图所示，scrapy-redis在scrapy的架构上增加了redis，基于redis的特性拓展了如下组件：</p>
<ul>
<li>调度器（Scheduler）：scrapy-redis调度器通过redis的set不重复的特性，巧妙的实现了Duplication Filter去重（DupeFilter set存放爬取过的request）。Spider新生成的request，将request的指纹到redis的DupeFilter set检查是否重复，并将不重复的request push写入redis的request队列。调度器每次从redis的request队列里根据优先级pop出一个request, 将此request发给spider处理。</li>
<li>Item Pipeline：将Spider爬取到的Item给scrapy-redis的Item Pipeline，将爬取到的Item存入redis的items队列。可以很方便的从items队列中提取item，从而实现items processes 集群</li>
</ul>
<h2 id="集成bloomfilter到scrapy-redis中"><a href="#集成bloomfilter到scrapy-redis中" class="headerlink" title="集成bloomfilter到scrapy-redis中"></a><strong>集成bloomfilter到scrapy-redis中</strong></h2><p>传送门：<a href="http://www.it610.com/article/4376832.htm" target="_blank" rel="external">bloomfilter算法详解及实例</a></p>
<p>算法实现：<a href="https://github.com/liyaopinner/BloomFilter_imooc" target="_blank" rel="external">bloomfilter_imooc</a></p>
<p><code>dupefilter.py</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy.dupefilters <span class="keyword">import</span> BaseDupeFilter</div><div class="line"><span class="keyword">from</span> scrapy.utils.request <span class="keyword">import</span> request_fingerprint</div><div class="line"></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> defaults</div><div class="line"><span class="keyword">from</span> .connection <span class="keyword">import</span> get_redis_from_settings</div><div class="line"><span class="keyword">from</span> ScrapyRedisTest.utils.bloomfilter <span class="keyword">import</span> PyBloomFilter, conn</div><div class="line"></div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># <span class="doctag">TODO:</span> Rename class to RedisDupeFilter.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RFPDupeFilter</span><span class="params">(BaseDupeFilter)</span>:</span></div><div class="line">    <span class="string">"""Redis-based request duplicates filter.</span></div><div class="line"></div><div class="line">    This class can also be used with default Scrapy's scheduler.</div><div class="line"></div><div class="line">    """</div><div class="line"></div><div class="line">    logger = logger</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server, key, debug=False)</span>:</span></div><div class="line">        <span class="string">"""Initialize the duplicates filter.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        server : redis.StrictRedis</div><div class="line">            The redis server instance.</div><div class="line">        key : str</div><div class="line">            Redis key Where to store fingerprints.</div><div class="line">        debug : bool, optional</div><div class="line">            Whether to log filtered requests.</div><div class="line"></div><div class="line">        """</div><div class="line">        self.server = server</div><div class="line">        self.key = key</div><div class="line">        self.debug = debug</div><div class="line">        self.logdupes = <span class="keyword">True</span></div><div class="line"></div><div class="line">        self.bf = PyBloomFilter(conn=conn, key=key)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_settings</span><span class="params">(cls, settings)</span>:</span></div><div class="line">        <span class="string">"""Returns an instance from given settings.</span></div><div class="line"></div><div class="line">        This uses by default the key ``dupefilter:&lt;timestamp&gt;``. When using the</div><div class="line">        ``scrapy_redis.scheduler.Scheduler`` class, this method is not used as</div><div class="line">        it needs to pass the spider name in the key.</div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        settings : scrapy.settings.Settings</div><div class="line"></div><div class="line">        Returns</div><div class="line">        -------</div><div class="line">        RFPDupeFilter</div><div class="line">            A RFPDupeFilter instance.</div><div class="line"></div><div class="line"></div><div class="line">        """</div><div class="line">        server = get_redis_from_settings(settings)</div><div class="line">        <span class="comment"># <span class="doctag">XXX:</span> This creates one-time key. needed to support to use this</span></div><div class="line">        <span class="comment"># class as standalone dupefilter with scrapy's default scheduler</span></div><div class="line">        <span class="comment"># if scrapy passes spider on open() method this wouldn't be needed</span></div><div class="line">        <span class="comment"># <span class="doctag">TODO:</span> Use SCRAPY_JOB env as default and fallback to timestamp.</span></div><div class="line">        key = defaults.DUPEFILTER_KEY % &#123;<span class="string">'timestamp'</span>: int(time.time())&#125;</div><div class="line">        debug = settings.getbool(<span class="string">'DUPEFILTER_DEBUG'</span>)</div><div class="line">        <span class="keyword">return</span> cls(server, key=key, debug=debug)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        <span class="string">"""Returns instance from crawler.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        crawler : scrapy.crawler.Crawler</div><div class="line"></div><div class="line">        Returns</div><div class="line">        -------</div><div class="line">        RFPDupeFilter</div><div class="line">            Instance of RFPDupeFilter.</div><div class="line"></div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> cls.from_settings(crawler.settings)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_seen</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="string">"""Returns True if request was already seen.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        request : scrapy.http.Request</div><div class="line"></div><div class="line">        Returns</div><div class="line">        -------</div><div class="line">        bool</div><div class="line"></div><div class="line">        """</div><div class="line">        fp = self.request_fingerprint(request)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.bf.is_exist(fp):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.bf.add(fp)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="comment"># This returns the number of values added, zero if already exists.</span></div><div class="line">        <span class="comment"># added = self.server.sadd(self.key, fp)</span></div><div class="line">        <span class="comment"># return added == 0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_fingerprint</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="string">"""Returns a fingerprint for a given request.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        request : scrapy.http.Request</div><div class="line"></div><div class="line">        Returns</div><div class="line">        -------</div><div class="line">        str</div><div class="line"></div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> request_fingerprint(request)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self, reason=<span class="string">''</span>)</span>:</span></div><div class="line">        <span class="string">"""Delete data on close. Called by Scrapy's scheduler.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        reason : str, optional</div><div class="line"></div><div class="line">        """</div><div class="line">        self.clear()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Clears fingerprints data."""</span></div><div class="line">        self.server.delete(self.key)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        <span class="string">"""Logs given request.</span></div><div class="line"></div><div class="line">        Parameters</div><div class="line">        ----------</div><div class="line">        request : scrapy.http.Request</div><div class="line">        spider : scrapy.spiders.Spider</div><div class="line"></div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> self.debug:</div><div class="line">            msg = <span class="string">"Filtered duplicate request: %(request)s"</span></div><div class="line">            self.logger.debug(msg, &#123;<span class="string">'request'</span>: request&#125;, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</div><div class="line">        <span class="keyword">elif</span> self.logdupes:</div><div class="line">            msg = (<span class="string">"Filtered duplicate request %(request)s"</span></div><div class="line">                   <span class="string">" - no more duplicates will be shown"</span></div><div class="line">                   <span class="string">" (see DUPEFILTER_DEBUG to show all duplicates)"</span>)</div><div class="line">            self.logger.debug(msg, &#123;<span class="string">'request'</span>: request&#125;, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</div><div class="line">            self.logdupes = <span class="keyword">False</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分布式爬虫要点&quot;&gt;&lt;a href=&quot;#分布式爬虫要点&quot; class=&quot;headerlink&quot; title=&quot;分布式爬虫要点&quot;&gt;&lt;/a&gt;&lt;strong&gt;分布式爬虫要点&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fh4hbyf2moj30h50byq4t.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;分布式爬虫的优点&quot;&gt;&lt;a href=&quot;#分布式爬虫的优点&quot; class=&quot;headerlink&quot; title=&quot;分布式爬虫的优点&quot;&gt;&lt;/a&gt;&lt;strong&gt;分布式爬虫的优点&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;充分利用多机器的宽带加速爬取&lt;/li&gt;
&lt;li&gt;充分利用多机的IP加速爬取速度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问题：&lt;strong&gt;为什么scrapy不支持分布式？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：在scrapy中scheduler是运行在队列中的，而队列是在单机内存中的，服务器上爬虫是无法利用内存的队列做任何处理，所以scrapy不支持分布式。&lt;/p&gt;
&lt;h3 id=&quot;分布式爬虫需要解决的问题&quot;&gt;&lt;a href=&quot;#分布式爬虫需要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;分布式爬虫需要解决的问题&quot;&gt;&lt;/a&gt;&lt;strong&gt;分布式爬虫需要解决的问题&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;requests队列集中管理&lt;/li&gt;
&lt;li&gt;去重集中管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，我们需要使用Redis来解决这些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python，Redis" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython%EF%BC%8CRedis/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Scrapy 进阶开发</title>
    <link href="http://yoursite.com/2017/06/29/scrapy-advanced-dev/"/>
    <id>http://yoursite.com/2017/06/29/scrapy-advanced-dev/</id>
    <published>2017-06-29T06:18:54.000Z</published>
    <updated>2017-07-04T06:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要介绍selenium的使用、其余的一些动态网页获取技术以及scrapy的一些进阶知识。</p>
<a id="more"></a>
<h2 id="Selenium的使用"><a href="#Selenium的使用" class="headerlink" title="Selenium的使用"></a><strong>Selenium的使用</strong></h2><h3 id="Selenium介绍"><a href="#Selenium介绍" class="headerlink" title="Selenium介绍"></a><strong>Selenium介绍</strong></h3><p><a href="http://selenium-python-zh.readthedocs.io/en/latest/index.html" target="_blank" rel="external">Selenium</a>是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。</p>
<h3 id="Selenium安装"><a href="#Selenium安装" class="headerlink" title="Selenium安装"></a><strong>Selenium安装</strong></h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fgu3vu4nj3j31kw054abx.jpg" alt=""></p>
<p>Selenium安装完成之后，还需要下载浏览器对应的webdriver才能开始使用，我们这里选择Chrome的<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">ChromeDriver</a>。</p>
<h3 id="Selenium动态网页请求"><a href="#Selenium动态网页请求" class="headerlink" title="Selenium动态网页请求"></a><strong>Selenium动态网页请求</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line"></div><div class="line">browser.get(<span class="string">"https://detail.tmall.com/item.htm?spm=a230r.1.14.13.bgHDMS&amp;id=539418030842&amp;cm_id=140105335569ed55e27b&amp;abbucket=5"</span>)</div><div class="line"></div><div class="line">t_selector = Selector(text=browser.page_source)</div><div class="line"></div><div class="line">print(t_selector.css(<span class="string">".tm-promo-price .tm-price::text"</span>).extract())</div><div class="line"></div><div class="line">browser.quit()</div></pre></td></tr></table></figure>
<p>我们用Selenium请求一个天猫商品的动态网页，并用Scrapy Selector来获取对应的商品价格信息。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fgu40xqud2j31d403et98.jpg" alt=""></p>
<h3 id="Selenium模拟登录知乎"><a href="#Selenium模拟登录知乎" class="headerlink" title="Selenium模拟登录知乎"></a><strong>Selenium模拟登录知乎</strong></h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fgu4vmkm5hj314o0dyn2r.jpg" alt=""></p>
<p>调试观察之后，采用Selenium自带的选择器方法来模拟输入账号密码并且点击登录。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">browser.get(<span class="string">"https://www.zhihu.com/#signin"</span>)</div><div class="line"></div><div class="line">browser.find_element_by_css_selector(<span class="string">".view-signin input[name='account']"</span>).send_keys(<span class="string">"your_username"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".view-signin input[name='password']"</span>).send_keys(<span class="string">"your_password"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".view_signin button.sign-button"</span>).click()</div></pre></td></tr></table></figure>
<h3 id="Selenium模拟登录微博"><a href="#Selenium模拟登录微博" class="headerlink" title="Selenium模拟登录微博"></a><strong>Selenium模拟登录微博</strong></h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fgu8zpu487j30xu05wjtd.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fgu8zttkrzj30xy060ac1.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fgu8zzmjavj30y405uq4o.jpg" alt=""></p>
<p>首先调试观察微博登录页面</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">browser.get(<span class="string">"https://www.weibo.com"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">"#loginname"</span>).send_keys(<span class="string">"your_username"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".info_list.password input[node-type='password']"</span>).send_keys(<span class="string">"your_password"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".info_list.login_btn a[node-type='submitBtn']"</span>).click()</div></pre></td></tr></table></figure>
<p>发现如下错误</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fgu91pgp2uj31kw0ezgrc.jpg" alt=""></p>
<p>原因：我们在页面还没有请求完成时就进行了下一步操作，导致元素获取不到。</p>
<p>在请求发出之后，休眠一段时间等待页面加载完成即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">browser.get(<span class="string">"https://www.weibo.com"</span>)</div><div class="line">time.sleep(<span class="number">15</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">"#loginname"</span>).send_keys(<span class="string">"584563542@qq.com"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".info_list.password input[node-type='password']"</span>).send_keys(<span class="string">"tracy584563542"</span>)</div><div class="line">browser.find_element_by_css_selector(<span class="string">".info_list.login_btn a[node-type='submitBtn']"</span>).click()</div></pre></td></tr></table></figure>
<h3 id="Selenium模拟鼠标下拉"><a href="#Selenium模拟鼠标下拉" class="headerlink" title="Selenium模拟鼠标下拉"></a><strong>Selenium模拟鼠标下拉</strong></h3><p>这样的操作是通过JS脚本来进行的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">browser.get(<span class="string">"https://www.oschina.net/blog"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    browser.execute_script(<span class="string">"window.scrollTo(0, document.body.scrollHeight); var lenOfPage=document.body.scrollHeight; return lenOfPage;"</span>)</div><div class="line">    time.sleep(<span class="number">3</span>)</div></pre></td></tr></table></figure>
<h3 id="设置ChromeDriver不加载图片"><a href="#设置ChromeDriver不加载图片" class="headerlink" title="设置ChromeDriver不加载图片"></a><strong>设置ChromeDriver不加载图片</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置ChromeDriver不加载图片</span></div><div class="line">chrome_opt = webdriver.ChromeOptions()</div><div class="line">prefs = &#123;<span class="string">"profile.managed_default_content_settings.images"</span>: <span class="number">2</span>&#125;</div><div class="line">chrome_opt.add_experimental_option(<span class="string">"prefs"</span>, prefs)</div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>, chrome_options=chrome_opt)</div><div class="line">browser.get(<span class="string">"https://www.taobao.com"</span>)</div></pre></td></tr></table></figure>
<h3 id="PhantomJS获取动态网页"><a href="#PhantomJS获取动态网页" class="headerlink" title="PhantomJS获取动态网页"></a><strong>PhantomJS获取动态网页</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># phantomjs, 无界面的浏览器， 多进程情况下phantomjs性能会下降很严重</span></div><div class="line">browser = webdriver.PhantomJS(executable_path=<span class="string">"/Users/lawtech/TempSpace/phantomjs-2.1.1-macosx/bin/phantomjs"</span>)</div><div class="line">browser.get(<span class="string">"https://detail.tmall.com/item.htm?spm=a230r.1.14.13.bgHDMS&amp;id=539418030842&amp;cm_id=140105335569ed55e27b&amp;abbucket=5"</span>)</div><div class="line">t_selector = Selector(text=browser.page_source)</div><div class="line">print(t_selector.css(<span class="string">".tm-promo-price .tm-price::text"</span>).extract())</div><div class="line">browser.quit()</div></pre></td></tr></table></figure>
<h3 id="Selenium集成到Scrapy中"><a href="#Selenium集成到Scrapy中" class="headerlink" title="Selenium集成到Scrapy中"></a><strong>Selenium集成到Scrapy中</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSPageMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    通过Chrome动态请求网页</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">        super(JSPageMiddleware, self).__init__()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> spider.name == <span class="string">"jobbole"</span>:</div><div class="line">            self.browser.get(request.url)</div><div class="line">            <span class="keyword">import</span> time</div><div class="line">            time.sleep(<span class="number">3</span>)</div><div class="line">            print(<span class="string">"访问&#123;0&#125;"</span>.format(request.url))</div><div class="line"></div><div class="line">            <span class="keyword">return</span> HtmlResponse(url=self.browser.current_url, body=self.browser.page_source, encoding=<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<p>在<code>middlewares.py</code>中添加如上代码之后，别忘了在<code>settings.py</code>中将其配置好：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">    <span class="string">'ArticleSpider.middlewares.RandomUserAgentMiddleware'</span>: <span class="number">543</span>,</div><div class="line">    <span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class="keyword">None</span>,</div><div class="line">    <span class="string">'ArticleSpider.middlewares.JSPageMiddleware'</span>: <span class="number">1</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实我们可以把Chrome放到Spider中，此时就引入了信号量的问题：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.xlib.pydispatch <span class="keyword">import</span> dispatcher</div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobboleSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"jobbole"</span></div><div class="line">    allowed_domains = [<span class="string">"blog.jobbole.com"</span>]</div><div class="line">    start_urls = [<span class="string">'http://blog.jobbole.com/all-posts/'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">        super(JobboleSpider, self).__init__()</div><div class="line">        dispatcher.connect(self.spider_closed, signals.spider_closed)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_closed</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        当爬虫退出的时候关闭Chrome</div><div class="line">        :param spider:</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        print(<span class="string">"spider closed"</span>)</div><div class="line">        self.browser.quit()</div></pre></td></tr></table></figure>
<h2 id="其余动态网页获取技术"><a href="#其余动态网页获取技术" class="headerlink" title="其余动态网页获取技术"></a><strong>其余动态网页获取技术</strong></h2><h3 id="Chrome无界面运行"><a href="#Chrome无界面运行" class="headerlink" title="Chrome无界面运行"></a><strong>Chrome无界面运行</strong></h3><p>首先安装<code>pyvirtualdisplay</code>：<code>pip install pyvirtualdisplay -i https://pypi.douban.com/simple/</code></p>
<p>主要代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyvirtualdisplay <span class="keyword">import</span> Display</div><div class="line">display = Display(visible=<span class="number">0</span>, size=(<span class="number">800</span>, <span class="number">600</span>))</div><div class="line">display.start()</div><div class="line"></div><div class="line">browser = webdriver.Chrome(executable_path=<span class="string">"/Users/lawtech/TempSpace/chromedriver"</span>)</div><div class="line">browser.get(<span class="string">"https://detail.tmall.com/item.htm?spm=a230r.1.14.13.bgHDMS&amp;id=539418030842&amp;cm_id=140105335569ed55e27b&amp;abbucket=5"</span>)</div><div class="line">browser.quit()</div></pre></td></tr></table></figure>
<h3 id="scrapy-splash"><a href="#scrapy-splash" class="headerlink" title="scrapy-splash"></a><strong>scrapy-splash</strong></h3><p><a href="https://github.com/scrapy-plugins/scrapy-splash" target="_blank" rel="external">https://github.com/scrapy-plugins/scrapy-splash</a></p>
<p>稳定性没有Chrome高</p>
<h3 id="selenium-grid"><a href="#selenium-grid" class="headerlink" title="selenium-grid"></a><strong>selenium-grid</strong></h3><p><a href="https://github.com/SeleniumHQ/selenium/wiki/Grid2" target="_blank" rel="external">https://github.com/SeleniumHQ/selenium/wiki/Grid2</a></p>
<h3 id="splinter"><a href="#splinter" class="headerlink" title="splinter"></a><strong>splinter</strong></h3><p><a href="https://github.com/cobrateam/splinter" target="_blank" rel="external">https://github.com/cobrateam/splinter</a></p>
<h2 id="Scrapy的暂停与重启"><a href="#Scrapy的暂停与重启" class="headerlink" title="Scrapy的暂停与重启"></a><strong>Scrapy的暂停与重启</strong></h2><p><code>scrapy crawl lagou -s JOBDIR=jobinfo/001</code></p>
<p>上面这条命令即可完成lagouspider的暂停与重启，中途可以你可以使用ctrl+c终止采集程序的运行，恢复时，还是运行上面这条命令即可，连按两次ctrl+c就可以完全终止。</p>
<p>其中jobinfo/001 是一个保存采集列表状态的目录，千万不要同时开多个爬虫程序使用同一个目录，会导致混乱。</p>
<p>还有更简单的方法，就是在settings.py文件里加入下面的代码：</p>
<p><code>JOBDIR=&#39;jobinfo/001&#39;</code></p>
<p>使用命令<code>scrapy crawl lagou</code>，就会自动生成一个jobinfo/001的目录，然后将工作列表放到这个文件夹里。</p>
<h2 id="Scrapy-url去重原理"><a href="#Scrapy-url去重原理" class="headerlink" title="Scrapy url去重原理"></a><strong>Scrapy url去重原理</strong></h2><p>对url进行hash运算映射到某个地址，将该url和hash值当做键值对存放到hash表中，当需要检测新的url的时候，只需要对该url进行hash映射，如果得到的地址在hash表中已经存在，则说明已经被爬取过，则放弃爬取，否则，进行爬取并记录键值对。这样只需要维护一个hash表即可，需要考虑的问题是hash碰撞的问题，互联网上数据如瀚海般，如果hash函数设计不当，碰撞还是很容易发生的。scrapy框架下可以在pipeline中写一个Duplicates filter,背后采用的是hash值存储。</p>
<p>相关代码都在<code>dupefilter.py</code>中，其实就是做了一个哈希摘要，放在set中，去查新的url是否在set中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RFPDupeFilter</span><span class="params">(BaseDupeFilter)</span>:</span></div><div class="line">    <span class="string">"""Request Fingerprint duplicates filter"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path=None, debug=False)</span>:</span></div><div class="line">        self.file = <span class="keyword">None</span></div><div class="line">        self.fingerprints = set()</div><div class="line">        self.logdupes = <span class="keyword">True</span></div><div class="line">        self.debug = debug</div><div class="line">        self.logger = logging.getLogger(__name__)</div><div class="line">        <span class="keyword">if</span> path:</div><div class="line">            self.file = open(os.path.join(path, <span class="string">'requests.seen'</span>), <span class="string">'a+'</span>)</div><div class="line">            self.file.seek(<span class="number">0</span>)</div><div class="line">            self.fingerprints.update(x.rstrip() <span class="keyword">for</span> x <span class="keyword">in</span> self.file)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_settings</span><span class="params">(cls, settings)</span>:</span></div><div class="line">        debug = settings.getbool(<span class="string">'DUPEFILTER_DEBUG'</span>)</div><div class="line">        <span class="keyword">return</span> cls(job_dir(settings), debug)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_seen</span><span class="params">(self, request)</span>:</span></div><div class="line">        fp = self.request_fingerprint(request)</div><div class="line">        <span class="keyword">if</span> fp <span class="keyword">in</span> self.fingerprints:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        self.fingerprints.add(fp)</div><div class="line">        <span class="keyword">if</span> self.file:</div><div class="line">            self.file.write(fp + os.linesep)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_fingerprint</span><span class="params">(self, request)</span>:</span></div><div class="line">        <span class="keyword">return</span> request_fingerprint(request)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self, reason)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.file:</div><div class="line">            self.file.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.debug:</div><div class="line">            msg = <span class="string">"Filtered duplicate request: %(request)s"</span></div><div class="line">            self.logger.debug(msg, &#123;<span class="string">'request'</span>: request&#125;, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</div><div class="line">        <span class="keyword">elif</span> self.logdupes:</div><div class="line">            msg = (<span class="string">"Filtered duplicate request: %(request)s"</span></div><div class="line">                   <span class="string">" - no more duplicates will be shown"</span></div><div class="line">                   <span class="string">" (see DUPEFILTER_DEBUG to show all duplicates)"</span>)</div><div class="line">            self.logger.debug(msg, &#123;<span class="string">'request'</span>: request&#125;, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</div><div class="line">            self.logdupes = <span class="keyword">False</span></div><div class="line"></div><div class="line">        spider.crawler.stats.inc_value(<span class="string">'dupefilter/filtered'</span>, spider=spider)</div></pre></td></tr></table></figure>
<h2 id="Scrapy-telnet服务"><a href="#Scrapy-telnet服务" class="headerlink" title="Scrapy telnet服务"></a><strong>Scrapy telnet服务</strong></h2><p>Scrapy提供了内置的telnet终端，以供检查，控制Scrapy运行的进程。 telnet仅仅是一个运行在Scrapy进程中的普通python终端。</p>
<p>telnet终端监听设置中定义的 <a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/telnetconsole.html#std:setting-TELNETCONSOLE_PORT" target="_blank" rel="external"><code>TELNETCONSOLE_PORT</code></a> ，默认为 <code>6023</code> 。 访问telnet请输入:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">telnet localhost 6023</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>Scrapy官方文档对<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/telnetconsole.html" target="_blank" rel="external">telnet</a>做了更详尽的介绍。</p>
<h2 id="Spider-middleware-详解"><a href="#Spider-middleware-详解" class="headerlink" title="Spider middleware 详解"></a><strong>Spider middleware 详解</strong></h2><p>传送门：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/spider-middleware.html" target="_blank" rel="external">Spider Middleware</a></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fh4fmabuzjj30a00763z1.jpg" alt=""></p>
<p>上图为Scrapy源码中spidermiddlewares的结构</p>
<p>depth.py:爬取深度的设置</p>
<p>httperror.py：状态的设置，比如是不是要把404的也抓取下来，等等。</p>
<h2 id="Scrapy的数据收集"><a href="#Scrapy的数据收集" class="headerlink" title="Scrapy的数据收集"></a><strong>Scrapy的数据收集</strong></h2><p>传送门：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/stats.html" target="_blank" rel="external">数据收集</a></p>
<h2 id="Scrapy信号详解"><a href="#Scrapy信号详解" class="headerlink" title="Scrapy信号详解"></a><strong>Scrapy信号详解</strong></h2><p>传送门：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/signals.html" target="_blank" rel="external">信号</a></p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 收集伯乐在线所有404的url以及404页面数</span></div><div class="line">handle_httpstatus_list = [<span class="number">404</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    self.fail_urls = []</div><div class="line">    super(JobboleSpider, self).__init__()</div><div class="line">    dispatcher.connect(self.handle_spider_closed, signals.spider_closed)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_spider_closed</span><span class="params">(self, spider, reason)</span>:</span></div><div class="line">    self.crawler.stats.set_value(<span class="string">"failed_urls"</span>, <span class="string">","</span>.join(self.fail_urls))</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    1. 获取文章列表页中的文章url并交给解析函数进行具体字段的解析</div><div class="line">    2. 获取下一页的url并交给scrapy进行下载</div><div class="line">    :param response: </div><div class="line">    :return: </div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> response.status == <span class="number">404</span>:</div><div class="line">        self.fail_urls.append(response.url)</div><div class="line">        self.crawler.stats.inc_value(<span class="string">"failed_url"</span>)</div></pre></td></tr></table></figure>
<p>调试结果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fh4h054xnxj30se0gwjv6.jpg" alt=""></p>
<h2 id="Scrapy扩展开发"><a href="#Scrapy扩展开发" class="headerlink" title="Scrapy扩展开发"></a><strong>Scrapy扩展开发</strong></h2><p>传送门：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/extensions.html" target="_blank" rel="external">扩展</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要介绍selenium的使用、其余的一些动态网页获取技术以及scrapy的一些进阶知识。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——云打码实现验证码识别</title>
    <link href="http://yoursite.com/2017/06/12/scrapy-yundama/"/>
    <id>http://yoursite.com/2017/06/12/scrapy-yundama/</id>
    <published>2017-06-12T06:18:54.000Z</published>
    <updated>2017-06-22T07:19:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>验证码识别大致有如下几种方式：</p>
<ul>
<li>编码实现（Tesseract-OCR）</li>
<li>在线打码</li>
<li>人工打码</li>
</ul>
<a id="more"></a>
<p>这里我们简单介绍一下在线打码，选择的打码平台为：<a href="http://www.yundama.com" target="_blank" rel="external">云打码</a></p>
<p>具体方式查看调用示例即可。</p>
<p>下面给出代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">YDMHttp</span><span class="params">(object)</span>:</span></div><div class="line">    apiurl = <span class="string">'http://api.yundama.com/api.php'</span></div><div class="line">    username = <span class="string">''</span></div><div class="line">    password = <span class="string">''</span></div><div class="line">    appid = <span class="string">''</span></div><div class="line">    appkey = <span class="string">''</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, appid, appkey)</span>:</span></div><div class="line">        self.username = username</div><div class="line">        self.password = password</div><div class="line">        self.appid = str(appid)</div><div class="line">        self.appkey = appkey</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self)</span>:</span></div><div class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'balance'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid,</div><div class="line">                <span class="string">'appkey'</span>: self.appkey&#125;</div><div class="line">        response_data = requests.post(self.apiurl, data=data)</div><div class="line">        ret_data = json.loads(response_data.text)</div><div class="line">        <span class="keyword">if</span> ret_data[<span class="string">"ret"</span>] == <span class="number">0</span>:</div><div class="line">            print(<span class="string">"获取剩余积分"</span>, ret_data[<span class="string">"balance"</span>])</div><div class="line">            <span class="keyword">return</span> ret_data[<span class="string">"balance"</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></div><div class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'login'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid,</div><div class="line">                <span class="string">'appkey'</span>: self.appkey&#125;</div><div class="line">        response_data = requests.post(self.apiurl, data=data)</div><div class="line">        ret_data = json.loads(response_data.text)</div><div class="line">        <span class="keyword">if</span> ret_data[<span class="string">"ret"</span>] == <span class="number">0</span>:</div><div class="line">            print(<span class="string">"登录成功"</span>, ret_data[<span class="string">"uid"</span>])</div><div class="line">            <span class="keyword">return</span> ret_data[<span class="string">"uid"</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self, filename, codetype, timeout)</span>:</span></div><div class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'upload'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid,</div><div class="line">                <span class="string">'appkey'</span>: self.appkey, <span class="string">'codetype'</span>: str(codetype), <span class="string">'timeout'</span>: str(timeout)&#125;</div><div class="line">        files = &#123;<span class="string">'file'</span>: open(filename, <span class="string">'rb'</span>)&#125;</div><div class="line">        response_data = requests.post(self.apiurl, files=files, data=data)</div><div class="line">        ret_data = json.loads(response_data.text)</div><div class="line">        <span class="keyword">if</span> ret_data[<span class="string">"ret"</span>] == <span class="number">0</span>:</div><div class="line">            print(<span class="string">"识别成功"</span>, ret_data[<span class="string">"text"</span>])</div><div class="line">            <span class="keyword">return</span> ret_data[<span class="string">"text"</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ydm</span><span class="params">(file_path)</span>:</span></div><div class="line">    username = <span class="string">'da_ge_da1'</span></div><div class="line">    <span class="comment"># 密码</span></div><div class="line">    password = <span class="string">'da_ge_da'</span></div><div class="line">    <span class="comment"># 软件ＩＤ，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></div><div class="line">    appid = <span class="number">3129</span></div><div class="line">    <span class="comment"># 软件密钥，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></div><div class="line">    appkey = <span class="string">'40d5ad41c047179fc797631e3b9c3025'</span></div><div class="line">    <span class="comment"># 图片文件</span></div><div class="line">    filename = <span class="string">'image/captcha.jpg'</span></div><div class="line">    <span class="comment"># 验证码类型，# 例：1004表示4位字母数字，不同类型收费不同。请准确填写，否则影响识别率。在此查询所有类型 http://www.yundama.com/price.html</span></div><div class="line">    codetype = <span class="number">5000</span></div><div class="line">    <span class="comment"># 超时时间，秒</span></div><div class="line">    timeout = <span class="number">60</span></div><div class="line">    <span class="comment"># 检查</span></div><div class="line"></div><div class="line">    yundama = YDMHttp(username, password, appid, appkey)</div><div class="line">    <span class="keyword">if</span> (username == <span class="string">'username'</span>):</div><div class="line">        print(<span class="string">'请设置好相关参数再测试'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span></div><div class="line">        <span class="keyword">return</span> yundama.decode(file_path, codetype, timeout);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment"># 用户名</span></div><div class="line">    username = <span class="string">'da_ge_da1'</span></div><div class="line">    <span class="comment"># 密码</span></div><div class="line">    password = <span class="string">'da_ge_da'</span></div><div class="line">    <span class="comment"># 软件ＩＤ，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></div><div class="line">    appid = <span class="number">3129</span></div><div class="line">    <span class="comment"># 软件密钥，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></div><div class="line">    appkey = <span class="string">'40d5ad41c047179fc797631e3b9c3025'</span></div><div class="line">    <span class="comment"># 图片文件</span></div><div class="line">    filename = <span class="string">'image/captcha.jpg'</span></div><div class="line">    <span class="comment"># 验证码类型，# 例：1004表示4位字母数字，不同类型收费不同。请准确填写，否则影响识别率。在此查询所有类型 http://www.yundama.com/price.html</span></div><div class="line">    codetype = <span class="number">5000</span></div><div class="line">    <span class="comment"># 超时时间，秒</span></div><div class="line">    timeout = <span class="number">60</span></div><div class="line">    <span class="comment"># 检查</span></div><div class="line">    <span class="keyword">if</span> (username == <span class="string">'username'</span>):</div><div class="line">        print(<span class="string">'请设置好相关参数再测试'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># 初始化</span></div><div class="line">        yundama = YDMHttp(username, password, appid, appkey)</div><div class="line"></div><div class="line">        <span class="comment"># 登陆云打码</span></div><div class="line">        uid = yundama.login()</div><div class="line">        print(<span class="string">'uid: %s'</span> % uid)</div><div class="line"></div><div class="line">        <span class="comment"># 登陆云打码</span></div><div class="line">        uid = yundama.login()</div><div class="line">        print(<span class="string">'uid: %s'</span> % uid)</div><div class="line"></div><div class="line">        <span class="comment"># 查询余额</span></div><div class="line">        balance = yundama.balance()</div><div class="line">        print(<span class="string">'balance: %s'</span> % balance)</div><div class="line"></div><div class="line">        <span class="comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span></div><div class="line">        text = yundama.decode(filename, codetype, timeout)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;验证码识别大致有如下几种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编码实现（Tesseract-OCR）&lt;/li&gt;
&lt;li&gt;在线打码&lt;/li&gt;
&lt;li&gt;人工打码&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——cookie禁用、自动限速、自定义Spider的settings</title>
    <link href="http://yoursite.com/2017/06/12/scrapy-cookies-settings/"/>
    <id>http://yoursite.com/2017/06/12/scrapy-cookies-settings/</id>
    <published>2017-06-12T06:18:54.000Z</published>
    <updated>2017-06-22T08:29:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>像cookie禁用、自动限速这样的设置都在<code>settings.py</code>文件中，下面我们就来简单介绍一下。</p>
<a id="more"></a>
<h2 id="cookie禁用"><a href="#cookie禁用" class="headerlink" title="cookie禁用"></a><strong>cookie禁用</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Disable cookies (enabled by default)</span></div><div class="line">COOKIES_ENABLED = <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>默认设置为False。</p>
<h2 id="自动限速"><a href="#自动限速" class="headerlink" title="自动限速"></a><strong>自动限速</strong></h2><p>自动限速是通过自动限速(AutoThrottle)扩展来实现的，该扩展能根据Scrapy服务器及您爬取的网站的负载自动限制爬取速度。</p>
<h3 id="限速算法"><a href="#限速算法" class="headerlink" title="限速算法"></a><strong>限速算法</strong></h3><p>算法根据以下规则调整下载延迟及并发数:</p>
<ol>
<li>spider永远以1并发请求数及 <code>AUTOTHROTTLE_START_DELAY</code> 中指定的下载延迟启动。</li>
<li>当接收到回复时，下载延迟会调整到该回复的延迟与之前下载延迟之间的平均值。</li>
</ol>
<p><code>AutoThrottle</code> 扩展尊重标准Scrapy设置中的并发数及延迟。这意味着其永远不会设置一个比<code>DOWNLOAD_DELAY</code> 更低的下载延迟或者比 <code>CONCURRENT_REQUESTS_PER_DOMAIN</code> 更高的并发数 (或 <code>CONCURRENT_REQUESTS_PER_IP</code> ，取决于您使用哪一个)。</p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>下面是控制 <code>AutoThrottle</code> 扩展的设置:</p>
<ul>
<li><code>AUTOTHROTTLE_ENABLED</code></li>
<li><code>AUTOTHROTTLE_START_DELAY</code></li>
<li><code>AUTOTHROTTLE_MAX_DELAY</code></li>
<li><code>AUTOTHROTTLE_DEBUG</code></li>
<li><code>CONCURRENT_REQUESTS_PER_DOMAIN</code></li>
<li><code>CONCURRENT_REQUESTS_PER_IP</code></li>
<li><code>DOWNLOAD_DELAY</code></li>
</ul>
<h3 id="AUTOTHROTTLE-ENABLED"><a href="#AUTOTHROTTLE-ENABLED" class="headerlink" title="AUTOTHROTTLE_ENABLED"></a>AUTOTHROTTLE_ENABLED</h3><p>默认: <code>False</code></p>
<p>启用AutoThrottle扩展。</p>
<h3 id="AUTOTHROTTLE-START-DELAY"><a href="#AUTOTHROTTLE-START-DELAY" class="headerlink" title="AUTOTHROTTLE_START_DELAY"></a>AUTOTHROTTLE_START_DELAY</h3><p>默认: <code>5.0</code></p>
<p>初始下载延迟(单位:秒)。</p>
<h3 id="AUTOTHROTTLE-MAX-DELAY"><a href="#AUTOTHROTTLE-MAX-DELAY" class="headerlink" title="AUTOTHROTTLE_MAX_DELAY"></a>AUTOTHROTTLE_MAX_DELAY</h3><p>默认: <code>60.0</code></p>
<p>在高延迟情况下最大的下载延迟(单位秒)。</p>
<h3 id="AUTOTHROTTLE-DEBUG"><a href="#AUTOTHROTTLE-DEBUG" class="headerlink" title="AUTOTHROTTLE_DEBUG"></a>AUTOTHROTTLE_DEBUG</h3><p>默认: <code>False</code></p>
<p>起用AutoThrottle调试(debug)模式，展示每个接收到的response。 您可以通过此来查看限速参数是如何实时被调整的。</p>
<h2 id="自定义Spider的settings"><a href="#自定义Spider的settings" class="headerlink" title="自定义Spider的settings"></a><strong>自定义Spider的settings</strong></h2><p>每个Spider可以定义自己的设置，这些设置将优先覆盖项目目录中的设置，可以通过设置 <code>custom_settings</code> 属性来实现。</p>
<p>例如，我们的项目中，<code>zhihu.py</code> 中需要设置开启cookie，那么只需要在该文件中如下设置即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">custom_settings = &#123;</div><div class="line">    <span class="string">"COOKIES_ENABLED"</span>: <span class="keyword">True</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="settings-py详解"><a href="#settings-py详解" class="headerlink" title="settings.py详解"></a><strong>settings.py详解</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># Scrapy settings for ArticleSpider project</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># For simplicity, this file contains only settings considered important or</span></div><div class="line"><span class="comment"># commonly used. You can find more settings consulting the documentation:</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#     http://doc.scrapy.org/en/latest/topics/settings.html</span></div><div class="line"><span class="comment">#     http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></div><div class="line"><span class="comment">#     http://scrapy.readthedocs.org/en/latest/topics/spider-middleware.html</span></div><div class="line"></div><div class="line">BOT_NAME = <span class="string">'ArticleSpider'</span>  <span class="comment">#Scrapy项目的名字这将用来构造默认User-Agent，同时也用来log，当您使用startproject命令创建项目时其也被自动赋值。</span></div><div class="line"></div><div class="line">SPIDER_MODULES = [<span class="string">'ArticleSpider.spiders'</span>]  <span class="comment">#Scrapy搜索spider的模块列表 默认: [xxx.spiders]</span></div><div class="line">NEWSPIDER_MODULE = <span class="string">'ArticleSpider.spiders'</span>  <span class="comment">#使用genspider命令创建新spider的模块 默认: 'xxx.spiders'</span></div><div class="line"></div><div class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></div><div class="line"><span class="comment"># USER_AGENT = 'ArticleSpider (+http://www.yourdomain.com)'  #爬取的默认User-Agent，除非被覆盖</span></div><div class="line"></div><div class="line"><span class="comment"># Obey robots.txt rules</span></div><div class="line">ROBOTSTXT_OBEY = <span class="keyword">False</span>  <span class="comment">#如果启用,Scrapy将会采用robots.txt策略 </span></div><div class="line"></div><div class="line"><span class="comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></div><div class="line"><span class="comment">#Scrapy downloader并发请求(concurrent requests)的最大值，默认: 16</span></div><div class="line"><span class="comment"># CONCURRENT_REQUESTS = 32</span></div><div class="line"></div><div class="line"><span class="comment"># Configure a delay for requests for the same website (default: 0)</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/settings.html#download-delay</span></div><div class="line"><span class="comment"># See also autothrottle settings and docs</span></div><div class="line"><span class="comment">#为同一网站的请求配置延迟（默认值：0）下载器在下载同一个网站下一个页面前需要等待的时间,该选项可以用来限制爬取速度,减轻服务器压力。同时也支持小数:0.25 以秒为单位  </span></div><div class="line">DOWNLOAD_DELAY = <span class="number">10</span></div><div class="line"><span class="comment"># The download delay setting will honor only one of:</span></div><div class="line"><span class="comment">#下载延迟设置只有一个有效</span></div><div class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_DOMAIN = 16  对单个网站进行并发请求的最大值。</span></div><div class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_IP = 16  对单个IP进行并发请求的最大值。如果非0,则忽略 CONCURRENT_REQUESTS_PER_DOMAIN 设定,使用该设定。 也就是说,并发限制将针对IP,而不是网站。该设定也影响 DOWNLOAD_DELAY: 如果 CONCURRENT_REQUESTS_PER_IP 非0,下载延迟应用在IP而不是网站上。  </span></div><div class="line"></div><div class="line"><span class="comment"># Disable cookies (enabled by default)</span></div><div class="line"><span class="comment">#禁用Cookie（默认情况下启用）</span></div><div class="line">COOKIES_ENABLED = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="comment"># Disable Telnet Console (enabled by default)</span></div><div class="line"><span class="comment">#禁用Telnet控制台（默认启用）</span></div><div class="line"><span class="comment"># TELNETCONSOLE_ENABLED = False</span></div><div class="line"></div><div class="line"><span class="comment"># Override the default request headers:</span></div><div class="line"><span class="comment">#覆盖默认请求头：</span></div><div class="line"><span class="comment"># DEFAULT_REQUEST_HEADERS = &#123;</span></div><div class="line"><span class="comment">#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span></div><div class="line"><span class="comment">#   'Accept-Language': 'en',</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"></div><div class="line"><span class="comment"># Enable or disable spider middlewares</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/spider-middleware.html</span></div><div class="line"><span class="comment">#启用或禁用爬虫中间件</span></div><div class="line"><span class="comment"># SPIDER_MIDDLEWARES = &#123;</span></div><div class="line"><span class="comment">#    'ArticleSpider.middlewares.ArticlespiderSpiderMiddleware': 543,</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"></div><div class="line"><span class="comment"># Enable or disable downloader middlewares</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></div><div class="line"><span class="comment">#启用或禁用下载器中间件</span></div><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">    <span class="string">'ArticleSpider.middlewares.RandomUserAgentMiddleware'</span>: <span class="number">543</span>,</div><div class="line">    <span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class="keyword">None</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># Enable or disable extensions</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/extensions.html</span></div><div class="line"><span class="comment">#启用或禁用扩展程序</span></div><div class="line"><span class="comment"># EXTENSIONS = &#123;</span></div><div class="line"><span class="comment">#    'scrapy.extensions.telnet.TelnetConsole': None,</span></div><div class="line"><span class="comment"># &#125;</span></div><div class="line"></div><div class="line"><span class="comment"># Configure item pipelines</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/item-pipeline.html</span></div><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">    <span class="comment"># 'ArticleSpider.pipelines.JsonExporterPipeline': 2,</span></div><div class="line">    <span class="comment"># # 'scrapy.pipelines.images.ImagesPipeline': 1,</span></div><div class="line">    <span class="comment"># 'ArticleSpider.pipelines.ArticleImagePipeline': 1,</span></div><div class="line">    <span class="string">'ArticleSpider.pipelines.MysqlTwistedPipeline'</span>: <span class="number">1</span>,</div><div class="line">&#125;</div><div class="line">IMAGES_URLS_FIELD = <span class="string">"front_image_url"</span></div><div class="line">project_dir = os.path.abspath(os.path.dirname(__file__))</div><div class="line">IMAGES_STORE = os.path.join(project_dir, <span class="string">'images'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 设置搜索路径</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">BASE_DIR = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))</div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'ArticleSpider'</span>))</div><div class="line"></div><div class="line">USER_AGENT = <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4"</span></div><div class="line"></div><div class="line">RANDOM_UA_TYPE = <span class="string">'random'</span></div><div class="line"></div><div class="line"><span class="comment"># IMAGES_MIN_HEIGHT = 100</span></div><div class="line"><span class="comment"># IMAGES_MIN_WIDTH = 100</span></div><div class="line"></div><div class="line"><span class="comment"># Enable and configure the AutoThrottle extension (disabled by default)</span></div><div class="line"><span class="comment"># See http://doc.scrapy.org/en/latest/topics/autothrottle.html</span></div><div class="line"><span class="comment">#启用和配置AutoThrottle扩展（默认情况下禁用）</span></div><div class="line">AUTOTHROTTLE_ENABLED = <span class="keyword">True</span></div><div class="line"><span class="comment"># The initial download delay</span></div><div class="line"><span class="comment"># AUTOTHROTTLE_START_DELAY = 5</span></div><div class="line"><span class="comment"># The maximum download delay to be set in case of high latencies</span></div><div class="line"><span class="comment"># AUTOTHROTTLE_MAX_DELAY = 60</span></div><div class="line"><span class="comment"># The average number of requests Scrapy should be sending in parallel to</span></div><div class="line"><span class="comment"># each remote server</span></div><div class="line"><span class="comment"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></div><div class="line"><span class="comment"># Enable showing throttling stats for every response received:</span></div><div class="line"><span class="comment"># AUTOTHROTTLE_DEBUG = False</span></div><div class="line"></div><div class="line"><span class="comment"># Enable and configure HTTP caching (disabled by default)</span></div><div class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></div><div class="line"><span class="comment">#启用和配置HTTP缓存（默认情况下禁用）</span></div><div class="line"><span class="comment"># HTTPCACHE_ENABLED = True</span></div><div class="line"><span class="comment"># HTTPCACHE_EXPIRATION_SECS = 0</span></div><div class="line"><span class="comment"># HTTPCACHE_DIR = 'httpcache'</span></div><div class="line"><span class="comment"># HTTPCACHE_IGNORE_HTTP_CODES = []</span></div><div class="line"><span class="comment"># HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span></div><div class="line"></div><div class="line">MYSQL_HOST = <span class="string">"127.0.0.1"</span></div><div class="line">MYSQL_DBNAME = <span class="string">"article_spider"</span></div><div class="line">MYSQL_USER = <span class="string">"root"</span></div><div class="line">MYSQL_PASSWORD = <span class="string">"123"</span></div><div class="line"></div><div class="line">SQL_DATETIME_FORMAT = <span class="string">"%Y-%m-%d %H:%M:%S"</span></div><div class="line">SQL_DATE_FORMAT = <span class="string">"%Y-%m-%d"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;像cookie禁用、自动限速这样的设置都在&lt;code&gt;settings.py&lt;/code&gt;文件中，下面我们就来简单介绍一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Scrapy随机更换User-Agent和实现IP代理池</title>
    <link href="http://yoursite.com/2017/06/11/scrapy-useragent-proxyip/"/>
    <id>http://yoursite.com/2017/06/11/scrapy-useragent-proxyip/</id>
    <published>2017-06-11T06:18:54.000Z</published>
    <updated>2017-06-21T10:13:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前有一节用于介绍<code>Request</code>和<code>Response</code>，还是<a href="https://doc.scrapy.org/en/latest/index.html" target="_blank" rel="external">官方文档</a>介绍的比较详尽，所以就不做笔记了。</p>
<p>这一节用于介绍随机更换User-Agent和实现IP代理池的方法，首先来看一下现在网站中所做的反爬虫工作。</p>
<a id="more"></a>
<h2 id="常见的反爬虫和应对方法"><a href="#常见的反爬虫和应对方法" class="headerlink" title="常见的反爬虫和应对方法"></a><strong>常见的反爬虫和应对方法</strong></h2><p>一般网站从三个方面反爬虫：用户请求的Headers，用户行为，网站目录和数据加载方式。前两种比较容易遇到，大多数网站都从这些角度来反爬虫。第三种一些应用ajax的网站会采用，这样增大了爬取的难度。</p>
<h3 id="通过Headers反爬虫"><a href="#通过Headers反爬虫" class="headerlink" title="通过Headers反爬虫"></a><strong>通过</strong>Headers反爬虫</h3><p>从用户请求的Headers反爬虫是最常见的反爬虫策略。很多网站都会对Headers的User-Agent进行检测，还有一部分网站会对Referer进行检测（一些资源网站的防盗链就是检测Referer）。如果遇到了这类反爬虫机制，可以直接在爬虫中添加Headers，将浏览器的User-Agent复制到爬虫的Headers中；或者将Referer值修改为目标网站域名。对于检测Headers的反爬虫，在爬虫中修改或者添加Headers就能很好的绕过。</p>
<p>针对这样的反爬虫方法，我们在Scrapy中实现随机更换User-Agent就很有必要了。</p>
<h3 id="基于用户行为反爬虫"><a href="#基于用户行为反爬虫" class="headerlink" title="基于用户行为反爬虫"></a>基于用户行为反爬虫</h3><p>还有一部分网站是通过检测用户行为，例如同一IP短时间内多次访问同一页面，或者同一账户短时间内多次进行相同操作。</p>
<p>大多数网站都是前一种情况，对于这种情况，使用IP代理就可以解决。可以专门写一个爬虫，爬取网上公开的代理ip，检测后全部保存起来。这样的代理ip爬虫经常会用到，最好自己准备一个。有了大量代理ip后可以每请求几次更换一个ip，这在requests或者urllib2中很容易做到，这样就能很容易的绕过第一种反爬虫。</p>
<p>对于第二种情况，可以在每次请求后随机间隔几秒再进行下一次请求。有些有逻辑漏洞的网站，可以通过请求几次，退出登录，重新登录，继续请求来绕过同一账号短时间内不能多次进行相同请求的限制。</p>
<p>对于这样的反爬虫方法，我们可以在Scrapy中实现IP代理池，问题便迎刃而解。</p>
<h3 id="动态页面的反爬虫"><a href="#动态页面的反爬虫" class="headerlink" title="动态页面的反爬虫"></a>动态页面的反爬虫</h3><p>上述的几种情况大多都是出现在静态页面，还有一部分网站，我们需要爬取的数据是通过ajax请求得到，或者通过JavaScript生成的。首先用Firebug或者HttpFox对网络请求进行分析。如果能够找到ajax请求，也能分析出具体的参数和响应的具体含义，我们就能采用上面的方法，直接利用requests或者urllib2模拟ajax请求，对响应的json进行分析得到需要的数据。</p>
<p>能够直接模拟ajax请求获取数据固然是极好的，但是有些网站把ajax请求的所有参数全部加密了。我们根本没办法构造自己所需要的数据的请求。我这几天爬的那个网站就是这样，除了加密ajax参数，它还把一些基本的功能都封装了，全部都是在调用自己的接口，而接口参数都是加密的。遇到这样的网站，我们就不能用上面的方法了，我用的是selenium+phantomJS框架，调用浏览器内核，并利用phantomJS执行js来模拟人为操作以及触发页面中的js脚本。从填写表单到点击按钮再到滚动页面，全部都可以模拟，不考虑具体的请求和响应过程，只是完完整整的把人浏览页面获取数据的过程模拟一遍。 </p>
<p>用这套框架几乎能绕过大多数的反爬虫，因为它不是在伪装成浏览器来获取数据（上述的通过添加 Headers一定程度上就是为了伪装成浏览器），它本身就是浏览器，phantomJS就是一个没有界面的浏览器，只是操控这个浏览器的不是人。利用 selenium+phantomJS能干很多事情，例如识别点触式（12306）或者滑动式的验证码，对页面表单进行暴力破解等等。它在自动化渗透中还 会大展身手，以后还会提到这个。</p>
<h2 id="随机更换User-Agent"><a href="#随机更换User-Agent" class="headerlink" title="随机更换User-Agent"></a><strong>随机更换User-Agent</strong></h2><p>首先将下面的代码添加到<code>settings.py</code>文件，替换默认的user-agent处理模块：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">    <span class="string">'ArticleSpider.middlewares.RandomUserAgentMiddleware'</span>: <span class="number">543</span>,</div><div class="line">    <span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class="keyword">None</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>middlewares.py</code>文件中自定义User-Agent处理模块：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgentMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    随机更换User-Agent</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, crawler)</span>:</span></div><div class="line">        super(RandomUserAgentMiddleware, self).__init__()</div><div class="line">        self.ua = UserAgent()</div><div class="line">        self.ua_type = crawler.settings.get(<span class="string">'RANDOM_UA_TYPE'</span>, <span class="string">'random'</span>)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        <span class="keyword">return</span> cls(crawler)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_ua</span><span class="params">()</span>:</span></div><div class="line">            <span class="keyword">return</span> getattr(self.ua, self.ua_type)</div><div class="line"></div><div class="line">        request.headers.setdefault(<span class="string">'User-Agent'</span>, get_ua())</div></pre></td></tr></table></figure>
<p>其中，<a href="https://github.com/hellysmile/fake-useragent" target="_blank" rel="external">fake_useragent</a>这个第三方库维护了大量的User-Agent，我们就没必要自己去维护了，直接使用就好。</p>
<p>下图为其的安装和使用方法：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fgspyd3gulj31e8150n6o.jpg" alt=""></p>
<h2 id="实现IP代理池"><a href="#实现IP代理池" class="headerlink" title="实现IP代理池"></a><strong>实现IP代理池</strong></h2><p>我们用<a href="http://www.xicidaili.com/nn" target="_blank" rel="external">西刺免费代理IP网站</a>来实现这个IP代理池。我们选择爬取这个网站，然后将获取的数据写入数据库以供我们自己使用。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fgsqbcp5abj31kw180b29.jpg" alt=""></p>
<p>调试之后，用CSS选择器来获取我们所需的内容，并将其保存到数据库中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line">conn = MySQLdb.connect(host=<span class="string">"127.0.0.1"</span>, user=<span class="string">"root"</span>, passwd=<span class="string">"123"</span>, db=<span class="string">"article_spider"</span>, charset=<span class="string">"utf8"</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl_ips</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    爬取西刺网的免费代理IP</div><div class="line">    """</div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4"</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2093</span>):</div><div class="line">        re = requests.get(<span class="string">"http://www.xicidaili.com/nn/&#123;0&#125;"</span>.format(i), headers=headers)</div><div class="line"></div><div class="line">        selector = Selector(text=re.text)</div><div class="line">        all_trs = selector.css(<span class="string">"#ip_list tr"</span>)</div><div class="line"></div><div class="line">        ip_list = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> all_trs[<span class="number">1</span>:]:</div><div class="line">            speed_str = tr.css(<span class="string">".bar::attr(title)"</span>).extract()[<span class="number">0</span>]</div><div class="line">            <span class="keyword">if</span> speed_str:</div><div class="line">                speed = float(speed_str.split(<span class="string">"秒"</span>)[<span class="number">0</span>])</div><div class="line">            ip = tr.css(<span class="string">"td:nth-child(2)::text"</span>).extract_first()</div><div class="line">            port = tr.css(<span class="string">"td:nth-child(3)::text"</span>).extract_first()</div><div class="line">            proxy_type = tr.css(<span class="string">"td:nth-child(6)::text"</span>).extract_first()</div><div class="line">            ip_list.append((ip, port, proxy_type, speed))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> ip_info <span class="keyword">in</span> ip_list:</div><div class="line">            cursor.execute(</div><div class="line">                <span class="string">"insert proxy_ip(ip, port, speed, proxy_type) VALUES('&#123;0&#125;', '&#123;1&#125;', '&#123;2&#125;', '&#123;3&#125;')"</span>.format(</div><div class="line">                    ip_info[<span class="number">0</span>], ip_info[<span class="number">1</span>], ip_info[<span class="number">3</span>], ip_info[<span class="number">2</span>]</div><div class="line">                )</div><div class="line">            )</div><div class="line">            conn.commit()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetIP</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_ip</span><span class="params">(self, ip)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        从数据库中删除无效的IP </div><div class="line">        """</div><div class="line">        delete_sql = <span class="string">"""</span></div><div class="line">            DELETE FROM proxy_ip WHERE ip='&#123;0&#125;'</div><div class="line">        """.format(ip)</div><div class="line">        cursor.execute(delete_sql)</div><div class="line">        conn.commit()</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge_ip</span><span class="params">(self, ip, port)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        判断IP是否可用</div><div class="line">        """</div><div class="line">        http_url = <span class="string">"http://www.baidu.com"</span></div><div class="line">        proxy_url = <span class="string">"http://&#123;0&#125;:&#123;1&#125;"</span>.format(ip, port)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            proxy_dict = &#123;</div><div class="line">                <span class="string">"http"</span>: proxy_url,</div><div class="line">            &#125;</div><div class="line">            response = requests.get(http_url, proxies=proxy_dict)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(<span class="string">"invalid ip and port"</span>)</div><div class="line">            self.delete_ip(ip)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            code = response.status_code</div><div class="line">            <span class="keyword">if</span> code &gt;= <span class="number">200</span> <span class="keyword">and</span> code &lt; <span class="number">300</span>:</div><div class="line">                print(<span class="string">"effective ip"</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">"invalid ip and port"</span>)</div><div class="line">                self.delete_ip(ip)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_random_ip</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        从数据库中随机获取一个可用的IP</div><div class="line">        """</div><div class="line">        random_sql = <span class="string">"""</span></div><div class="line">            SELECT ip, port FROM proxy_ip</div><div class="line">            ORDER BY RAND()</div><div class="line">            LIMIT 1</div><div class="line">        """</div><div class="line">        result = cursor.execute(random_sql)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> ip_info <span class="keyword">in</span> cursor.fetchall():</div><div class="line">            ip = ip_info[<span class="number">0</span>]</div><div class="line">            port = ip_info[<span class="number">1</span>]</div><div class="line"></div><div class="line">            judge_re = self.judge_ip(ip, port)</div><div class="line">            <span class="keyword">if</span> judge_re:</div><div class="line">                <span class="keyword">return</span> <span class="string">"http://&#123;0&#125;:&#123;1&#125;"</span>.format(ip, port)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> self.get_random_ip()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    get_ip = GetIP()</div><div class="line">    get_ip.get_random_ip()</div></pre></td></tr></table></figure>
<p>最后，在<code>middlewares.py</code>文件中写入我们用于设置IP代理的逻辑即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomProxyMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    动态设置IP代理</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        get_ip = GetIP()</div><div class="line">        request.meta[<span class="string">"proxy"</span>] = get_ip.get_random_ip()</div></pre></td></tr></table></figure>
<h2 id="可参考的第三方库"><a href="#可参考的第三方库" class="headerlink" title="可参考的第三方库"></a><strong>可参考的第三方库</strong></h2><ul>
<li><a href="https://github.com/scrapy-plugins/scrapy-crawlera" target="_blank" rel="external"><strong>scrapy-crawlera</strong></a></li>
<li><a href="https://github.com/aivarsk/scrapy-proxies" target="_blank" rel="external"><strong>scrapy-proxies</strong></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前有一节用于介绍&lt;code&gt;Request&lt;/code&gt;和&lt;code&gt;Response&lt;/code&gt;，还是&lt;a href=&quot;https://doc.scrapy.org/en/latest/index.html&quot;&gt;官方文档&lt;/a&gt;介绍的比较详尽，所以就不做笔记了。&lt;/p&gt;
&lt;p&gt;这一节用于介绍随机更换User-Agent和实现IP代理池的方法，首先来看一下现在网站中所做的反爬虫工作。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Scrapy核心架构分析</title>
    <link href="http://yoursite.com/2017/06/11/scrapy-framework/"/>
    <id>http://yoursite.com/2017/06/11/scrapy-framework/</id>
    <published>2017-06-11T06:18:54.000Z</published>
    <updated>2017-06-21T04:04:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a><strong>概览</strong></h2><p>首先看一下Scrapy的架构图：</p>
<a id="more"></a>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fgsotbkiowj31240oagp5.jpg" alt=""></p>
<h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a><strong>核心组件</strong></h2><p>Scrapy有以下几大组件：</p>
<ul>
<li><code>Scrapy Engine</code>：核心引擎，负责控制和调度各个组件，保证数据流转；</li>
<li><code>Scheduler</code>：负责管理任务、过滤任务、输出任务的调度器，存储、去重任务都在此控制；</li>
<li><code>Downloader</code>：下载器，负责在网络上下载网页数据，输入待下载URL，输出下载结果；</li>
<li><code>Spiders</code>：用户自己编写的爬虫脚本，可自定义抓取意图；</li>
<li><code>Item Pipeline</code>：负责输出结构化数据，可自定义输出位置；</li>
</ul>
<p>除此之外，还有两大中间件组件：</p>
<ul>
<li><code>Downloader middlewares</code>：介于引擎和下载器之间，可以在网页在下载前、后进行逻辑处理；</li>
<li><code>Spider middlewares</code>：介于引擎和爬虫之间，可以在调用爬虫输入下载结果和输出请求/数据时进行逻辑处理</li>
</ul>
<h2 id="数据流转"><a href="#数据流转" class="headerlink" title="数据流转"></a><strong>数据流转</strong></h2><p>按照架构图的序号，数据流转大概是这样的：</p>
<ol>
<li><strong>引擎</strong>从<strong>自定义爬虫</strong>中获取初始化请求（也叫种子URL）；</li>
<li>引擎把该请求放入<strong>调度器</strong>中，同时<strong>引擎向调度器</strong>获取一个<strong>待下载的请求</strong>（这两部是异步执行的）；</li>
<li>调度器返回给引擎一个<strong>待下载</strong>的请求；</li>
<li>引擎发送请求给<strong>下载器</strong>，中间会经过一系列<strong>下载器中间件</strong>；</li>
<li>这个请求通过下载器下载完成后，生成一个<strong>响应对象</strong>，返回给引擎，这中间会再次经过一系列<strong>下载器中间件</strong>；</li>
<li>引擎接收到下载返回的响应对象后，然后发送给爬虫，执行<strong>自定义爬虫逻辑</strong>，中间会经过一系列<strong>爬虫中间件</strong>；</li>
<li>爬虫执行对应的回调方法，处理这个响应，完成用户逻辑后，会生成<strong>结果对象</strong>或<strong>新的请求对象</strong>给引擎，再次经过一系列<strong>爬虫中间件</strong>；</li>
<li>引擎把爬虫返回的结果对象交由<strong>结果处理器</strong>处理，把<strong>新的请求</strong>对象通过引擎再交给<strong>调度器</strong>；</li>
<li>从1开始重复执行，直到<strong>调度器</strong>中没有新的请求处理；</li>
</ol>
<h2 id="核心组件交互图"><a href="#核心组件交互图" class="headerlink" title="核心组件交互图"></a><strong>核心组件交互图</strong></h2><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fgsowftl9fj31f60zjtco.jpg" alt=""></p>
<p>这里需要说明一下图中的<code>Scrapyer</code>，其实这也是在源码的一个核心类，但官方架构图中没有展示出来，这个类其实是处于<code>Engine</code>、<code>Spiders</code>、<code>Pipeline</code>之间，是连通这3个组件的桥梁。</p>
<h2 id="核心类图"><a href="#核心类图" class="headerlink" title="核心类图"></a><strong>核心类图</strong></h2><p>涉及到的一些核心类如下：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fgsoxkf4ntj30tc14hq6c.jpg" alt=""></p>
<p>其中没有样式的<strong>黑色文字</strong>是类的核心<strong>属性</strong>，<strong>黄色样式</strong>的文字都是核心<strong>方法</strong>。</p>
<p>可以看到，Scrapy的核心类，其实主要包含5大组件、4大中间件管理器、爬虫类和爬虫管理器、请求、响应对象和数据解析类这几大块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;&lt;strong&gt;概览&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;首先看一下Scrapy的架构图：&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Requests，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CRequests%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Scrapy爬取拉勾网</title>
    <link href="http://yoursite.com/2017/06/09/scrapy-crawlspider-lagou/"/>
    <id>http://yoursite.com/2017/06/09/scrapy-crawlspider-lagou/</id>
    <published>2017-06-09T06:18:54.000Z</published>
    <updated>2017-06-09T08:31:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前的Spider都是默认根据basic的templates创建，现在我们要用crawl的方式创建Spider，以爬取拉勾网整站信息。</p>
<a id="more"></a>
<h2 id="CrawlSpider源码解析"><a href="#CrawlSpider源码解析" class="headerlink" title="CrawlSpider源码解析"></a><strong>CrawlSpider源码解析</strong></h2><p>Spider基本上能做很多事情了，但是如果你想爬取知乎或者是简书全站的话，你可能需要一个更强大的武器。<br>CrawlSpider基于Spider，但是可以说是为全站爬取而生。</p>
<h3 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a><strong>简要说明</strong></h3><p>CrawlSpider是爬取那些具有一定规则网站的常用的爬虫，它基于Spider并有一些独特属性</p>
<ul>
<li>rules: 是<em>Rule</em>对象的集合，用于匹配目标网站并排除干扰</li>
<li>parse_start_url: 用于爬取起始响应，必须要返回<em>Item</em>，<em>Request</em>中的一个。</li>
</ul>
<p>因为rules是Rule对象的集合，所以这里也要介绍一下Rule。它有几个参数：link_extractor、callback=None、cb_kwargs=None、follow=None、process_links=None、process_request=None<br>其中的link_extractor既可以自己定义，也可以使用已有LinkExtractor类，主要参数为：</p>
<ul>
<li>allow：满足括号中“正则表达式”的值会被提取，如果为空，则全部匹配。</li>
<li>deny：与这个正则表达式(或正则表达式列表)不匹配的URL一定不提取。</li>
<li>allow_domains：会被提取的链接的domains。</li>
<li>deny_domains：一定不会被提取链接的domains。</li>
<li><strong>restrict_xpaths</strong>：使用<strong>xpath</strong>表达式，和<strong>allow</strong>共同作用过滤链接。还有一个类似的<strong>restrict_css</strong></li>
</ul>
<p>下面是官方提供的例子，我将从源代码的角度开始解读一些常见问题：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</div><div class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(CrawlSpider)</span>:</span></div><div class="line">    name = <span class="string">'example.com'</span></div><div class="line">    allowed_domains = [<span class="string">'example.com'</span>]</div><div class="line">    start_urls = [<span class="string">'http://www.example.com'</span>]</div><div class="line"></div><div class="line">    rules = (</div><div class="line">        <span class="comment"># Extract links matching 'category.php' (but not matching 'subsection.php')</span></div><div class="line">        <span class="comment"># and follow links from them (since no callback means follow=True by default).</span></div><div class="line">        Rule(LinkExtractor(allow=(<span class="string">'category\.php'</span>, ), deny=(<span class="string">'subsection\.php'</span>, ))),</div><div class="line"></div><div class="line">        <span class="comment"># Extract links matching 'item.php' and parse them with the spider's method parse_item</span></div><div class="line">        Rule(LinkExtractor(allow=(<span class="string">'item\.php'</span>, )), callback=<span class="string">'parse_item'</span>),</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></div><div class="line">        self.logger.info(<span class="string">'Hi, this is an item page! %s'</span>, response.url)</div><div class="line">        item = scrapy.Item()</div><div class="line">        item[<span class="string">'id'</span>] = response.xpath(<span class="string">'//td[@id="item_id"]/text()'</span>).re(<span class="string">r'ID: (\d+)'</span>)</div><div class="line">        item[<span class="string">'name'</span>] = response.xpath(<span class="string">'//td[@id="item_name"]/text()'</span>).extract()</div><div class="line">        item[<span class="string">'description'</span>] = response.xpath(<span class="string">'//td[@id="item_description"]/text()'</span>).extract()</div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<h3 id="问题：CrawlSpider如何工作的？"><a href="#问题：CrawlSpider如何工作的？" class="headerlink" title="问题：CrawlSpider如何工作的？"></a><strong>问题：CrawlSpider如何工作的？</strong></h3><p><strong>因为CrawlSpider继承了Spider，所以具有Spider的所有函数。</strong><br>首先由 <code>start_requests</code> 对 <code>start_urls</code> 中的每一个url发起请求（ <code>make_requests_from_url</code> )，这个请求会被parse接收。在Spider里面的parse需要我们定义，但CrawlSpider定义 <code>parse</code> 去解析响应（ <code>self._parse_response(response, self.parse_start_url, cb_kwargs={}, follow=True)</code> ）<br><strong>_parse_response</strong>根据有无 <code>callback</code> ， <code>follow</code> 和 <code>self.follow_links</code> 执行不同的操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def _parse_response(self, response, callback, cb_kwargs, follow=True):</div><div class="line">##如果传入了callback，使用这个callback解析页面并获取解析得到的reques或item</div><div class="line">    if callback:</div><div class="line">        cb_res = callback(response, **cb_kwargs) or ()</div><div class="line">        cb_res = self.process_results(response, cb_res)</div><div class="line">        for requests_or_item in iterate_spider_output(cb_res):</div><div class="line">            yield requests_or_item</div><div class="line">## 其次判断有无follow，用_requests_to_follow解析响应是否有符合要求的link。</div><div class="line">    if follow and self._follow_links:</div><div class="line">        for request_or_item in self._requests_to_follow(response):</div><div class="line">            yield request_or_item</div></pre></td></tr></table></figure>
<p>其中<code>_requests_to_follow</code>又会获取<code>link_extractor</code>（这个是我们传入的LinkExtractor）解析页面得到的link<code>（link_extractor.extract_links(response)）</code>,对url进行加工（process_links，需要自定义），对符合的link发起Request。使用<code>.process_request</code>(需要自定义）处理响应。</p>
<h3 id="问题：CrawlSpider如何获取rules？"><a href="#问题：CrawlSpider如何获取rules？" class="headerlink" title="问题：CrawlSpider如何获取rules？"></a><strong>问题：CrawlSpider如何获取rules？</strong></h3><p>CrawlSpider类会在<code>__init__</code>方法中调用<code>_compile_rules</code>方法，然后在其中浅拷贝<code>rules</code>中的各个<code>Rule</code>获取要用于回调(callback)，要进行处理的链接（process_links）和要进行的处理请求（process_request)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compile_rules</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_method</span><span class="params">(method)</span>:</span></div><div class="line">        <span class="keyword">if</span> callable(method):</div><div class="line">            <span class="keyword">return</span> method</div><div class="line">        <span class="keyword">elif</span> isinstance(method, six.string_types):</div><div class="line">            <span class="keyword">return</span> getattr(self, method, <span class="keyword">None</span>)</div><div class="line"></div><div class="line">    self._rules = [copy.copy(r) <span class="keyword">for</span> r <span class="keyword">in</span> self.rules]</div><div class="line">    <span class="keyword">for</span> rule <span class="keyword">in</span> self._rules:</div><div class="line">        rule.callback = get_method(rule.callback)</div><div class="line">        rule.process_links = get_method(rule.process_links)</div><div class="line">        rule.process_request = get_method(rule.process_request)</div></pre></td></tr></table></figure>
<p>那么<code>Rule</code>是怎么样定义的呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Rule(object):</div><div class="line"></div><div class="line">    def __init__(self, link_extractor, callback=None, cb_kwargs=None, follow=None, process_links=None, process_request=identity):</div><div class="line">        self.link_extractor = link_extractor</div><div class="line">        self.callback = callback</div><div class="line">        self.cb_kwargs = cb_kwargs or &#123;&#125;</div><div class="line">        self.process_links = process_links</div><div class="line">        self.process_request = process_request</div><div class="line">        if follow is None:</div><div class="line">            self.follow = False if callback else True</div><div class="line">        else:</div><div class="line">            self.follow = follow</div></pre></td></tr></table></figure>
<p>因此LinkExtractor会传给link_extractor。</p>
<h3 id="有callback的是由指定的函数处理，没有callback的是由哪个函数处理的？"><a href="#有callback的是由指定的函数处理，没有callback的是由哪个函数处理的？" class="headerlink" title="有callback的是由指定的函数处理，没有callback的是由哪个函数处理的？"></a><strong>有callback的是由指定的函数处理，没有callback的是由哪个函数处理的？</strong></h3><p>由上面的讲解可以发现<code>_parse_response</code>会处理有<code>callback</code>的（响应）respons。<br>cb_res = callback(response, **cb_kwargs) or ()<br>而<code>_requests_to_follow</code>会将<code>self._response_downloaded</code>传给<code>callback</code>用于对页面中匹配的url发起请求（request）。<br>r = Request(url=link.url, callback=self._response_downloaded) </p>
<h3 id="如何在CrawlSpider进行模拟登陆"><a href="#如何在CrawlSpider进行模拟登陆" class="headerlink" title="如何在CrawlSpider进行模拟登陆"></a><strong>如何在CrawlSpider进行模拟登陆</strong></h3><p>因为CrawlSpider和Spider一样，都要使用start_requests发起请求，用从<a href="http://www.jianshu.com/users/4ee453b72aff" target="_blank" rel="external">Andrew_liu</a>大神借鉴的代码说明如何模拟登陆：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##替换原来的start_requests，callback为</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> [Request(<span class="string">"http://www.zhihu.com/#signin"</span>, meta = &#123;<span class="string">'cookiejar'</span> : <span class="number">1</span>&#125;, callback = self.post_login)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_login</span><span class="params">(self, response)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Preparing login'</span></div><div class="line">    <span class="comment">#下面这句话用于抓取请求网页后返回网页中的_xsrf字段的文字, 用于成功提交表单</span></div><div class="line">    xsrf = Selector(response).xpath(<span class="string">'//input[@name="_xsrf"]/@value'</span>).extract()[<span class="number">0</span>]</div><div class="line">    <span class="keyword">print</span> xsrf</div><div class="line">    <span class="comment">#FormRequeset.from_response是Scrapy提供的一个函数, 用于post表单</span></div><div class="line">    <span class="comment">#登陆成功后, 会调用after_login回调函数</span></div><div class="line">    <span class="keyword">return</span> [FormRequest.from_response(response,   <span class="comment">#"http://www.zhihu.com/login",</span></div><div class="line">                        meta = &#123;<span class="string">'cookiejar'</span> : response.meta[<span class="string">'cookiejar'</span>]&#125;,</div><div class="line">                        headers = self.headers,</div><div class="line">                        formdata = &#123;</div><div class="line">                        <span class="string">'_xsrf'</span>: xsrf,</div><div class="line">                        <span class="string">'email'</span>: <span class="string">'1527927373@qq.com'</span>,</div><div class="line">                        <span class="string">'password'</span>: <span class="string">'321324jia'</span></div><div class="line">                        &#125;,</div><div class="line">                        callback = self.after_login,</div><div class="line">                        dont_filter = <span class="keyword">True</span></div><div class="line">                        )]</div><div class="line"></div><div class="line"><span class="comment">#make_requests_from_url会调用parse，就可以与CrawlSpider的parse进行衔接了</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_login</span><span class="params">(self, response)</span> :</span></div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls :</div><div class="line">        <span class="keyword">yield</span> self.make_requests_from_url(url)</div></pre></td></tr></table></figure>
<h3 id="源码及注释"><a href="#源码及注释" class="headerlink" title="源码及注释"></a><strong>源码及注释</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrawlSpider</span><span class="params">(Spider)</span>:</span></div><div class="line"></div><div class="line">    rules = ()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *a, **kw)</span>:</span></div><div class="line">        super(CrawlSpider, self).__init__(*a, **kw)</div><div class="line">        self._compile_rules()</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        首先调用parse()来处理start_urls中返回的response对象  </div><div class="line">    	parse()则将这些response对象传递给了_parse_response()函数处理，并设置回调函数为parse_start_url()  </div><div class="line">    	设置了跟进标志位True  </div><div class="line">    	parse将返回item和跟进了的Request对象 </div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> self._parse_response(response, self.parse_start_url, cb_kwargs=&#123;&#125;, follow=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_start_url</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        处理start_url中返回的response，需要重写</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_results</span><span class="params">(self, response, results)</span>:</span></div><div class="line">        <span class="keyword">return</span> results</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_requests_to_follow</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        从response中抽取符合任一用户定义'规则'的链接，并构造成Resquest对象返回 </div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(response, HtmlResponse):</div><div class="line">            <span class="keyword">return</span></div><div class="line">        seen = set()</div><div class="line">        <span class="keyword">for</span> n, rule <span class="keyword">in</span> enumerate(self._rules):</div><div class="line">            <span class="comment"># 抽取之内的所有链接，只要通过任意一个'规则'，即表示合法 </span></div><div class="line">            links = [lnk <span class="keyword">for</span> lnk <span class="keyword">in</span> rule.link_extractor.extract_links(response)</div><div class="line">                     <span class="keyword">if</span> lnk <span class="keyword">not</span> <span class="keyword">in</span> seen] </div><div class="line">            <span class="keyword">if</span> links <span class="keyword">and</span> rule.process_links:</div><div class="line">                <span class="comment"># 使用用户指定的process_links处理每个连接 </span></div><div class="line">                links = rule.process_links(links)</div><div class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links:</div><div class="line">                <span class="comment"># 将链接加入seen集合，为每个链接生成Request对象，并设置回调函数为_repsonse_downloaded()  </span></div><div class="line">                seen.add(link)</div><div class="line">                <span class="comment"># 构造Request对象，并将Rule规则中定义的回调函数作为这个Request对象的回调函数  </span></div><div class="line">                r = Request(url=link.url, callback=self._response_downloaded)</div><div class="line">                r.meta.update(rule=n, link_text=link.text)</div><div class="line">                <span class="comment"># 对每个Request调用process_request()函数。该函数默认为indentify，即不做任何处理，直接返回该Request.</span></div><div class="line">                <span class="keyword">yield</span> rule.process_request(r)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_response_downloaded</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        处理通过rule提取出的连接，并返回item以及request</div><div class="line">        """</div><div class="line">        rule = self._rules[response.meta[<span class="string">'rule'</span>]]</div><div class="line">        <span class="keyword">return</span> self._parse_response(response, rule.callback, rule.cb_kwargs, rule.follow)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_parse_response</span><span class="params">(self, response, callback, cb_kwargs, follow=True)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        解析response对象，会用callback解析处理他，并返回request或Item对象  </div><div class="line">        首先判断是否设置了回调函数。（该回调函数可能是rule中的解析函数，也可能是 parse_start_url函数）  </div><div class="line">        如果设置了回调函数（parse_start_url()），那么首先用parse_start_url()处理response对象，  </div><div class="line">        然后再交给process_results处理。返回cb_res的一个列表  </div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> callback:</div><div class="line">            <span class="comment"># 如果是parse调用的，则会解析成Request对象  </span></div><div class="line">            <span class="comment"># 如果是rule callback，则会解析成Item </span></div><div class="line">            cb_res = callback(response, **cb_kwargs) <span class="keyword">or</span> ()</div><div class="line">            cb_res = self.process_results(response, cb_res)</div><div class="line">            <span class="keyword">for</span> requests_or_item <span class="keyword">in</span> iterate_spider_output(cb_res):</div><div class="line">                <span class="keyword">yield</span> requests_or_item</div><div class="line"></div><div class="line">        <span class="keyword">if</span> follow <span class="keyword">and</span> self._follow_links:</div><div class="line">            <span class="comment">#如果需要跟进，那么使用定义的Rule规则提取并返回这些Request对象 </span></div><div class="line">            <span class="keyword">for</span> request_or_item <span class="keyword">in</span> self._requests_to_follow(response):</div><div class="line">                <span class="keyword">yield</span> request_or_item</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_compile_rules</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_method</span><span class="params">(method)</span>:</span></div><div class="line">            <span class="keyword">if</span> callable(method):</div><div class="line">                <span class="keyword">return</span> method</div><div class="line">            <span class="keyword">elif</span> isinstance(method, six.string_types):</div><div class="line">                <span class="keyword">return</span> getattr(self, method, <span class="keyword">None</span>)</div><div class="line"></div><div class="line">        self._rules = [copy.copy(r) <span class="keyword">for</span> r <span class="keyword">in</span> self.rules]</div><div class="line">        <span class="keyword">for</span> rule <span class="keyword">in</span> self._rules:</div><div class="line">            rule.callback = get_method(rule.callback)</div><div class="line">            rule.process_links = get_method(rule.process_links)</div><div class="line">            rule.process_request = get_method(rule.process_request)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler, *args, **kwargs)</span>:</span></div><div class="line">        spider = super(CrawlSpider, cls).from_crawler(crawler, *args, **kwargs)</div><div class="line">        spider._follow_links = crawler.settings.getbool(</div><div class="line">            <span class="string">'CRAWLSPIDER_FOLLOW_LINKS'</span>, <span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> spider</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_crawler</span><span class="params">(self, crawler)</span>:</span></div><div class="line">        super(CrawlSpider, self).set_crawler(crawler)</div><div class="line">        self._follow_links = crawler.settings.getbool(<span class="string">'CRAWLSPIDER_FOLLOW_LINKS'</span>, <span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h2 id="创建CrawlSpider"><a href="#创建CrawlSpider" class="headerlink" title="创建CrawlSpider"></a><strong>创建CrawlSpider</strong></h2><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fgf0mz0pcuj31fu0vawon.jpg" alt=""></p>
<p>出现问题：<code>ImportError: No module named &#39;utils&#39;</code></p>
<p>原因：我们之前将项目目录下的 <code>ArticleSpider</code> 文件夹Mark为 <code>Sources Root</code> 导致。</p>
<p>解决办法：自己在 <code>Settings.py</code> 中设置搜索路径。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置搜索路径</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">BASE_DIR = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))</div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">'ArticleSpider'</span>))</div></pre></td></tr></table></figure>
<p>设置之后重新创建spider</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scrapy genspider -t crawl lagou www.lagou.com</div></pre></td></tr></table></figure>
<h2 id="数据表结构及items设计"><a href="#数据表结构及items设计" class="headerlink" title="数据表结构及items设计"></a><strong>数据表结构及items设计</strong></h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fgf10fvkqvj31400qe79r.jpg" alt=""></p>
<h2 id="完整代码逻辑"><a href="#完整代码逻辑" class="headerlink" title="完整代码逻辑"></a><strong>完整代码逻辑</strong></h2><h3 id="items-py"><a href="#items-py" class="headerlink" title="items.py"></a><strong>items.py</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_splash</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    去除工作城市的斜杠</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> value.replace(<span class="string">"/"</span>, <span class="string">""</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_jobaddr</span><span class="params">(value)</span>:</span></div><div class="line">    addr_list = value.split(<span class="string">"\n"</span>)</div><div class="line">    addr_list = [item.strip() <span class="keyword">for</span> item <span class="keyword">in</span> addr_list <span class="keyword">if</span> item.strip() != <span class="string">"查看地图"</span>]</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(addr_list)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouJobItemLoader</span><span class="params">(ItemLoader)</span>:</span></div><div class="line">    default_output_processor = TakeFirst()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouJobItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    拉勾网职位信息</div><div class="line">    """</div><div class="line">    title = scrapy.Field()</div><div class="line">    url = scrapy.Field()</div><div class="line">    url_object_id = scrapy.Field()</div><div class="line">    salary = scrapy.Field()</div><div class="line">    job_city = scrapy.Field(</div><div class="line">        input_processor=MapCompose(remove_splash),</div><div class="line">    )</div><div class="line">    work_years = scrapy.Field(</div><div class="line">        input_processor=MapCompose(remove_splash),</div><div class="line">    )</div><div class="line">    degree_need = scrapy.Field(</div><div class="line">        input_processor=MapCompose(remove_splash),</div><div class="line">    )</div><div class="line">    job_type = scrapy.Field()</div><div class="line">    publish_time = scrapy.Field()</div><div class="line">    job_advantage = scrapy.Field()</div><div class="line">    job_desc = scrapy.Field()</div><div class="line">    job_addr = scrapy.Field(</div><div class="line">        input_processor=MapCompose(remove_tags, handle_jobaddr),</div><div class="line">    )</div><div class="line">    company_name = scrapy.Field()</div><div class="line">    company_url = scrapy.Field()</div><div class="line">    tags = scrapy.Field(</div><div class="line">        input_processor=Join(<span class="string">","</span>)</div><div class="line">    )</div><div class="line">    crawl_time = scrapy.Field()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_insert_sql</span><span class="params">(self)</span>:</span></div><div class="line">        insert_sql = <span class="string">"""</span></div><div class="line">            insert into lagou_job(title, url, url_object_id, salary, job_city, work_years, degree_need,</div><div class="line">            job_type, publish_time, job_advantage, job_desc, job_addr, company_name, company_url,</div><div class="line">            tags, crawl_time)</div><div class="line">            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)</div><div class="line">            ON DUPLICATE KEY UPDATE salary=VALUES(salary), job_desc=VALUES(job_desc)</div><div class="line">        """</div><div class="line"></div><div class="line">        params = (</div><div class="line">            self[<span class="string">"title"</span>], self[<span class="string">"url"</span>], self[<span class="string">"url_object_id"</span>], self[<span class="string">"salary"</span>], self[<span class="string">"job_city"</span>],</div><div class="line">            self[<span class="string">"work_years"</span>], self[<span class="string">"degree_need"</span>], self[<span class="string">"job_type"</span>],</div><div class="line">            self[<span class="string">"publish_time"</span>], self[<span class="string">"job_advantage"</span>], self[<span class="string">"job_desc"</span>],</div><div class="line">            self[<span class="string">"job_addr"</span>], self[<span class="string">"company_name"</span>], self[<span class="string">"company_url"</span>],</div><div class="line">            self[<span class="string">"tags"</span>], self[<span class="string">"crawl_time"</span>].strftime(SQL_DATETIME_FORMAT),</div><div class="line">        )</div><div class="line"></div><div class="line">        <span class="keyword">return</span> insert_sql, params</div></pre></td></tr></table></figure>
<h3 id="lagou-py"><a href="#lagou-py" class="headerlink" title="lagou.py"></a><strong>lagou.py</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> items <span class="keyword">import</span> LagouJobItemLoader, LagouJobItem</div><div class="line"><span class="keyword">from</span> utils.common <span class="keyword">import</span> get_md5</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span><span class="params">(CrawlSpider)</span>:</span></div><div class="line">    name = <span class="string">'lagou'</span></div><div class="line">    allowed_domains = [<span class="string">'www.lagou.com'</span>]</div><div class="line">    start_urls = [<span class="string">'https://www.lagou.com/'</span>]</div><div class="line"></div><div class="line">    rules = (</div><div class="line">        Rule(LinkExtractor(allow=(<span class="string">'zhaopin/.*'</span>,)), ),</div><div class="line">        Rule(LinkExtractor(allow=(<span class="string">'gongsi/j\d+.html'</span>,)), ),</div><div class="line">        Rule(LinkExtractor(allow=<span class="string">r'jobs/\d+.html'</span>), callback=<span class="string">'parse_job'</span>, follow=<span class="keyword">True</span>),</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_job</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        解析拉勾网的职位</div><div class="line">        """</div><div class="line">        item_loader = LagouJobItemLoader(item=LagouJobItem(), response=response)</div><div class="line">        item_loader.add_css(<span class="string">"title"</span>, <span class="string">".job-name::attr(title)"</span>)</div><div class="line">        item_loader.add_value(<span class="string">"url"</span>, response.url)</div><div class="line">        item_loader.add_value(<span class="string">"url_object_id"</span>, get_md5(response.url))</div><div class="line">        item_loader.add_css(<span class="string">"salary"</span>, <span class="string">".job_request .salary::text"</span>)</div><div class="line">        item_loader.add_xpath(<span class="string">"job_city"</span>, <span class="string">"//*[@class='job_request']/p/span[2]/text()"</span>)</div><div class="line">        item_loader.add_xpath(<span class="string">"work_years"</span>, <span class="string">"//*[@class='job_request']/p/span[3]/text()"</span>)</div><div class="line">        item_loader.add_xpath(<span class="string">"degree_need"</span>, <span class="string">"//*[@class='job_request']/p/span[4]/text()"</span>)</div><div class="line">        item_loader.add_xpath(<span class="string">"job_type"</span>, <span class="string">"//*[@class='job_request']/p/span[5]/text()"</span>)</div><div class="line">        item_loader.add_css(<span class="string">"publish_time"</span>, <span class="string">".publish_time::text"</span>)</div><div class="line">        item_loader.add_css(<span class="string">"job_advantage"</span>, <span class="string">".job-advantage p::text"</span>)</div><div class="line">        item_loader.add_css(<span class="string">"job_desc"</span>, <span class="string">".job_bt div"</span>)</div><div class="line">        item_loader.add_css(<span class="string">"job_addr"</span>, <span class="string">".work_addr"</span>)</div><div class="line">        item_loader.add_css(<span class="string">"company_name"</span>, <span class="string">"#job_company dt a img::attr(alt)"</span>)</div><div class="line">        item_loader.add_css(<span class="string">"company_url"</span>, <span class="string">"#job_company dt a::attr(href)"</span>)</div><div class="line">        item_loader.add_css(<span class="string">"tags"</span>, <span class="string">".position-label li::text"</span>)</div><div class="line">        item_loader.add_value(<span class="string">"crawl_time"</span>, datetime.now())</div><div class="line"></div><div class="line">        job_item = item_loader.load_item()</div><div class="line"></div><div class="line">        <span class="keyword">return</span> job_item</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的Spider都是默认根据basic的templates创建，现在我们要用crawl的方式创建Spider，以爬取拉勾网整站信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Requests，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CRequests%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Scrapy爬取知乎</title>
    <link href="http://yoursite.com/2017/06/07/scrapy-zhihu/"/>
    <id>http://yoursite.com/2017/06/07/scrapy-zhihu/</id>
    <published>2017-06-07T06:18:54.000Z</published>
    <updated>2017-06-07T10:41:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>在完成了Scrapy模拟登录知乎后，下一步要进行的就是进行对知乎页面，问题以及答案等内容的爬取工作了。</p>
<a id="more"></a>
<h2 id="通过Scrapy-Shell进行调试"><a href="#通过Scrapy-Shell进行调试" class="headerlink" title="通过Scrapy Shell进行调试"></a><strong>通过Scrapy Shell进行调试</strong></h2><p>在使用shell调试时，直接通过 <code>scrapy shell https://www.zhihu.com/question/58765535</code> 会出现error 500错误。这是因为没有加headers的原因。<br>正确添加headers的方法是：<code>scrapy -s USER_AGENT=&quot;任意的User Agent&quot;</code> 。此时，就可以在shell中进行分析了。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fgct2bwtn7j30vo0n8gsb.jpg" alt=""></p>
<h2 id="获得要分析的链接"><a href="#获得要分析的链接" class="headerlink" title="获得要分析的链接"></a>获得要分析的链接</h2><p>在登录完成进入首页之后，通过深度优先算法获得首页需要的链接，然后打开这些链接再次获得里面的链接，不断重复，获得所有内容。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="comment"># 因为没有具体的入口，采用深度优先的算法</span></div><div class="line">        all_urls = response.css(<span class="string">"a::attr(href)"</span>).extract()</div><div class="line">        all_urls = [parse.urljoin(response.url, url) <span class="keyword">for</span> url <span class="keyword">in</span> all_urls]</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> all_urls:</div><div class="line">            <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>在分析页面内容之后，设计我们所需的数据表zhihu_question和zhihu_answer</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fgctdm536rj317a0k4jvj.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fgctdu7ub8j317k0kwaek.jpg" alt=""></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a><strong>完整代码</strong></h2><ul>
<li>zhihu.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</div><div class="line"><span class="keyword">from</span> items <span class="keyword">import</span> ZhihuAnswerItem, ZhihuQuestionItem</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> urlparse <span class="keyword">as</span> parse</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="keyword">from</span> urllib <span class="keyword">import</span> parse</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhihuSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"zhihu"</span></div><div class="line">    allowed_domains = [<span class="string">"www.zhihu.com"</span>]</div><div class="line">    start_urls = [<span class="string">'https://www.zhihu.com/'</span>]</div><div class="line"></div><div class="line">    <span class="comment"># question的第一页answer的请求url</span></div><div class="line">    start_answer_url = <span class="string">"https://www.zhihu.com/api/v4/questions/&#123;0&#125;/answers?sort_by=default&amp;include=data%5B%2A%5D.is_normal%2Cis_sticky%2Ccollapsed_by%2Csuggest_edit%2Ccomment_count%2Ccollapsed_counts%2Creviewing_comments_count%2Ccan_comment%2Ccontent%2Ceditable_content%2Cvoteup_count%2Creshipment_settings%2Ccomment_permission%2Cmark_infos%2Ccreated_time%2Cupdated_time%2Crelationship.is_author%2Cvoting%2Cis_thanked%2Cis_nothelp%2Cupvoted_followees%3Bdata%5B%2A%5D.author.is_blocking%2Cis_blocked%2Cis_followed%2Cvoteup_count%2Cmessage_thread_token%2Cbadge%5B%3F%28type%3Dbest_answerer%29%5D.topics&amp;limit=&#123;1&#125;&amp;offset=&#123;2&#125;"</span></div><div class="line"></div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">"Host"</span>: <span class="string">"www.zhihu.com"</span>,</div><div class="line">        <span class="string">"Referer"</span>: <span class="string">"https://www.zhihu.com/"</span>,</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        提取出html页面中的所有url 并跟踪这些url进行一步爬取</div><div class="line">        如果提取的url中格式为 /question/xxx 就下载之后直接进入解析函数</div><div class="line">        """</div><div class="line">        all_urls = response.css(<span class="string">"a::attr(href)"</span>).extract()</div><div class="line">        all_urls = [parse.urljoin(response.url, url) <span class="keyword">for</span> url <span class="keyword">in</span> all_urls]</div><div class="line">        all_urls = filter(<span class="keyword">lambda</span> x: <span class="keyword">True</span> <span class="keyword">if</span> x.startswith(<span class="string">"https"</span>) <span class="keyword">else</span> <span class="keyword">False</span>, all_urls)</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> all_urls:</div><div class="line">            match_obj = re.match(<span class="string">"(.*zhihu.com/question/(\d+))(/|$).*"</span>, url)</div><div class="line">            <span class="keyword">if</span> match_obj:</div><div class="line">                <span class="comment"># 如果提取到question相关的页面则下载后交由提取函数进行提取</span></div><div class="line">                request_url = match_obj.group(<span class="number">1</span>)</div><div class="line">                <span class="keyword">yield</span> scrapy.Request(request_url, headers=self.headers, callback=self.parse_question)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># 如果不是question页面则直接进一步跟踪</span></div><div class="line">                <span class="keyword">yield</span> scrapy.Request(url, headers=self.headers, callback=self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_question</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        处理question页面， 从页面中提取出具体的question item</div><div class="line">        """</div><div class="line">        <span class="comment"># 处理question页面， 从页面中提取出具体的question item</span></div><div class="line">        <span class="keyword">if</span> <span class="string">"QuestionHeader-title"</span> <span class="keyword">in</span> response.text:</div><div class="line">            <span class="comment"># 处理新版本</span></div><div class="line">            match_obj = re.match(<span class="string">"(.*zhihu.com/question/(\d+))(/|$).*"</span>, response.url)</div><div class="line">            <span class="keyword">if</span> match_obj:</div><div class="line">                question_id = int(match_obj.group(<span class="number">2</span>))</div><div class="line"></div><div class="line">            item_loader = ItemLoader(item=ZhihuQuestionItem(), response=response)</div><div class="line">            item_loader.add_css(<span class="string">"title"</span>, <span class="string">"h1.QuestionHeader-title::text"</span>)</div><div class="line">            item_loader.add_css(<span class="string">"content"</span>, <span class="string">".QuestionHeader-detail"</span>)</div><div class="line">            item_loader.add_value(<span class="string">"url"</span>, response.url)</div><div class="line">            item_loader.add_value(<span class="string">"zhihu_id"</span>, question_id)</div><div class="line">            item_loader.add_css(<span class="string">"answer_num"</span>, <span class="string">".List-headerText span::text"</span>)</div><div class="line">            item_loader.add_css(<span class="string">"comments_num"</span>, <span class="string">".QuestionHeader-Comment button::text"</span>)</div><div class="line">            item_loader.add_css(<span class="string">"watch_user_num"</span>, <span class="string">".NumberBoard-value::text"</span>)</div><div class="line">            item_loader.add_css(<span class="string">"topics"</span>, <span class="string">".QuestionHeader-topics .Popover div::text"</span>)</div><div class="line"></div><div class="line">            question_item = item_loader.load_item()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 处理老版本页面的item提取</span></div><div class="line">            match_obj = re.match(<span class="string">"(.*zhihu.com/question/(\d+))(/|$).*"</span>, response.url)</div><div class="line">            <span class="keyword">if</span> match_obj:</div><div class="line">                question_id = int(match_obj.group(<span class="number">2</span>))</div><div class="line"></div><div class="line">            item_loader = ItemLoader(item=ZhihuQuestionItem(), response=response)</div><div class="line">            <span class="comment"># item_loader.add_css("title", ".zh-question-title h2 a::text")</span></div><div class="line">            item_loader.add_xpath(<span class="string">"title"</span>,</div><div class="line">                                  <span class="string">"//*[@id='zh-question-title']/h2/a/text()|//*[@id='zh-question-title']/h2/span/text()"</span>)</div><div class="line">            item_loader.add_css(<span class="string">"content"</span>, <span class="string">"#zh-question-detail"</span>)</div><div class="line">            item_loader.add_value(<span class="string">"url"</span>, response.url)</div><div class="line">            item_loader.add_value(<span class="string">"zhihu_id"</span>, question_id)</div><div class="line">            item_loader.add_css(<span class="string">"answer_num"</span>, <span class="string">"#zh-question-answer-num::text"</span>)</div><div class="line">            item_loader.add_css(<span class="string">"comments_num"</span>, <span class="string">"#zh-question-meta-wrap a[name='addcomment']::text"</span>)</div><div class="line">            <span class="comment"># item_loader.add_css("watch_user_num", "#zh-question-side-header-wrap::text")</span></div><div class="line">            item_loader.add_xpath(<span class="string">"watch_user_num"</span>,</div><div class="line">                                  <span class="string">"//*[@id='zh-question-side-header-wrap']/text()|//*[@class='zh-question-followers-sidebar']/div/a/strong/text()"</span>)</div><div class="line">            item_loader.add_css(<span class="string">"topics"</span>, <span class="string">".zm-tag-editor-labels a::text"</span>)</div><div class="line"></div><div class="line">            question_item = item_loader.load_item()</div><div class="line"></div><div class="line">        <span class="keyword">yield</span> scrapy.Request(self.start_answer_url.format(question_id, <span class="number">20</span>, <span class="number">0</span>), headers=self.headers, callback=self.parse_answer)</div><div class="line">        <span class="keyword">yield</span> question_item</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_answer</span><span class="params">(self, reponse)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        处理question的answer</div><div class="line">        """</div><div class="line">        ans_json = json.loads(reponse.text)</div><div class="line">        is_end = ans_json[<span class="string">"paging"</span>][<span class="string">"is_end"</span>]</div><div class="line">        next_url = ans_json[<span class="string">"paging"</span>][<span class="string">"next"</span>]</div><div class="line"></div><div class="line">        <span class="comment"># 提取answer的具体字段</span></div><div class="line">        <span class="keyword">for</span> answer <span class="keyword">in</span> ans_json[<span class="string">"data"</span>]:</div><div class="line">            answer_item = ZhihuAnswerItem()</div><div class="line">            answer_item[<span class="string">"zhihu_id"</span>] = answer[<span class="string">"id"</span>]</div><div class="line">            answer_item[<span class="string">"url"</span>] = answer[<span class="string">"url"</span>]</div><div class="line">            answer_item[<span class="string">"question_id"</span>] = answer[<span class="string">"question"</span>][<span class="string">"id"</span>]</div><div class="line">            answer_item[<span class="string">"author_id"</span>] = answer[<span class="string">"author"</span>][<span class="string">"id"</span>] <span class="keyword">if</span> <span class="string">"id"</span> <span class="keyword">in</span> answer[<span class="string">"author"</span>] <span class="keyword">else</span> <span class="keyword">None</span></div><div class="line">            answer_item[<span class="string">"content"</span>] = answer[<span class="string">"content"</span>] <span class="keyword">if</span> <span class="string">"content"</span> <span class="keyword">in</span> answer <span class="keyword">else</span> <span class="keyword">None</span></div><div class="line">            answer_item[<span class="string">"praise_num"</span>] = answer[<span class="string">"voteup_count"</span>]</div><div class="line">            answer_item[<span class="string">"comments_num"</span>] = answer[<span class="string">"comment_count"</span>]</div><div class="line">            answer_item[<span class="string">"create_time"</span>] = answer[<span class="string">"created_time"</span>]</div><div class="line">            answer_item[<span class="string">"update_time"</span>] = answer[<span class="string">"updated_time"</span>]</div><div class="line">            answer_item[<span class="string">"crawl_time"</span>] = datetime.datetime.now()</div><div class="line"></div><div class="line">            <span class="keyword">yield</span> answer_item</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_end:</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(next_url, headers=self.headers, callback=self.parse_answer)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> [scrapy.Request(<span class="string">'https://www.zhihu.com/#signin'</span>, headers=self.headers, callback=self.login)]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, response)</span>:</span></div><div class="line">        response_text = response.text</div><div class="line">        match_obj = re.match(<span class="string">'.*name="_xsrf" value="(.*?)"'</span>, response_text, re.DOTALL)</div><div class="line">        xsrf = <span class="string">''</span></div><div class="line">        <span class="keyword">if</span> match_obj:</div><div class="line">            xsrf = (match_obj.group(<span class="number">1</span>))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> xsrf:</div><div class="line">            post_url = <span class="string">"https://www.zhihu.com/login/phone_num"</span></div><div class="line">            post_data = &#123;</div><div class="line">                <span class="string">"_xsrf"</span>: xsrf,</div><div class="line">                <span class="string">"phone_num"</span>: <span class="string">"18251556927"</span>,</div><div class="line">                <span class="string">"password"</span>: <span class="string">"lawtech0301520"</span>,</div><div class="line">                <span class="string">"captcha"</span>: <span class="string">""</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">import</span> time</div><div class="line">            t = str(int(time.time() * <span class="number">1000</span>))</div><div class="line">            captcha_url = <span class="string">"https://www.zhihu.com/captcha.gif?r=&#123;0&#125;&amp;type=login"</span>.format(t)</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(captcha_url, headers=self.headers, meta=&#123;<span class="string">"post_data"</span>: post_data&#125;,</div><div class="line">                                 callback=self.login_after_captcha)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_after_captcha</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">with</span> open(<span class="string">"captcha.jpg"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(response.body)</div><div class="line">            f.close()</div><div class="line"></div><div class="line">        <span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            im = Image.open(<span class="string">'captcha.jpg'</span>)</div><div class="line">            im.show()</div><div class="line">            im.close()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line">        captcha = input(<span class="string">"输入验证码\n&gt;"</span>)</div><div class="line"></div><div class="line">        post_data = response.meta.get(<span class="string">"post_data"</span>, &#123;&#125;)</div><div class="line">        post_url = <span class="string">"https://www.zhihu.com/login/phone_num"</span></div><div class="line">        post_data[<span class="string">"captcha"</span>] = captcha</div><div class="line">        <span class="keyword">return</span> [scrapy.FormRequest(</div><div class="line">            url=post_url,</div><div class="line">            formdata=post_data,</div><div class="line">            headers=self.headers,</div><div class="line">            callback=self.check_login</div><div class="line">        )]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_login</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        验证服务器的返回数据判断是否成功</div><div class="line">        """</div><div class="line">        text_json = json.loads(response.text)</div><div class="line">        <span class="keyword">if</span> <span class="string">"msg"</span> <span class="keyword">in</span> text_json <span class="keyword">and</span> text_json[<span class="string">"msg"</span>] == <span class="string">"登录成功"</span>:</div><div class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</div><div class="line">                <span class="keyword">yield</span> scrapy.Request(url, dont_filter=<span class="keyword">True</span>, headers=self.headers)</div></pre></td></tr></table></figure>
<p>为了用同一个Pipeline处理所有的数据库存储操作，因此将操作都放入items中，再有Pipeline进行统一处理。</p>
<ul>
<li>items.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhihuQuestionItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    知乎问题Item</div><div class="line">    """</div><div class="line">    zhihu_id = scrapy.Field()</div><div class="line">    topics = scrapy.Field()</div><div class="line">    url = scrapy.Field()</div><div class="line">    title = scrapy.Field()</div><div class="line">    content = scrapy.Field()</div><div class="line">    answer_num = scrapy.Field()</div><div class="line">    comments_num = scrapy.Field()</div><div class="line">    watch_user_num = scrapy.Field()</div><div class="line">    click_num = scrapy.Field()</div><div class="line">    crawl_time = scrapy.Field()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_insert_sql</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 插入知乎question表的sql语句</span></div><div class="line">        insert_sql = <span class="string">"""</span></div><div class="line">                    insert into zhihu_question(zhihu_id, topics, url, title, content, answer_num, comments_num,</div><div class="line">                      watch_user_num, click_num, crawl_time</div><div class="line">                      )</div><div class="line">                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s) </div><div class="line">                    ON DUPLICATE KEY UPDATE content=VALUES(content), answer_num=VALUES(answer_num), comments_num=VALUES(comments_num),</div><div class="line">              watch_user_num=VALUES(watch_user_num), click_num=VALUES(click_num)</div><div class="line">                """</div><div class="line"></div><div class="line">        zhihu_id = self[<span class="string">"zhihu_id"</span>][<span class="number">0</span>]</div><div class="line">        topics = <span class="string">","</span>.join(self[<span class="string">"topics"</span>])</div><div class="line">        url = self[<span class="string">"url"</span>][<span class="number">0</span>]</div><div class="line">        title = <span class="string">""</span>.join(self[<span class="string">"title"</span>])</div><div class="line">        content = <span class="string">""</span>.join(self[<span class="string">"content"</span>])</div><div class="line">        answer_num = extract_num(<span class="string">""</span>.join(self[<span class="string">"answer_num"</span>]))</div><div class="line">        comments_num = extract_num(<span class="string">""</span>.join(self[<span class="string">"comments_num"</span>]))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> len(self[<span class="string">"watch_user_num"</span>]) == <span class="number">2</span>:</div><div class="line">            watch_user_num = int(self[<span class="string">"watch_user_num"</span>][<span class="number">0</span>])</div><div class="line">            click_num = int(self[<span class="string">"watch_user_num"</span>][<span class="number">1</span>])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            watch_user_num = int(self[<span class="string">"watch_user_num"</span>][<span class="number">0</span>])</div><div class="line">            click_num = <span class="number">0</span></div><div class="line"></div><div class="line">        crawl_time = datetime.datetime.now().strftime(SQL_DATETIME_FORMAT)</div><div class="line"></div><div class="line">        params = (zhihu_id, topics, url, title, content, answer_num, comments_num,</div><div class="line">                  watch_user_num, click_num, crawl_time)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> insert_sql, params</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhihuAnswerItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    知乎回答Item</div><div class="line">    """</div><div class="line">    zhihu_id = scrapy.Field()</div><div class="line">    url = scrapy.Field()</div><div class="line">    question_id = scrapy.Field()</div><div class="line">    author_id = scrapy.Field()</div><div class="line">    content = scrapy.Field()</div><div class="line">    praise_num = scrapy.Field()</div><div class="line">    comments_num = scrapy.Field()</div><div class="line">    create_time = scrapy.Field()</div><div class="line">    update_time = scrapy.Field()</div><div class="line">    crawl_time = scrapy.Field()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_insert_sql</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 插入知乎question表的sql语句</span></div><div class="line">        insert_sql = <span class="string">"""</span></div><div class="line">                    insert into zhihu_answer(zhihu_id, url, question_id, author_id, content, praise_num, comments_num,</div><div class="line">              create_time, update_time, crawl_time</div><div class="line">              ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)</div><div class="line">              ON DUPLICATE KEY UPDATE content=VALUES(content), comments_num=VALUES(comments_num), praise_num=VALUES(praise_num),</div><div class="line">              update_time=VALUES(update_time)</div><div class="line">                """</div><div class="line"></div><div class="line">        create_time = datetime.datetime.fromtimestamp(self[<span class="string">'create_time'</span>]).strftime(SQL_DATETIME_FORMAT)</div><div class="line">        update_time = datetime.datetime.fromtimestamp(self[<span class="string">'update_time'</span>]).strftime(SQL_DATETIME_FORMAT)</div><div class="line"></div><div class="line">        params = (</div><div class="line">            self[<span class="string">"zhihu_id"</span>], self[<span class="string">"url"</span>], self[<span class="string">"question_id"</span>],</div><div class="line">            self[<span class="string">"author_id"</span>], self[<span class="string">"content"</span>], self[<span class="string">"praise_num"</span>],</div><div class="line">            self[<span class="string">"comments_num"</span>], create_time, update_time,</div><div class="line">            self[<span class="string">"crawl_time"</span>].strftime(SQL_DATETIME_FORMAT),</div><div class="line">        )</div><div class="line"></div><div class="line">        <span class="keyword">return</span> insert_sql, params</div></pre></td></tr></table></figure>
<ul>
<li>Pipelines.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlTwistedPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="comment"># 采用异步的机制写入mysql</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dbpool)</span>:</span></div><div class="line">        self.dbpool = dbpool</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_settings</span><span class="params">(cls, settings)</span>:</span></div><div class="line">        dbparms = dict(</div><div class="line">            host=settings[<span class="string">"MYSQL_HOST"</span>],</div><div class="line">            db=settings[<span class="string">"MYSQL_DBNAME"</span>],</div><div class="line">            user=settings[<span class="string">"MYSQL_USER"</span>],</div><div class="line">            passwd=settings[<span class="string">"MYSQL_PASSWORD"</span>],</div><div class="line">            charset=<span class="string">'utf8'</span>,</div><div class="line">            cursorclass=MySQLdb.cursors.DictCursor,</div><div class="line">            use_unicode=<span class="keyword">True</span>,</div><div class="line">        )</div><div class="line">        dbpool = adbapi.ConnectionPool(<span class="string">"MySQLdb"</span>, **dbparms)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> cls(dbpool)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="comment"># 使用twisted将mysql插入变成异步执行</span></div><div class="line">        query = self.dbpool.runInteraction(self.do_insert, item)</div><div class="line">        query.addErrback(self.handle_error, item, spider)  <span class="comment"># 处理异常</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_error</span><span class="params">(self, failure, item, spider)</span>:</span></div><div class="line">        <span class="comment"># 处理异步插入的异常</span></div><div class="line">        print(failure)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_insert</span><span class="params">(self, cursor, item)</span>:</span></div><div class="line">        <span class="comment"># 执行具体的插入</span></div><div class="line">        <span class="comment"># 根据不同的item 构建不同的sql语句并插入到mysql中</span></div><div class="line">        insert_sql, params = item.get_insert_sql()</div><div class="line">        cursor.execute(insert_sql, params)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在完成了Scrapy模拟登录知乎后，下一步要进行的就是进行对知乎页面，问题以及答案等内容的爬取工作了。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Requests，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CRequests%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Requests模拟登录知乎</title>
    <link href="http://yoursite.com/2017/05/11/scrapy-requests-zhihu-login/"/>
    <id>http://yoursite.com/2017/05/11/scrapy-requests-zhihu-login/</id>
    <published>2017-05-11T06:18:54.000Z</published>
    <updated>2017-05-12T06:55:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://docs.python-requests.org/zh_CN/latest/index.html" target="_blank" rel="external">Requests</a> 是以 <a href="http://www.python.org/dev/peps/pep-0020" target="_blank" rel="external">PEP 20</a> 的箴言为中心开发的</p>
<ol>
<li>Beautiful is better than ugly.(美丽优于丑陋)</li>
<li>Explicit is better than implicit.(直白优于含蓄)</li>
<li>Simple is better than complex.(简单优于复杂)</li>
<li>Complex is better than complicated.(复杂优于繁琐)</li>
<li>Readability counts.(可读性很重要)</li>
</ol>
<a id="more"></a>
<h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a><strong>常见状态码</strong></h2><table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>请求被正确执行</td>
</tr>
<tr>
<td>301/302</td>
<td>永久性重定向/临时性重定向</td>
</tr>
<tr>
<td>403</td>
<td>没有权限访问</td>
</tr>
<tr>
<td>404</td>
<td>没有资源访问</td>
</tr>
<tr>
<td>500</td>
<td>服务器错误</td>
</tr>
<tr>
<td>503</td>
<td>服务器停机或正在维护</td>
</tr>
</tbody>
</table>
<h2 id="登录分析"><a href="#登录分析" class="headerlink" title="登录分析"></a><strong>登录分析</strong></h2><p><img src="http://ww2.sinaimg.cn/large/006tNbRwgy1ffikxe4s70j30lo05sjsg.jpg" alt="">在登录界面，输入手机号和密码，返回的地址为 <code>Request URL:https://www.zhihu.com/login/phone_num</code><br>当输入email地址后返回的地址为 <code>Request URL:https://www.zhihu.com/login/email</code><br>并且在formdata中出现 <code>_xsrf:a71f46d549979fa192c09e11e4a463b5</code> 这样的字符串。</p>
<p><img src="http://ww1.sinaimg.cn/large/006tNbRwgy1ffiky17f7cj30uk05mabd.jpg" alt=""></p>
<h2 id="抓取xsrf的值"><a href="#抓取xsrf的值" class="headerlink" title="抓取xsrf的值"></a><strong>抓取xsrf的值</strong></h2><p>正则匹配抓取xsrf需要使用header头来进行源代码的获取：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_xsrf</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    获取xsrf code</div><div class="line">    :return: xsrf code</div><div class="line">    """</div><div class="line">    response = requests.get(<span class="string">"https://www.zhihu.com"</span>, headers=headers)</div><div class="line">    match_obj = re.match(<span class="string">'.*name="_xsrf" value="(.*?)"'</span>, response.text)</div><div class="line">    <span class="keyword">if</span> match_obj:</div><div class="line">        print(match_obj.group(<span class="number">1</span>))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span></div></pre></td></tr></table></figure>
<h2 id="验证码获取"><a href="#验证码获取" class="headerlink" title="验证码获取"></a><strong>验证码获取</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_captcha</span><span class="params">()</span>:</span></div><div class="line">    t = str(int(time.time() * <span class="number">1000</span>))</div><div class="line">    captcha_url = <span class="string">'https://www.zhihu.com/captcha.gif?r='</span> + t + <span class="string">"&amp;type=login"</span></div><div class="line">    r = session.get(captcha_url, headers=headers)</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'captcha.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(r.content)</div><div class="line">        f.close()</div><div class="line">    im = Image.open(<span class="string">'captcha.jpg'</span>)</div><div class="line">    im.show()</div><div class="line">    im.close()</div><div class="line">    captcha = input(<span class="string">"请输入验证码：\n"</span>)</div><div class="line">    <span class="keyword">return</span> captcha</div></pre></td></tr></table></figure>
<h2 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a><strong>登录逻辑</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zhihu_login</span><span class="params">(account, password)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    知乎登录</div><div class="line">    :param account: </div><div class="line">    :param password: </div><div class="line">    :return: </div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> re.match(<span class="string">"^1\d&#123;10&#125;$"</span>, account):</div><div class="line">        print(<span class="string">"手机号码登录 \n"</span>)</div><div class="line">        post_url = <span class="string">"https://www.zhihu.com/login/phone_num"</span></div><div class="line">        post_data = &#123;</div><div class="line">            <span class="string">"_xsrf"</span>: get_xsrf(),</div><div class="line">            <span class="string">"phone_num"</span>: account,</div><div class="line">            <span class="string">"password"</span>: password</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> <span class="string">"@"</span> <span class="keyword">in</span> account:</div><div class="line">            print(<span class="string">"邮箱登录 \n"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"你的账号输入有问题，请重新登录"</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        post_url = <span class="string">'https://www.zhihu.com/login/email'</span></div><div class="line">        post_data = &#123;</div><div class="line">            <span class="string">'_xsrf'</span>: get_xsrf(),</div><div class="line">            <span class="string">'password'</span>: password,</div><div class="line">            <span class="string">'email'</span>: account</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="comment"># 不需要验证码直接登录成功</span></div><div class="line">    login_page = session.post(post_url, post_data, headers=headers)</div><div class="line">    login_code = login_page.json()</div><div class="line">    <span class="keyword">if</span> login_code[<span class="string">'r'</span>] == <span class="number">1</span>:</div><div class="line">        <span class="comment"># 不输入验证码登录失败</span></div><div class="line">        <span class="comment"># 使用需要输入验证码的方式登录</span></div><div class="line">        post_data[<span class="string">"captcha"</span>] = get_captcha()</div><div class="line">        login_page = session.post(post_url, post_data, headers=headers)</div><div class="line">        login_code = login_page.json()</div><div class="line">        print(login_code[<span class="string">'msg'</span>])</div><div class="line">    <span class="comment"># 保存 cookies 到文件，</span></div><div class="line">    <span class="comment"># 下次可以使用 cookie 直接登录，不需要输入账号和密码</span></div><div class="line">    session.cookies.save()</div></pre></td></tr></table></figure>
<p>以上代码是通过引入requests库，使用它的session方法，进行连接，构造post_data，把自己的用户名密码等信息发送到网站，并通过正则判断发送的是邮箱或是手机进行登录。<br>引入<code>import http.cookiejar as cookielib</code>，通过session.cookies.save()，对cookie进行保存。</p>
<h2 id="通过Cookie登录"><a href="#通过Cookie登录" class="headerlink" title="通过Cookie登录"></a><strong>通过Cookie登录</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用登录cookie信息</span></div><div class="line">session = requests.session()</div><div class="line">session.cookies = cookielib.LWPCookieJar(filename=<span class="string">"cookies.txt"</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    session.cookies.load(ignore_discard=<span class="keyword">True</span>)</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    print(<span class="string">"Cookie未能加载"</span>)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_login</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    通过查看用户个人信息来判断是否已经登录</div><div class="line">    :return: </div><div class="line">    """</div><div class="line">    url = <span class="string">"https://www.zhihu.com/settings/profile"</span></div><div class="line">    response = session.get(url, headers=headers, allow_redirects=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>登录只能一次，如果再次登录，可以直接通过查看cookie来判断是否为登录状态。</p>
<p>首先把cookie通过session.cookies.load装载进来，执行is_login()函数，如果成功可以访问inbox_url页面，则状态码为200表示成功。这里一定要注意allow_redirects=False，当不允许且登录时会自动跳转到登录页面，则状态码是301或者302。</p>
<h2 id="完整代码示例"><a href="#完整代码示例" class="headerlink" title="完整代码示例"></a><strong>完整代码示例</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></div><div class="line"><span class="string">"""</span></div><div class="line">__author__ = 'lawtech'</div><div class="line">__date__ = '2017/5/9 下午3:18'</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> cookielib</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="keyword">import</span> http.cookiejar <span class="keyword">as</span> cookielib</div><div class="line"></div><div class="line"><span class="comment"># 构造requests headers</span></div><div class="line">agent = <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36'</span></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">"Host"</span>: <span class="string">"www.zhihu.com"</span>,</div><div class="line">    <span class="string">"Referer"</span>: <span class="string">"https://www.zhihu.com/"</span>,</div><div class="line">    <span class="string">'User-Agent'</span>: agent</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 使用登录cookie信息</span></div><div class="line">session = requests.session()</div><div class="line">session.cookies = cookielib.LWPCookieJar(filename=<span class="string">"cookies.txt"</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    session.cookies.load(ignore_discard=<span class="keyword">True</span>)</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    print(<span class="string">"Cookie未能加载"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_xsrf</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    获取xsrf code</div><div class="line">    :return: xsrf code</div><div class="line">    """</div><div class="line">    response = requests.get(<span class="string">"https://www.zhihu.com"</span>, headers=headers)</div><div class="line">    match_obj = re.match(<span class="string">'.*name="_xsrf" value="(.*?)"'</span>, response.text)</div><div class="line">    <span class="keyword">if</span> match_obj:</div><div class="line">        print(match_obj.group(<span class="number">1</span>))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_captcha</span><span class="params">()</span>:</span></div><div class="line">    t = str(int(time.time() * <span class="number">1000</span>))</div><div class="line">    captcha_url = <span class="string">'https://www.zhihu.com/captcha.gif?r='</span> + t + <span class="string">"&amp;type=login"</span></div><div class="line">    r = session.get(captcha_url, headers=headers)</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'captcha.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(r.content)</div><div class="line">        f.close()</div><div class="line">    im = Image.open(<span class="string">'captcha.jpg'</span>)</div><div class="line">    im.show()</div><div class="line">    im.close()</div><div class="line">    captcha = input(<span class="string">"请输入验证码：\n"</span>)</div><div class="line">    <span class="keyword">return</span> captcha</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zhihu_login</span><span class="params">(account, password)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    知乎登录</div><div class="line">    :param account: </div><div class="line">    :param password: </div><div class="line">    :return: </div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> re.match(<span class="string">"^1\d&#123;10&#125;$"</span>, account):</div><div class="line">        print(<span class="string">"手机号码登录 \n"</span>)</div><div class="line">        post_url = <span class="string">"https://www.zhihu.com/login/phone_num"</span></div><div class="line">        post_data = &#123;</div><div class="line">            <span class="string">"_xsrf"</span>: get_xsrf(),</div><div class="line">            <span class="string">"phone_num"</span>: account,</div><div class="line">            <span class="string">"password"</span>: password</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> <span class="string">"@"</span> <span class="keyword">in</span> account:</div><div class="line">            print(<span class="string">"邮箱登录 \n"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"你的账号输入有问题，请重新登录"</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        post_url = <span class="string">'https://www.zhihu.com/login/email'</span></div><div class="line">        post_data = &#123;</div><div class="line">            <span class="string">'_xsrf'</span>: get_xsrf(),</div><div class="line">            <span class="string">'password'</span>: password,</div><div class="line">            <span class="string">'email'</span>: account</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="comment"># 不需要验证码直接登录成功</span></div><div class="line">    login_page = session.post(post_url, post_data, headers=headers)</div><div class="line">    login_code = login_page.json()</div><div class="line">    <span class="keyword">if</span> login_code[<span class="string">'r'</span>] == <span class="number">1</span>:</div><div class="line">        <span class="comment"># 不输入验证码登录失败</span></div><div class="line">        <span class="comment"># 使用需要输入验证码的方式登录</span></div><div class="line">        post_data[<span class="string">"captcha"</span>] = get_captcha()</div><div class="line">        login_page = session.post(post_url, post_data, headers=headers)</div><div class="line">        login_code = login_page.json()</div><div class="line">        print(login_code[<span class="string">'msg'</span>])</div><div class="line">    <span class="comment"># 保存 cookies 到文件，</span></div><div class="line">    <span class="comment"># 下次可以使用 cookie 直接登录，不需要输入账号和密码</span></div><div class="line">    session.cookies.save()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_login</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    通过查看用户个人信息来判断是否已经登录</div><div class="line">    :return: </div><div class="line">    """</div><div class="line">    url = <span class="string">"https://www.zhihu.com/settings/profile"</span></div><div class="line">    response = session.get(url, headers=headers, allow_redirects=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> is_login():</div><div class="line">        print(<span class="string">"您已经登录！"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        account = input(<span class="string">"请输入用户名：\n"</span>)</div><div class="line">        password = input(<span class="string">"请输入密码：\n"</span>)</div><div class="line">        zhihu_login(account, password)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://docs.python-requests.org/zh_CN/latest/index.html&quot;&gt;Requests&lt;/a&gt; 是以 &lt;a href=&quot;http://www.python.org/dev/peps/pep-0020&quot;&gt;PEP 20&lt;/a&gt; 的箴言为中心开发的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Beautiful is better than ugly.(美丽优于丑陋)&lt;/li&gt;
&lt;li&gt;Explicit is better than implicit.(直白优于含蓄)&lt;/li&gt;
&lt;li&gt;Simple is better than complex.(简单优于复杂)&lt;/li&gt;
&lt;li&gt;Complex is better than complicated.(复杂优于繁琐)&lt;/li&gt;
&lt;li&gt;Readability counts.(可读性很重要)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Requests，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CRequests%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——Scrapy模拟登录知乎</title>
    <link href="http://yoursite.com/2017/05/11/scrapy-login-zhihu/"/>
    <id>http://yoursite.com/2017/05/11/scrapy-login-zhihu/</id>
    <published>2017-05-11T06:18:54.000Z</published>
    <updated>2017-05-12T08:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Scrapy登录知乎要解决两个问题</p>
<ol>
<li>session的传递，保证处理登录是同一个状态。</li>
<li>首个登录页面的改变，由直接爬取的页面变为登录页面，再去爬取页面。</li>
</ol>
<a id="more"></a>
<p>话不多说，直接上代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhihuSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"zhihu"</span></div><div class="line">    allowed_domains = [<span class="string">"www.zhihu.com"</span>]</div><div class="line">    start_urls = [<span class="string">'http://www.zhihu.com/'</span>]</div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">"Host"</span>: <span class="string">"www.zhihu.com"</span>,</div><div class="line">        <span class="string">"Referer"</span>: <span class="string">"https://www.zhihu.com/"</span>,</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> [scrapy.Request(<span class="string">"https://www.zhihu.com/#signin"</span>, headers=self.headers, callback=self.login)]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        登录</div><div class="line">        :param response: </div><div class="line">        :return: </div><div class="line">        """</div><div class="line">        response_text = response.text</div><div class="line">        match_obj = re.match(<span class="string">'.*name="_xsrf" value="(.*?)"'</span>, response_text, re.DOTALL)</div><div class="line">        xsrf = <span class="string">''</span></div><div class="line">        <span class="keyword">if</span> match_obj:</div><div class="line">            xsrf = match_obj.group(<span class="number">1</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> xsrf:</div><div class="line">            post_data = &#123;</div><div class="line">                <span class="string">"_xsrf"</span>: xsrf,</div><div class="line">                <span class="string">"phone_num"</span>: <span class="string">"18951855817"</span>,</div><div class="line">                <span class="string">"password"</span>: <span class="string">"tracy584563542"</span></div><div class="line">            &#125;</div><div class="line">            t = str(int(time.time() * <span class="number">1000</span>))</div><div class="line">            captcha_url = <span class="string">'https://www.zhihu.com/captcha.gif?r='</span> + t + <span class="string">"&amp;type=login"</span></div><div class="line">            <span class="keyword">yield</span> scrapy.Request(captcha_url, headers=self.headers, meta=&#123;<span class="string">"post_data"</span>: post_data&#125;,</div><div class="line">                                 callback=self.login_after_captcha)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_after_captcha</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">with</span> open(<span class="string">"captcha.jpg"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(response.body)</div><div class="line">        im = Image.open(<span class="string">'captcha.jpg'</span>)</div><div class="line">        im.show()</div><div class="line">        im.close()</div><div class="line">        captcha = input(<span class="string">"请输入验证码：\n"</span>)</div><div class="line">        post_data = response.meta.get(<span class="string">"post_data"</span>, &#123;&#125;)</div><div class="line">        post_data[<span class="string">"captcha"</span>] = captcha</div><div class="line">        post_url = <span class="string">"https://www.zhihu.com/login/phone_num"</span></div><div class="line">        <span class="keyword">return</span> [scrapy.FormRequest(</div><div class="line">            url=post_url,</div><div class="line">            formdata=post_data,</div><div class="line">            headers=self.headers,</div><div class="line">            callback=self.check_login</div><div class="line">        )]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_login</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        验证服务器的返回数据判断登录是否成功</div><div class="line">        :param response: </div><div class="line">        :return: </div><div class="line">        """</div><div class="line">        text_json = json.loads(response.text)</div><div class="line">        <span class="keyword">if</span> <span class="string">'msg'</span> <span class="keyword">in</span> text_json <span class="keyword">and</span> text_json[<span class="string">'msg'</span>] == <span class="string">'登陆成功'</span>:</div><div class="line">            <span class="comment"># 从继承的Spider类中拿的内容，恢复到正确执行</span></div><div class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</div><div class="line">                <span class="keyword">yield</span> scrapy.Request(url, dont_filter=<span class="keyword">True</span>, headers=self.headers)</div></pre></td></tr></table></figure>
<p>首先对 <code>scrapy.Spider</code> 类中的 <code>start_requests(self)</code> 进行重载，改变首先要处理的页面为登录页面。<br>得到登录页面后，获得xsrf，并下载验证码，通过 <code>scrapy.FormRequest</code>构造登录数据，通过check_login回调函数判断登录是否成功。在代码的最后一行转回正常的登录流程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Scrapy登录知乎要解决两个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;session的传递，保证处理登录是同一个状态。&lt;/li&gt;
&lt;li&gt;首个登录页面的改变，由直接爬取的页面变为登录页面，再去爬取页面。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>Python分布式爬虫打造搜索引擎项目学习笔记——理解Session和Cookie机制</title>
    <link href="http://yoursite.com/2017/05/09/scrapy-session-cookie/"/>
    <id>http://yoursite.com/2017/05/09/scrapy-session-cookie/</id>
    <published>2017-05-09T06:18:54.000Z</published>
    <updated>2017-05-09T06:43:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookie-机制"><a href="#Cookie-机制" class="headerlink" title="Cookie 机制"></a><strong>Cookie 机制</strong></h2><p>Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。IETF RFC 2965 HTTP State Management Mechanism 是通用cookie规范。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求缚上这些cookies 。</p>
<a id="more"></a>
<p>具体来说cookie机制采用的是在客户端保持状态的方案。它是在用户端的会话状态的存贮机制，他需要用户打开客户端的cookie支持。cookie的作用就是为了解决HTTP协议无状态的缺陷所作的努力。</p>
<p>正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。</p>
<p>cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。</p>
<p>而session机制采用的是一种在服务器端保持状态的解决方案。同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的。而session提供了方便管理全局变量的方式 。</p>
<p>session是针对每一个用户的，变量的值保存在服务器上，用一个sessionID来区分是哪个用户session变量,这个值是通过用户的浏览器在访问的时候返回给服务器，当客户禁用cookie时，这个值也可能设置为由get来返回给服务器。</p>
<p>就安全性来说：当你访问一个使用session 的站点，同时在自己机子上建立一个cookie，建立在服务器端的session机制更安全些，因为它不会任意读取客户存储的信息。 </p>
<h2 id="Session-机制"><a href="#Session-机制" class="headerlink" title="Session 机制"></a><strong>Session 机制</strong></h2><p>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p>
<p>当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。</p>
<p>保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发挥给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。</p>
<p>经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。</p>
<p>Cookie与Session都能够进行会话跟踪，但是完成的原理不太一样。普通状况下二者均能够满足需求，但有时分不能够运用Cookie，有时分不能够运用Session。</p>
<h2 id="两者比较"><a href="#两者比较" class="headerlink" title="两者比较"></a><strong>两者比较</strong></h2><h3 id="存取方式不同"><a href="#存取方式不同" class="headerlink" title="存取方式不同"></a>存取方式不同</h3><p>Cookie中只能保管ASCII字符串，假如需求存取Unicode字符或者二进制数据，需求先进行编码。Cookie中也不能直接存取Java对象。若要存储略微复杂的信息，运用Cookie是比拟艰难的。</p>
<p>而Session中能够存取任何类型的数据，包括而不限于String、Integer、List、Map等。Session中也能够直接保管Java Bean乃至任何Java类，对象等，运用起来十分便当。能够把Session看做是一个Java容器类。</p>
<h3 id="隐私策略不同"><a href="#隐私策略不同" class="headerlink" title="隐私策略不同"></a>隐私策略不同</h3><p>Cookie存储在客户端阅读器中，对客户端是可见的，客户端的一些程序可能会窥探、复制以至修正Cookie中的内容。而Session存储在服务器上，对客户端是透明的，不存在敏感信息泄露的风险。</p>
<p>假如选用Cookie，比较好的方法是，敏感的信息如账号密码等尽量不要写到Cookie中。最好是像Google、Baidu那样将Cookie信息加密，提交到服务器后再进行解密，保证Cookie中的信息只要本人能读得懂。而假如选择Session就省事多了，反正是放在服务器上，Session里任何隐私都能够有效的保护。</p>
<h3 id="服务器压力不同"><a href="#服务器压力不同" class="headerlink" title="服务器压力不同"></a>服务器压力不同</h3><p>Session是保管在服务器端的，每个用户都会产生一个Session。假如并发访问的用户十分多，会产生十分多的Session，耗费大量的内存。因而像Google、Baidu、Sina这样并发访问量极高的网站，是不太可能运用Session来追踪客户会话的。</p>
<p>而Cookie保管在客户端，不占用服务器资源。假如并发阅读的用户十分多，Cookie是很好的选择。关于Google、Baidu、Sina来说，Cookie或许是唯一的选择。</p>
<h3 id="浏览器支持不同"><a href="#浏览器支持不同" class="headerlink" title="浏览器支持不同"></a>浏览器支持不同</h3><p>Cookie是需要客户端浏览器支持的。假如客户端禁用了Cookie，或者不支持Cookie，则会话跟踪会失效。关于WAP上的应用，常规的Cookie就派不上用场了。</p>
<p>假如客户端浏览器不支持Cookie，需要运用Session以及URL地址重写。需要注意的是一切的用到Session程序的URL都要进行URL地址重写，否则Session会话跟踪还会失效。关于WAP应用来说，Session+URL地址重写或许是它唯一的选择。</p>
<p>假如客户端支持Cookie，则Cookie既能够设为本浏览器窗口以及子窗口内有效（把过期时间设为–1），也能够设为一切阅读器窗口内有效（把过期时间设为某个大于0的整数）。但Session只能在本阅读器窗口以及其子窗口内有效。假如两个浏览器窗口互不相干，它们将运用两个不同的Session。（IE8下不同窗口Session相干）</p>
<h3 id="跨域支持不同"><a href="#跨域支持不同" class="headerlink" title="跨域支持不同"></a>跨域支持不同</h3><p>Cookie支持跨域名访问，例如将domain属性设置为“.biaodianfu.com”，则以“.biaodianfu.com”为后缀的一切域名均能够访问该Cookie。跨域名Cookie如今被普遍用在网络中，例如Google、Baidu、Sina等。而Session则不会支持跨域名访问。Session仅在他所在的域名内有效。</p>
<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>仅运用Cookie或者仅运用Session可能完成不了理想的效果。这时应该尝试一下同时运用Cookie与Session。Cookie与Session的搭配运用在实践项目中会完成很多意想不到的效果。</p>
<h2 id="Python-Django-中实现两种机制"><a href="#Python-Django-中实现两种机制" class="headerlink" title="Python Django 中实现两种机制"></a>Python Django 中实现两种机制</h2><h3 id="Cookie-设置"><a href="#Cookie-设置" class="headerlink" title="Cookie 设置"></a>Cookie 设置</h3><p>以下是Cookie设置的详细流程：</p>
<ol>
<li>客户端发起一个请求连接（如HTTP GET）</li>
<li>服务器在http响应头上加上Set-Cookie，里面存放字符串的键值对</li>
<li>客户端随后的http请求头加上Cookie首部，它包含了之前服务器响应中设置cookie的信息。</li>
</ol>
<p>根据这个Cookie首部的信息，服务器便能“记住”当前用户的信息。</p>
<p>下面就来看看Python中如何设置Cookie：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> HTTPServer</div><div class="line"><span class="keyword">from</span> SimpleHTTPServer <span class="keyword">import</span> SimpleHTTPRequestHandler</div><div class="line"><span class="keyword">import</span> Cookie</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequestHandler</span><span class="params">(SimpleHTTPRequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></div><div class="line">        content = <span class="string">"&lt;html&gt;&lt;body&gt;Path is: %s&lt;/body&gt;&lt;/html&gt;"</span> % self.path</div><div class="line">        self.send_response(<span class="number">200</span>)</div><div class="line">        self.send_header(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)</div><div class="line">        self.send_header(<span class="string">'Content-length'</span>, str(len(content)))</div><div class="line"></div><div class="line">        cookie = Cookie.SimpleCookie()</div><div class="line">        cookie[<span class="string">'id'</span>] = <span class="string">'some_value_42'</span></div><div class="line"></div><div class="line">        self.wfile.write(cookie.output())</div><div class="line">        self.wfile.write(<span class="string">'\r\n'</span>)</div><div class="line"></div><div class="line">        self.end_headers()</div><div class="line">        self.wfile.write(content)</div><div class="line"></div><div class="line">server = HTTPServer((<span class="string">''</span>, <span class="number">59900</span>), MyRequestHandler)</div><div class="line">server.serve_forever()</div></pre></td></tr></table></figure>
<p>查看服务器端的http响应头，会发现以下字段：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: id=some_value_42</div></pre></td></tr></table></figure>
<p>在Django中，可以用如下的方式获取或设置Cookie：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_cookie</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'id'</span> <span class="keyword">in</span> request.COOKIES:</div><div class="line">        cookie_id = request.COOKIES[<span class="string">'id'</span>]</div><div class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'Got cookie with id=%s'</span> % cookie_id)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        resp = HttpResponse(<span class="string">'No id cookie! Sending cookie to client'</span>)</div><div class="line">        resp.set_cookie(<span class="string">'id'</span>, <span class="string">'some_value_99'</span>)</div><div class="line">        <span class="keyword">return</span> resp</div></pre></td></tr></table></figure>
<p>Django通过一系列的包装使得封装Cookie的操作变得更加简单，那么它在其中是怎么实现cookie的读取的呢，下面来窥探原理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_cookies</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_cookies'</span>):</div><div class="line">        self._cookies = http.parse_cookie(self.environ.get(<span class="string">'HTTP_COOKIE'</span>, <span class="string">''</span>))</div><div class="line">    <span class="keyword">return</span> self._cookies</div></pre></td></tr></table></figure>
<p>可以看出，获取cookie的操作用了Lazy initialization（延迟加载）的技术，因为如果客户端不需要用到cookie，这个过程只会浪费不必要的操作。</p>
<p>再来看parse_cookie的实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_cookie</span><span class="params">(cookie)</span>:</span></div><div class="line">    <span class="keyword">if</span> cookie == <span class="string">''</span>:</div><div class="line">        <span class="keyword">return</span> &#123;&#125;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(cookie, Cookie.BaseCookie):</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            c = SimpleCookie()</div><div class="line">            c.load(cookie, ignore_parse_errors=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">except</span> Cookie.CookieError:</div><div class="line">            <span class="comment"># 无效cookie</span></div><div class="line">            <span class="keyword">return</span> &#123;&#125;</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        c = cookie</div><div class="line">    cookiedict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> c.keys():</div><div class="line">        cookiedict[key] = c.get(key).value</div><div class="line">    <span class="keyword">return</span> cookiedict</div></pre></td></tr></table></figure>
<p>它负责解析Cookie并把结果集成到一个dict（字典）对象中，并返回字典。而设置cookie的操作则会被WSGIHandler执行。</p>
<p>注：Django的底层实现了WSGI的接口（如WSGIRequest，WSGIServer等）。</p>
<h3 id="Session-应用"><a href="#Session-应用" class="headerlink" title="Session 应用"></a>Session 应用</h3><p>下面看一个简单的session应用例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_count_session</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'count'</span> <span class="keyword">in</span> request.session:</div><div class="line">        request.session[<span class="string">'count'</span>] += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'new count=%s'</span> % request.session[<span class="string">'count'</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        request.session[<span class="string">'count'</span>] = <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'No count in session. Setting to 1'</span>)</div></pre></td></tr></table></figure>
<p>它用session实现了一个计数器，当每一个请求到来时，就为计数器加一，把新的结果更新到session中。</p>
<p>查看http的响应头，会得到类似下面的信息。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Set-Cookie:sessionid=a92d67e44a9b92d7dafca67e507985c0;</div><div class="line">           expires=Thu, <span class="number">07</span>-Jul<span class="number">-2011</span> <span class="number">04</span>:<span class="number">16</span>:<span class="number">28</span> GMT;</div><div class="line">           Max-Age=<span class="number">1209600</span>;</div><div class="line">           Path=/</div></pre></td></tr></table></figure>
<p>里面包含了session_id以及过期时间等信息。</p>
<p>那么服务器端是如何保存session的呢？</p>
<p>在django中，默认会把session保存在setting指定的数据库中，除此之外，也可以通过指定session engine，使session保存在文件(file)，内存(cache)中。</p>
<p>如果保存在数据库中，django会在数据库中创建一个如下的session表。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE &quot;django_session&quot; (</div><div class="line">    &quot;session_key&quot; varchar(40) NOT NULL PRIMARY KEY,</div><div class="line">    &quot;session_data&quot; text NOT NULL,</div><div class="line">    &quot;expire_date&quot; datetime NOT NULL</div><div class="line">);</div></pre></td></tr></table></figure>
<p>session_key是放置在cookie中的id，它是唯一的，而session_data则存放序列化后的session数据字符串。</p>
<p>通过session_key可以在数据库中取得这条session的信息：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.contrib.sessions.models <span class="keyword">import</span> Session</div><div class="line"><span class="comment">#...</span></div><div class="line">sess = Session.objects.get(pk=<span class="string">'a92d67e44a9b92d7dafca67e507985c0'</span>)</div><div class="line">print(sess.session_data)</div><div class="line">print(sess.get_decoded())</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ZmEyNDVhNTBhMTk2ZmRjNzVlYzQ4NTFjZDk2Y2UwODc3YmVjNWVjZjqAAn1xAVUFY291bnRxAksG</div><div class="line">cy4=&#123;<span class="string">'count'</span>: <span class="number">6</span>&#125;</div></pre></td></tr></table></figure>
<p>回看第一个例子，我们是通过request.session来获取session的，为什么请求对象会附带一个session对象呢，这其中做了什么呢？</p>
<p>这就引出了下面要说的django里的中间件技术 <code>Session middleware</code>。</p>
<p>关于中间件，<code>&lt;&lt;the Django Book&gt;&gt;</code>是这样解释的：</p>
<p>Django的中间件框架，是django处理请求和响应的一套钩子函数的集合。</p>
<p>我们看传统的django视图模式一般是这样的：http请求-&gt;view-&gt;http响应，而加入中间件框架后，则变为：http请求-&gt;中间件处理-&gt;app-&gt;中间件处理-&gt;http响应。而在django中这两个处理分别对应process_request和process_response函数，这两个钩子函数将会在特定的时候被触发。</p>
<p>直接看SessionMiddleware可能更清晰一些：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        engine = import_module(settings.SESSION_ENGINE)</div><div class="line">        self.SessionStore = engine.SessionStore</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></div><div class="line">        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)</div><div class="line">        request.session = self.SessionStore(session_key)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        If request.session was modified, or if the configuration is to save the</div><div class="line">        session every time, save the changes and set a session cookie or delete</div><div class="line">        the session cookie if the session has been emptied.</div><div class="line">        """</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            accessed = request.session.accessed</div><div class="line">            modified = request.session.modified</div><div class="line">            empty = request.session.is_empty()</div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># First check if we need to delete this cookie.</span></div><div class="line">            <span class="comment"># The session should be deleted only if the session is entirely empty</span></div><div class="line">            <span class="keyword">if</span> settings.SESSION_COOKIE_NAME <span class="keyword">in</span> request.COOKIES <span class="keyword">and</span> empty:</div><div class="line">                response.delete_cookie(settings.SESSION_COOKIE_NAME,</div><div class="line">                    domain=settings.SESSION_COOKIE_DOMAIN)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> accessed:</div><div class="line">                    patch_vary_headers(response, (<span class="string">'Cookie'</span>,))</div><div class="line">                <span class="keyword">if</span> (modified <span class="keyword">or</span> settings.SESSION_SAVE_EVERY_REQUEST) <span class="keyword">and</span> <span class="keyword">not</span> empty:</div><div class="line">                    <span class="keyword">if</span> request.session.get_expire_at_browser_close():</div><div class="line">                        max_age = <span class="keyword">None</span></div><div class="line">                        expires = <span class="keyword">None</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        max_age = request.session.get_expiry_age()</div><div class="line">                        expires_time = time.time() + max_age</div><div class="line">                        expires = cookie_date(expires_time)</div><div class="line">                    <span class="comment"># Save the session data and refresh the client cookie.</span></div><div class="line">                    <span class="comment"># Skip session save for 500 responses, refs #3881.</span></div><div class="line">                    <span class="keyword">if</span> response.status_code != <span class="number">500</span>:</div><div class="line">                        <span class="keyword">try</span>:</div><div class="line">                            request.session.save()</div><div class="line">                        <span class="keyword">except</span> UpdateError:</div><div class="line">                            <span class="comment"># The user is now logged out; redirecting to same</span></div><div class="line">                            <span class="comment"># page will result in a redirect to the login page</span></div><div class="line">                            <span class="comment"># if required.</span></div><div class="line">                            <span class="keyword">return</span> redirect(request.path)</div><div class="line">                        response.set_cookie(settings.SESSION_COOKIE_NAME,</div><div class="line">                                request.session.session_key, max_age=max_age,</div><div class="line">                                expires=expires, domain=settings.SESSION_COOKIE_DOMAIN,</div><div class="line">                                path=settings.SESSION_COOKIE_PATH,</div><div class="line">                                secure=settings.SESSION_COOKIE_SECURE <span class="keyword">or</span> <span class="keyword">None</span>,</div><div class="line">                                httponly=settings.SESSION_COOKIE_HTTPONLY <span class="keyword">or</span> <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">return</span> response</div></pre></td></tr></table></figure>
<p>在请求到来后，SessionMiddleware的process_request在请求取出session_key，并把一个新的session对象赋给request.session，而在返回响应时，process_response则判断session是否被修改或过期，来更新session的信息。</p>
<h3 id="Django-用户认证中的-Session"><a href="#Django-用户认证中的-Session" class="headerlink" title="Django 用户认证中的 Session"></a>Django 用户认证中的 Session</h3><p>在django中，用下面的方法来验证用户是否登录是常见的事情。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_user</span><span class="params">(request)</span>:</span></div><div class="line">    user_str = str(request.user)</div><div class="line">    <span class="keyword">if</span> request.user.is_authenticated():</div><div class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'%s is logged in'</span> % user_str)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'%s is not logged in'</span> % user_str)</div></pre></td></tr></table></figure>
<p>其实request.user的实现也借助到了session。</p>
<p>在这个例子中，成功登录后，session表会保存类似下面的信息，里面记录了用户的id，以后进行验证时，便会到这个表中获取用户的信息。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;'_auth_user_id': 1, '_auth_user_backend': 'django.contrib.auth.backends.ModelBackend'&#125;</div></pre></td></tr></table></figure>
<p>跟上面提到的Session中间件相似，用户验证也有一个中间件：AuthenticationMiddleware，在process_request中，通过request.<strong>class</strong>.user = LazyUser()在request设置了一个全局的可缓存的用户对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyUser</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, request, obj_type=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(request, <span class="string">'_cached_user'</span>):</div><div class="line">            <span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user</div><div class="line">            request._cached_user = get_user(request)</div><div class="line">        <span class="keyword">return</span> request._cached_user</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthenticationMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></div><div class="line">        request.__class__.user = LazyUser()</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>在get_user里，会在检查session中是否存放了当前用户对应的user_id，如果有，则通过id在model查找相应的用户返回，否则返回一个匿名的用户对象(AnonymousUser)。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AnonymousUser</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        user_id = request.session[SESSION_KEY]</div><div class="line">        backend_path = request.session[BACKEND_SESSION_KEY]</div><div class="line">        backend = load_backend(backend_path)</div><div class="line">        user = backend.get_user(user_id) <span class="keyword">or</span> AnonymousUser()</div><div class="line">    <span class="keyword">except</span> KeyError:</div><div class="line">        user = AnonymousUser()</div><div class="line">    <span class="keyword">return</span> user</div></pre></td></tr></table></figure>
<h3 id="Django中的Session实现"><a href="#Django中的Session实现" class="headerlink" title="Django中的Session实现"></a>Django中的Session实现</h3><p>Django使用的Session默认都继承于SessionBase类里，这个类实现了一些session操作方法，以及hash，decode，encode等方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionBase</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Base class for all Session classes.</div><div class="line">    """</div><div class="line">    TEST_COOKIE_NAME = <span class="string">'testcookie'</span></div><div class="line">    TEST_COOKIE_VALUE = <span class="string">'worked'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, session_key=None)</span>:</span></div><div class="line">        self._session_key = session_key</div><div class="line">        self.accessed = <span class="keyword">False</span></div><div class="line">        self.modified = <span class="keyword">False</span></div><div class="line">        self.serializer = import_string(settings.SESSION_SERIALIZER)</div></pre></td></tr></table></figure>
<p>说的更直白一些，其实django中的session就是一个模拟dict的对象，并实现了一系列的hash和序列化方法，默认持久化在数据库中（有时候也可能由于为了提高性能，用redis之类的内存数据库来缓存session）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cookie-机制&quot;&gt;&lt;a href=&quot;#Cookie-机制&quot; class=&quot;headerlink&quot; title=&quot;Cookie 机制&quot;&gt;&lt;/a&gt;&lt;strong&gt;Cookie 机制&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。IETF RFC 2965 HTTP State Management Mechanism 是通用cookie规范。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求缚上这些cookies 。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/categories/Scrapy/"/>
    
    
      <category term="Scrapy，Django，Python" scheme="http://yoursite.com/tags/Scrapy%EF%BC%8CDjango%EF%BC%8CPython/"/>
    
  </entry>
  
</feed>
